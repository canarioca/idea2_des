/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface ProtSincopeDao
{
	/** 
	 * Inserts a new row in the prot_sincope table.
	 */
	public ProtSincopePk insert(ProtSincope dto) throws ProtSincopeDaoException;

	/** 
	 * Updates a single row in the prot_sincope table.
	 */
	public void update(ProtSincopePk pk, ProtSincope dto) throws ProtSincopeDaoException;

	/** 
	 * Deletes a single row in the prot_sincope table.
	 */
	public void delete(ProtSincopePk pk) throws ProtSincopeDaoException;

	/** 
	 * Returns the rows from the prot_sincope table that matches the specified primary-key value.
	 */
	public ProtSincope findByPrimaryKey(ProtSincopePk pk) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'IDPROTSINCOPE = :idprotsincope'.
	 */
	public ProtSincope findByPrimaryKey(Integer idprotsincope) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria ''.
	 */
	public ProtSincope[] findAll() throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'IDPROTSINCOPE = :idprotsincope'.
	 */
	public ProtSincope[] findWhereIdprotsincopeEquals(int idprotsincope) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'ANA_REALIZADA = :anaRealizada'.
	 */
	public ProtSincope[] findWhereAnaRealizadaEquals(int anaRealizada) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'ANA_FECHA = :anaFecha'.
	 */
	public ProtSincope[] findWhereAnaFechaEquals(Date anaFecha) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'ANA_HEMOGLOBINA = :anaHemoglobina'.
	 */
	public ProtSincope[] findWhereAnaHemoglobinaEquals(String anaHemoglobina) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'ANA_DDIMERO = :anaDdimero'.
	 */
	public ProtSincope[] findWhereAnaDdimeroEquals(String anaDdimero) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'ANA_LACTATO = :anaLactato'.
	 */
	public ProtSincope[] findWhereAnaLactatoEquals(String anaLactato) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'ANA_COMENTARIOS = :anaComentarios'.
	 */
	public ProtSincope[] findWhereAnaComentariosEquals(String anaComentarios) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_MONITORIZACION = :pdiagMonitorizacion'.
	 */
	public ProtSincope[] findWherePdiagMonitorizacionEquals(int pdiagMonitorizacion) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_MONITORIZACION_RES = :pdiagMonitorizacionRes'.
	 */
	public ProtSincope[] findWherePdiagMonitorizacionResEquals(String pdiagMonitorizacionRes) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ELR = :pdiagElr'.
	 */
	public ProtSincope[] findWherePdiagElrEquals(int pdiagElr) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ELR_RES = :pdiagElrRes'.
	 */
	public ProtSincope[] findWherePdiagElrResEquals(String pdiagElrRes) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_MESAB = :pdiagMesab'.
	 */
	public ProtSincope[] findWherePdiagMesabEquals(int pdiagMesab) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_MESAB_RES = :pdiagMesabRes'.
	 */
	public ProtSincope[] findWherePdiagMesabResEquals(String pdiagMesabRes) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ECOGRAFIA = :pdiagEcografia'.
	 */
	public ProtSincope[] findWherePdiagEcografiaEquals(int pdiagEcografia) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ECOGRAFIA_RES = :pdiagEcografiaRes'.
	 */
	public ProtSincope[] findWherePdiagEcografiaResEquals(String pdiagEcografiaRes) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_PESFUERZO = :pdiagPesfuerzo'.
	 */
	public ProtSincope[] findWherePdiagPesfuerzoEquals(int pdiagPesfuerzo) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_PESFUERZO_RES = :pdiagPesfuerzoRes'.
	 */
	public ProtSincope[] findWherePdiagPesfuerzoResEquals(String pdiagPesfuerzoRes) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ILR = :pdiagIlr'.
	 */
	public ProtSincope[] findWherePdiagIlrEquals(int pdiagIlr) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ILR_RES = :pdiagIlrRes'.
	 */
	public ProtSincope[] findWherePdiagIlrResEquals(String pdiagIlrRes) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ECGCONT = :pdiagEcgcont'.
	 */
	public ProtSincope[] findWherePdiagEcgcontEquals(int pdiagEcgcont) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ECGCONT_RES = :pdiagEcgcontRes'.
	 */
	public ProtSincope[] findWherePdiagEcgcontResEquals(String pdiagEcgcontRes) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_EEF = :pdiagEef'.
	 */
	public ProtSincope[] findWherePdiagEefEquals(int pdiagEef) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_EEF_RES = :pdiagEefRes'.
	 */
	public ProtSincope[] findWherePdiagEefResEquals(String pdiagEefRes) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_RXTORAX = :pdiagRxtorax'.
	 */
	public ProtSincope[] findWherePdiagRxtoraxEquals(int pdiagRxtorax) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_RXTORAX_RES = :pdiagRxtoraxRes'.
	 */
	public ProtSincope[] findWherePdiagRxtoraxResEquals(String pdiagRxtoraxRes) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_TACCER = :pdiagTaccer'.
	 */
	public ProtSincope[] findWherePdiagTaccerEquals(int pdiagTaccer) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_TACCER_RES = :pdiagTaccerRes'.
	 */
	public ProtSincope[] findWherePdiagTaccerResEquals(String pdiagTaccerRes) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_TACTOR = :pdiagTactor'.
	 */
	public ProtSincope[] findWherePdiagTactorEquals(int pdiagTactor) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_TACTOR_RES = :pdiagTactorRes'.
	 */
	public ProtSincope[] findWherePdiagTactorResEquals(String pdiagTactorRes) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ANGIOTAC = :pdiagAngiotac'.
	 */
	public ProtSincope[] findWherePdiagAngiotacEquals(int pdiagAngiotac) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ANGIOTAC_RES = :pdiagAngiotacRes'.
	 */
	public ProtSincope[] findWherePdiagAngiotacResEquals(String pdiagAngiotacRes) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'RES_DIAGFIN = :resDiagfin'.
	 */
	public ProtSincope[] findWhereResDiagfinEquals(int resDiagfin) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'RES_DECISIONCLIN = :resDecisionclin'.
	 */
	public ProtSincope[] findWhereResDecisionclinEquals(int resDecisionclin) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'RES_FECHA = :resFecha'.
	 */
	public ProtSincope[] findWhereResFechaEquals(Date resFecha) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'RES_COMENTARIOS = :resComentarios'.
	 */
	public ProtSincope[] findWhereResComentariosEquals(String resComentarios) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'RES_OPERADOR = :resOperador'.
	 */
	public ProtSincope[] findWhereResOperadorEquals(String resOperador) throws ProtSincopeDaoException;

	
	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the prot_sincope table that match the specified arbitrary SQL statement
	 */
	public ProtSincope[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProtSincopeDaoException;

	/** 
	 * Returns all rows from the prot_sincope table that match the specified arbitrary SQL statement
	 */
	public ProtSincope[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProtSincopeDaoException;

}
