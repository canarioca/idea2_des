/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface ArrEstudioSinusalDao
{
	/** 
	 * Inserts a new row in the ARR_ESTUDIO_SINUSAL table.
	 */
	public ArrEstudioSinusalPk insert(ArrEstudioSinusal dto) throws ArrEstudioSinusalDaoException;

	/** 
	 * Updates a single row in the ARR_ESTUDIO_SINUSAL table.
	 */
	public void update(ArrEstudioSinusalPk pk, ArrEstudioSinusal dto) throws ArrEstudioSinusalDaoException;

	/** 
	 * Deletes a single row in the ARR_ESTUDIO_SINUSAL table.
	 */
	public void delete(ArrEstudioSinusalPk pk) throws ArrEstudioSinusalDaoException;

	/** 
	 * Returns the rows from the ARR_ESTUDIO_SINUSAL table that matches the specified primary-key value.
	 */
	public ArrEstudioSinusal findByPrimaryKey(ArrEstudioSinusalPk pk) throws ArrEstudioSinusalDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_SINUSAL table that match the criteria 'IDESTUDIO = :idestudio'.
	 */
	public ArrEstudioSinusal findByPrimaryKey(Integer idestudio) throws ArrEstudioSinusalDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_SINUSAL table that match the criteria ''.
	 */
	public ArrEstudioSinusal[] findAll() throws ArrEstudioSinusalDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_SINUSAL table that match the criteria 'IDESTUDIO = :idestudio'.
	 */
	public ArrEstudioSinusal[] findWhereIdestudioEquals(long idestudio) throws ArrEstudioSinusalDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_SINUSAL table that match the criteria 'CICLO = :ciclo'.
	 */
	public ArrEstudioSinusal[] findWhereCicloEquals(String ciclo) throws ArrEstudioSinusalDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_SINUSAL table that match the criteria 'TRNS = :trns'.
	 */
	public ArrEstudioSinusal[] findWhereTrnsEquals(String trns) throws ArrEstudioSinusalDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_SINUSAL table that match the criteria 'TRNSC = :trnsc'.
	 */
	public ArrEstudioSinusal[] findWhereTrnscEquals(String trnsc) throws ArrEstudioSinusalDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_SINUSAL table that match the criteria 'TRT = :trt'.
	 */
	public ArrEstudioSinusal[] findWhereTrtEquals(String trt) throws ArrEstudioSinusalDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_SINUSAL table that match the criteria 'TCSA = :tcsa'.
	 */
	public ArrEstudioSinusal[] findWhereTcsaEquals(String tcsa) throws ArrEstudioSinusalDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_SINUSAL table that match the criteria 'HIPER = :hiper'.
	 */
	public ArrEstudioSinusal[] findWhereHiperEquals(long hiper) throws ArrEstudioSinusalDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_SINUSAL table that match the criteria 'FRECATRO = :frecatro'.
	 */
	public ArrEstudioSinusal[] findWhereFrecatroEquals(String frecatro) throws ArrEstudioSinusalDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_SINUSAL table that match the criteria 'FRECINT = :frecint'.
	 */
	public ArrEstudioSinusal[] findWhereFrecintEquals(String frecint) throws ArrEstudioSinusalDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_SINUSAL table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ArrEstudioSinusal[] findWhereComentariosEquals(String comentarios) throws ArrEstudioSinusalDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ARR_ESTUDIO_SINUSAL table that match the specified arbitrary SQL statement
	 */
	public ArrEstudioSinusal[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrEstudioSinusalDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_SINUSAL table that match the specified arbitrary SQL statement
	 */
	public ArrEstudioSinusal[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrEstudioSinusalDaoException;

}
