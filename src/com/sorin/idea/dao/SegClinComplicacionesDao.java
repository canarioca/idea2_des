/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface SegClinComplicacionesDao
{
	/** 
	 * Inserts a new row in the seg_clin_complicaciones table.
	 */
	public SegClinComplicacionesPk insert(SegClinComplicaciones dto) throws SegClinComplicacionesDaoException;

	/** 
	 * Updates a single row in the seg_clin_complicaciones table.
	 */
	public void update(SegClinComplicacionesPk pk, SegClinComplicaciones dto) throws SegClinComplicacionesDaoException;

	/** 
	 * Deletes a single row in the seg_clin_complicaciones table.
	 */
	public void delete(SegClinComplicacionesPk pk) throws SegClinComplicacionesDaoException;

	/** 
	 * Returns the rows from the seg_clin_complicaciones table that matches the specified primary-key value.
	 */
	public SegClinComplicaciones findByPrimaryKey(SegClinComplicacionesPk pk) throws SegClinComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_clin_complicaciones table that match the criteria 'IDCOMP = :idcomp AND IDSEGCLIN = :idsegclin'.
	 */
	public SegClinComplicaciones findByPrimaryKey(Integer idcomp, Integer idsegclin) throws SegClinComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_clin_complicaciones table that match the criteria ''.
	 */
	public SegClinComplicaciones[] findAll() throws SegClinComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_clin_complicaciones table that match the criteria 'IDCOMP = :idcomp'.
	 */
	public SegClinComplicaciones[] findWhereIdcompEquals(int idcomp) throws SegClinComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_clin_complicaciones table that match the criteria 'IDSEGCLIN = :idsegclin'.
	 */
	public SegClinComplicaciones[] findWhereIdsegclinEquals(int idsegclin) throws SegClinComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_clin_complicaciones table that match the criteria 'ACTITUD = :actitud'.
	 */
	public SegClinComplicaciones[] findWhereActitudEquals(String actitud) throws SegClinComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_clin_complicaciones table that match the criteria 'RESULTADO = :resultado'.
	 */
	public SegClinComplicaciones[] findWhereResultadoEquals(int resultado) throws SegClinComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_clin_complicaciones table that match the criteria 'OTRA = :otra'.
	 */
	public SegClinComplicaciones[] findWhereOtraEquals(String otra) throws SegClinComplicacionesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the seg_clin_complicaciones table that match the specified arbitrary SQL statement
	 */
	public SegClinComplicaciones[] findByDynamicSelect(String sql, Object[] sqlParams) throws SegClinComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_clin_complicaciones table that match the specified arbitrary SQL statement
	 */
	public SegClinComplicaciones[] findByDynamicWhere(String sql, Object[] sqlParams) throws SegClinComplicacionesDaoException;

}
