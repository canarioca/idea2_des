/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface TipoProcedimientoDao
{
	/** 
	 * Inserts a new row in the tipo_procedimiento table.
	 */
	public TipoProcedimientoPk insert(TipoProcedimiento dto) throws TipoProcedimientoDaoException;

	/** 
	 * Updates a single row in the tipo_procedimiento table.
	 */
	public void update(TipoProcedimientoPk pk, TipoProcedimiento dto) throws TipoProcedimientoDaoException;

	/** 
	 * Deletes a single row in the tipo_procedimiento table.
	 */
	public void delete(TipoProcedimientoPk pk) throws TipoProcedimientoDaoException;

	/** 
	 * Returns the rows from the tipo_procedimiento table that matches the specified primary-key value.
	 */
	public TipoProcedimiento findByPrimaryKey(TipoProcedimientoPk pk) throws TipoProcedimientoDaoException;

	/** 
	 * Returns all rows from the tipo_procedimiento table that match the criteria 'ID_TIPO_PROCEDIMIENTO = :idTipoProcedimiento'.
	 */
	public TipoProcedimiento findByPrimaryKey(int idTipoProcedimiento) throws TipoProcedimientoDaoException;

	/** 
	 * Returns all rows from the tipo_procedimiento table that match the criteria ''.
	 */
	public TipoProcedimiento[] findAll() throws TipoProcedimientoDaoException;

	/** 
	 * Returns all rows from the tipo_procedimiento table that match the criteria 'ID_TIPO_PROCEDIMIENTO = :idTipoProcedimiento'.
	 */
	public TipoProcedimiento[] findWhereIdTipoProcedimientoEquals(int idTipoProcedimiento) throws TipoProcedimientoDaoException;

	/** 
	 * Returns all rows from the tipo_procedimiento table that match the criteria 'NOMBRE_TIPO_PROCEDIMIENTO = :nombreTipoProcedimiento'.
	 */
	public TipoProcedimiento[] findWhereNombreTipoProcedimientoEquals(String nombreTipoProcedimiento) throws TipoProcedimientoDaoException;

	/** 
	 * Returns all rows from the tipo_procedimiento table that match the criteria 'MODULO = :modulo'.
	 */
	public TipoProcedimiento[] findWhereModuloEquals(String modulo) throws TipoProcedimientoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the tipo_procedimiento table that match the specified arbitrary SQL statement
	 */
	public TipoProcedimiento[] findByDynamicSelect(String sql, Object[] sqlParams) throws TipoProcedimientoDaoException;

	/** 
	 * Returns all rows from the tipo_procedimiento table that match the specified arbitrary SQL statement
	 */
	public TipoProcedimiento[] findByDynamicWhere(String sql, Object[] sqlParams) throws TipoProcedimientoDaoException;

}
