/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface CateterDao
{
	/** 
	 * Inserts a new row in the cateter table.
	 */
	public CateterPk insert(Cateter dto) throws CateterDaoException;

	/** 
	 * Updates a single row in the cateter table.
	 */
	public void update(CateterPk pk, Cateter dto) throws CateterDaoException;

	/** 
	 * Deletes a single row in the cateter table.
	 */
	public void delete(CateterPk pk) throws CateterDaoException;

	/** 
	 * Returns the rows from the cateter table that matches the specified primary-key value.
	 */
	public Cateter findByPrimaryKey(CateterPk pk) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria 'IDCATETER = :idcateter'.
	 */
	public Cateter findByPrimaryKey(Integer idcateter) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria ''.
	 */
	public Cateter[] findAll() throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria 'IDCATETER = :idcateter'.
	 */
	public Cateter[] findWhereIdcateterEquals(int idcateter) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria 'MODELO = :modelo'.
	 */
	public Cateter[] findWhereModeloEquals(String modelo) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria 'FABRICANTE = :fabricante'.
	 */
	public Cateter[] findWhereFabricanteEquals(int fabricante) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria 'REFERENCIA = :referencia'.
	 */
	public Cateter[] findWhereReferenciaEquals(String referencia) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria 'GS128 = :gs128'.
	 */
	public Cateter[] findWhereGs128Equals(String gs128) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria 'TIPO = :tipo'.
	 */
	public Cateter[] findWhereTipoEquals(int tipo) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria 'DISTANCIAELECS = :distanciaelecs'.
	 */
	public Cateter[] findWhereDistanciaelecsEquals(String distanciaelecs) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria 'NUMELECS = :numelecs'.
	 */
	public Cateter[] findWhereNumelecsEquals(int numelecs) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria 'TIPOABLACION = :tipoablacion'.
	 */
	public Cateter[] findWhereTipoablacionEquals(int tipoablacion) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria 'TIPODIAGNOSTICO = :tipodiagnostico'.
	 */
	public Cateter[] findWhereTipodiagnosticoEquals(int tipodiagnostico) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria 'TIPOCURVA = :tipocurva'.
	 */
	public Cateter[] findWhereTipocurvaEquals(int tipocurva) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria 'TAMANO = :tamano'.
	 */
	public Cateter[] findWhereTamanoEquals(int tamano) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria 'LONGITUD = :longitud'.
	 */
	public Cateter[] findWhereLongitudEquals(String longitud) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria 'ENERGIA = :energia'.
	 */
	public Cateter[] findWhereEnergiaEquals(int energia) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the criteria 'ACTIVO = :activo'.
	 */
	public Cateter[] findWhereActivoEquals(int activo) throws CateterDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the cateter table that match the specified arbitrary SQL statement
	 */
	public Cateter[] findByDynamicSelect(String sql, Object[] sqlParams) throws CateterDaoException;

	/** 
	 * Returns all rows from the cateter table that match the specified arbitrary SQL statement
	 */
	public Cateter[] findByDynamicWhere(String sql, Object[] sqlParams) throws CateterDaoException;

}
