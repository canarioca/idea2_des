/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface ArrConduccEcDao
{
	/** 
	 * Inserts a new row in the ARR_CONDUCC_EC table.
	 */
	public ArrConduccEcPk insert(ArrConduccEc dto) throws ArrConduccEcDaoException;

	/** 
	 * Updates a single row in the ARR_CONDUCC_EC table.
	 */
	public void update(ArrConduccEcPk pk, ArrConduccEc dto) throws ArrConduccEcDaoException;

	/** 
	 * Deletes a single row in the ARR_CONDUCC_EC table.
	 */
	public void delete(ArrConduccEcPk pk) throws ArrConduccEcDaoException;

	/** 
	 * Returns the rows from the ARR_CONDUCC_EC table that matches the specified primary-key value.
	 */
	public ArrConduccEc findByPrimaryKey(ArrConduccEcPk pk) throws ArrConduccEcDaoException;

	/** 
	 * Returns all rows from the ARR_CONDUCC_EC table that match the criteria 'IDESTIM = :idestim AND IDCONDUCCAV = :idconduccav'.
	 */
	public ArrConduccEc findByPrimaryKey(Integer idconduccav) throws ArrConduccEcDaoException;

	/** 
	 * Returns all rows from the ARR_CONDUCC_EC table that match the criteria ''.
	 */
	public ArrConduccEc[] findAll() throws ArrConduccEcDaoException;

	/** 
	 * Returns all rows from the ARR_CONDUCC_EC table that match the criteria 'IDCONDUCCAV = :idconduccav'.
	 */
	public ArrConduccEc[] findWhereIdconduccavEquals(long idconduccav) throws ArrConduccEcDaoException;

	/** 
	 * Returns all rows from the ARR_CONDUCC_EC table that match the criteria 'IDESTIM = :idestim'.
	 */
	public ArrConduccEc[] findWhereIdestimEquals(long idestim) throws ArrConduccEcDaoException;

	/** 
	 * Returns all rows from the ARR_CONDUCC_EC table that match the criteria 'CONDUC = :conduc'.
	 */
	public ArrConduccEc[] findWhereConducEquals(long conduc) throws ArrConduccEcDaoException;

	/** 
	 * Returns all rows from the ARR_CONDUCC_EC table that match the criteria 'FARMACO = :farmaco'.
	 */
	public ArrConduccEc[] findWhereFarmacoEquals(String farmaco) throws ArrConduccEcDaoException;

	/** 
	 * Returns all rows from the ARR_CONDUCC_EC table that match the criteria 'BLOQUEO = :bloqueo'.
	 */
	public ArrConduccEc[] findWhereBloqueoEquals(long bloqueo) throws ArrConduccEcDaoException;

	/** 
	 * Returns all rows from the ARR_CONDUCC_EC table that match the criteria 'NVIEL = :nviel'.
	 */
	public ArrConduccEc[] findWhereNvielEquals(long nviel) throws ArrConduccEcDaoException;

	/** 
	 * Returns all rows from the ARR_CONDUCC_EC table that match the criteria 'MS = :ms'.
	 */
	public ArrConduccEc[] findWhereMsEquals(String ms) throws ArrConduccEcDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ARR_CONDUCC_EC table that match the specified arbitrary SQL statement
	 */
	public ArrConduccEc[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrConduccEcDaoException;

	/** 
	 * Returns all rows from the ARR_CONDUCC_EC table that match the specified arbitrary SQL statement
	 */
	public ArrConduccEc[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrConduccEcDaoException;

}
