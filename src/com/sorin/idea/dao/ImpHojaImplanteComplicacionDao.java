/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface ImpHojaImplanteComplicacionDao
{
	/** 
	 * Inserts a new row in the imp_hoja_implante_complicacion table.
	 */
	public ImpHojaImplanteComplicacionPk insert(ImpHojaImplanteComplicacion dto) throws ImpHojaImplanteComplicacionDaoException;

	/** 
	 * Updates a single row in the imp_hoja_implante_complicacion table.
	 */
	public void update(ImpHojaImplanteComplicacionPk pk, ImpHojaImplanteComplicacion dto) throws ImpHojaImplanteComplicacionDaoException;

	/** 
	 * Deletes a single row in the imp_hoja_implante_complicacion table.
	 */
	public void delete(ImpHojaImplanteComplicacionPk pk) throws ImpHojaImplanteComplicacionDaoException;

	/** 
	 * Returns the rows from the imp_hoja_implante_complicacion table that matches the specified primary-key value.
	 */
	public ImpHojaImplanteComplicacion findByPrimaryKey(ImpHojaImplanteComplicacionPk pk) throws ImpHojaImplanteComplicacionDaoException;

	/** 
	 * Returns all rows from the imp_hoja_implante_complicacion table that match the criteria 'IDHOJAIMP = :idhojaimp AND IDCOMPL = :idcompl'.
	 */
	public ImpHojaImplanteComplicacion findByPrimaryKey(Integer idhojaimp, Integer idcompl) throws ImpHojaImplanteComplicacionDaoException;

	/** 
	 * Returns all rows from the imp_hoja_implante_complicacion table that match the criteria ''.
	 */
	public ImpHojaImplanteComplicacion[] findAll() throws ImpHojaImplanteComplicacionDaoException;

	/** 
	 * Returns all rows from the imp_hoja_implante_complicacion table that match the criteria 'IDHOJAIMP = :idhojaimp'.
	 */
	public ImpHojaImplanteComplicacion[] findWhereIdhojaimpEquals(int idhojaimp) throws ImpHojaImplanteComplicacionDaoException;

	/** 
	 * Returns all rows from the imp_hoja_implante_complicacion table that match the criteria 'IDCOMPL = :idcompl'.
	 */
	public ImpHojaImplanteComplicacion[] findWhereIdcomplEquals(int idcompl) throws ImpHojaImplanteComplicacionDaoException;

	/** 
	 * Returns all rows from the imp_hoja_implante_complicacion table that match the criteria 'ACTITUD = :actitud'.
	 */
	public ImpHojaImplanteComplicacion[] findWhereActitudEquals(String actitud) throws ImpHojaImplanteComplicacionDaoException;

	/** 
	 * Returns all rows from the imp_hoja_implante_complicacion table that match the criteria 'RESULTADO = :resultado'.
	 */
	public ImpHojaImplanteComplicacion[] findWhereResultadoEquals(String resultado) throws ImpHojaImplanteComplicacionDaoException;

	/** 
	 * Returns all rows from the imp_hoja_implante_complicacion table that match the criteria 'OTRA = :otra'.
	 */
	public ImpHojaImplanteComplicacion[] findWhereOtraEquals(String otra) throws ImpHojaImplanteComplicacionDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the imp_hoja_implante_complicacion table that match the specified arbitrary SQL statement
	 */
	public ImpHojaImplanteComplicacion[] findByDynamicSelect(String sql, Object[] sqlParams) throws ImpHojaImplanteComplicacionDaoException;

	/** 
	 * Returns all rows from the imp_hoja_implante_complicacion table that match the specified arbitrary SQL statement
	 */
	public ImpHojaImplanteComplicacion[] findByDynamicWhere(String sql, Object[] sqlParams) throws ImpHojaImplanteComplicacionDaoException;

}
