/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface EpisodioDao
{
	/** 
	 * Inserts a new row in the episodio table.
	 */
	public EpisodioPk insert(Episodio dto) throws EpisodioDaoException;

	/** 
	 * Updates a single row in the episodio table.
	 */
	public void update(EpisodioPk pk, Episodio dto) throws EpisodioDaoException;

	/** 
	 * Deletes a single row in the episodio table.
	 */
	public void delete(EpisodioPk pk) throws EpisodioDaoException;

	/** 
	 * Returns the rows from the episodio table that matches the specified primary-key value.
	 */
	public Episodio findByPrimaryKey(EpisodioPk pk) throws EpisodioDaoException;

	/** 
	 * Returns all rows from the episodio table that match the criteria 'IDEPISODIO = :idepisodio'.
	 */
	public Episodio findByPrimaryKey(Integer idepisodio) throws EpisodioDaoException;

	/** 
	 * Returns all rows from the episodio table that match the criteria ''.
	 */
	public Episodio[] findAll() throws EpisodioDaoException;

	/** 
	 * Returns all rows from the episodio table that match the criteria 'IDEPISODIO = :idepisodio'.
	 */
	public Episodio[] findWhereIdepisodioEquals(int idepisodio) throws EpisodioDaoException;

	/** 
	 * Returns all rows from the episodio table that match the criteria 'IDEVENTO = :idevento'.
	 */
	public Episodio[] findWhereIdeventoEquals(int idevento) throws EpisodioDaoException;

	/** 
	 * Returns all rows from the episodio table that match the criteria 'TIPO = :tipo'.
	 */
	public Episodio[] findWhereTipoEquals(int tipo) throws EpisodioDaoException;

	/** 
	 * Returns all rows from the episodio table that match the criteria 'FECHAINI = :fechaini'.
	 */
	public Episodio[] findWhereFechainiEquals(Date fechaini) throws EpisodioDaoException;

	/** 
	 * Returns all rows from the episodio table that match the criteria 'FECHAFIN = :fechafin'.
	 */
	public Episodio[] findWhereFechafinEquals(Date fechafin) throws EpisodioDaoException;

	/** 
	 * Returns all rows from the episodio table that match the criteria 'IDPACIENTE = :idpaciente'.
	 */
	public Episodio[] findWhereIdpacienteEquals(String idpaciente) throws EpisodioDaoException;

	/** 
	 * Returns all rows from the episodio table that match the criteria 'CODIGOPACIENTE = :codigopaciente'.
	 */
	public Episodio[] findWhereCodigopacienteEquals(int codigopaciente) throws EpisodioDaoException;

	/** 
	 * Returns all rows from the episodio table that match the criteria 'IDENTIFICADOR = :identificador'.
	 */
	public Episodio[] findWhereIdentificadorEquals(String identificador) throws EpisodioDaoException;

	/** 
	 * Returns all rows from the episodio table that match the criteria 'UNIDADFUNCIONAL = :unidadfuncional'.
	 */
	public Episodio[] findWhereUnidadfuncionalEquals(String unidadfuncional) throws EpisodioDaoException;

	/** 
	 * Returns all rows from the episodio table that match the criteria 'ESTADO = :estado'.
	 */
	public Episodio[] findWhereEstadoEquals(int estado) throws EpisodioDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the episodio table that match the specified arbitrary SQL statement
	 */
	public Episodio[] findByDynamicSelect(String sql, Object[] sqlParams) throws EpisodioDaoException;

	/** 
	 * Returns all rows from the episodio table that match the specified arbitrary SQL statement
	 */
	public Episodio[] findByDynamicWhere(String sql, Object[] sqlParams) throws EpisodioDaoException;
	
	public Episodio[] getEpisodiosPaciente(String identificador) throws EpisodioDaoException;

}
