/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface ArrAccesoPrivDao
{
	/** 
	 * Inserts a new row in the arr_acceso_priv table.
	 */
	public ArrAccesoPrivPk insert(ArrAccesoPriv dto) throws ArrAccesoPrivDaoException;

	/** 
	 * Updates a single row in the arr_acceso_priv table.
	 */
	public void update(ArrAccesoPrivPk pk, ArrAccesoPriv dto) throws ArrAccesoPrivDaoException;

	/** 
	 * Deletes a single row in the arr_acceso_priv table.
	 */
	public void delete(ArrAccesoPrivPk pk) throws ArrAccesoPrivDaoException;

	/** 
	 * Returns the rows from the arr_acceso_priv table that matches the specified primary-key value.
	 */
	public ArrAccesoPriv findByPrimaryKey(ArrAccesoPrivPk pk) throws ArrAccesoPrivDaoException;

	/** 
	 * Returns all rows from the arr_acceso_priv table that match the criteria 'IDROL = :idrol'.
	 */
	public ArrAccesoPriv findByPrimaryKey(Integer idrol) throws ArrAccesoPrivDaoException;

	/** 
	 * Returns all rows from the arr_acceso_priv table that match the criteria ''.
	 */
	public ArrAccesoPriv[] findAll() throws ArrAccesoPrivDaoException;

	/** 
	 * Returns all rows from the arr_acceso_priv table that match the criteria 'IDROL = :idrol'.
	 */
	public ArrAccesoPriv[] findWhereIdrolEquals(int idrol) throws ArrAccesoPrivDaoException;

	/** 
	 * Returns all rows from the arr_acceso_priv table that match the criteria 'INSERCION = :insercion'.
	 */
	public ArrAccesoPriv[] findWhereInsercionEquals(int insercion) throws ArrAccesoPrivDaoException;

	/** 
	 * Returns all rows from the arr_acceso_priv table that match the criteria 'EDICION = :edicion'.
	 */
	public ArrAccesoPriv[] findWhereEdicionEquals(int edicion) throws ArrAccesoPrivDaoException;

	/** 
	 * Returns all rows from the arr_acceso_priv table that match the criteria 'BORRADO = :borrado'.
	 */
	public ArrAccesoPriv[] findWhereBorradoEquals(int borrado) throws ArrAccesoPrivDaoException;

	/** 
	 * Returns all rows from the arr_acceso_priv table that match the criteria 'TIEMPOEDICION = :tiempoedicion'.
	 */
	public ArrAccesoPriv[] findWhereTiempoedicionEquals(int tiempoedicion) throws ArrAccesoPrivDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the arr_acceso_priv table that match the specified arbitrary SQL statement
	 */
	public ArrAccesoPriv[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrAccesoPrivDaoException;

	/** 
	 * Returns all rows from the arr_acceso_priv table that match the specified arbitrary SQL statement
	 */
	public ArrAccesoPriv[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrAccesoPrivDaoException;

}
