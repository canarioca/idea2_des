/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface EventoDao
{
	/** 
	 * Inserts a new row in the evento table.
	 */
	public EventoPk insert(Evento dto) throws EventoDaoException;

	/** 
	 * Updates a single row in the evento table.
	 */
	public void update(EventoPk pk, Evento dto) throws EventoDaoException;

	/** 
	 * Deletes a single row in the evento table.
	 */
	public void delete(EventoPk pk) throws EventoDaoException;

	/** 
	 * Returns the rows from the evento table that matches the specified primary-key value.
	 */
	public Evento findByPrimaryKey(EventoPk pk) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'IDEVENTO = :idevento'.
	 */
	public Evento findByPrimaryKey(Integer idevento) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria ''.
	 */
	public Evento[] findAll() throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'IDEVENTO = :idevento'.
	 */
	public Evento[] findWhereIdeventoEquals(int idevento) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'CODIGO = :codigo'.
	 */
	public Evento[] findWhereCodigoEquals(int codigo) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'IDUSUARIO = :idusuario'.
	 */
	public Evento[] findWhereIdusuarioEquals(String idusuario) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'PROCEDIMIENTO = :procedimiento'.
	 */
	public Evento[] findWhereProcedimientoEquals(int procedimiento) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public Evento[] findWhereDescripcionEquals(String descripcion) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'SOLICITANTE = :solicitante'.
	 */
	public Evento[] findWhereSolicitanteEquals(String solicitante) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'FECHAINI = :fechaini'.
	 */
	public Evento[] findWhereFechainiEquals(Date fechaini) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'FECHAFIN = :fechafin'.
	 */
	public Evento[] findWhereFechafinEquals(Date fechafin) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'IDENTIFICADOR = :identificador'.
	 */
	public Evento[] findWhereIdentificadorEquals(String identificador) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'ESTADO = :estado'.
	 */
	public Evento[] findWhereEstadoEquals(int estado) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'RESPONSABLE = :responsable'.
	 */
	public Evento[] findWhereResponsableEquals(String responsable) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'IDPACIENTE = :idpaciente'.
	 */
	public Evento[] findWhereIdpacienteEquals(String idpaciente) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'FECHAASIGNACION = :fechaasignacion'.
	 */
	public Evento[] findWhereFechaasignacionEquals(Date fechaasignacion) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'NOMBRE = :nombre'.
	 */
	public Evento[] findWhereNombreEquals(String nombre) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'APELLIDO1 = :apellido1'.
	 */
	public Evento[] findWhereApellido1Equals(String apellido1) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'APELLIDO2 = :apellido2'.
	 */
	public Evento[] findWhereApellido2Equals(String apellido2) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'FNAC = :fnac'.
	 */
	public Evento[] findWhereFnacEquals(Date fnac) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the criteria 'TIPO = :tipo'.
	 */
	public Evento[] findWhereTipoEquals(int tipo) throws EventoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the evento table that match the specified arbitrary SQL statement
	 */
	public Evento[] findByDynamicSelect(String sql, Object[] sqlParams) throws EventoDaoException;

	/** 
	 * Returns all rows from the evento table that match the specified arbitrary SQL statement
	 */
	public Evento[] findByDynamicWhere(String sql, Object[] sqlParams) throws EventoDaoException;
	
	public Evento[] getNumtotalEventosFecha(Date fechaini, Date fechafin, Integer idagenda) throws EventoDaoException;

}
