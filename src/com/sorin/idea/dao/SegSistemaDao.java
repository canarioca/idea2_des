/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface SegSistemaDao
{
	/** 
	 * Inserts a new row in the seg_sistema table.
	 */
	public SegSistemaPk insert(SegSistema dto) throws SegSistemaDaoException;

	/** 
	 * Updates a single row in the seg_sistema table.
	 */
	public void update(SegSistemaPk pk, SegSistema dto) throws SegSistemaDaoException;

	/** 
	 * Deletes a single row in the seg_sistema table.
	 */
	public void delete(SegSistemaPk pk) throws SegSistemaDaoException;

	/** 
	 * Returns the rows from the seg_sistema table that matches the specified primary-key value.
	 */
	public SegSistema findByPrimaryKey(SegSistemaPk pk) throws SegSistemaDaoException;

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'IDSISTEMA = :idsistema'.
	 */
	public SegSistema findByPrimaryKey(Integer idsistema) throws SegSistemaDaoException;

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria ''.
	 */
	public SegSistema[] findAll() throws SegSistemaDaoException;

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'IDSISTEMA = :idsistema'.
	 */
	public SegSistema[] findWhereIdsistemaEquals(int idsistema) throws SegSistemaDaoException;

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'VOLTAJE = :voltaje'.
	 */
	public SegSistema[] findWhereVoltajeEquals(String voltaje) throws SegSistemaDaoException;

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'IMPEDANCIA = :impedancia'.
	 */
	public SegSistema[] findWhereImpedanciaEquals(String impedancia) throws SegSistemaDaoException;

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'FMAGNETICA = :fmagnetica'.
	 */
	public SegSistema[] findWhereFmagneticaEquals(String fmagnetica) throws SegSistemaDaoException;

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'ESTVIDAREST = :estvidarest'.
	 */
	public SegSistema[] findWhereEstvidarestEquals(String estvidarest) throws SegSistemaDaoException;

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'ULTCHQENERGIA = :ultchqenergia'.
	 */
	public SegSistema[] findWhereUltchqenergiaEquals(String ultchqenergia) throws SegSistemaDaoException;

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'ULTCHQTCARGA = :ultchqtcarga'.
	 */
	public SegSistema[] findWhereUltchqtcargaEquals(String ultchqtcarga) throws SegSistemaDaoException;

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'ULTCHQIMPEDANCIA = :ultchqimpedancia'.
	 */
	public SegSistema[] findWhereUltchqimpedanciaEquals(String ultchqimpedancia) throws SegSistemaDaoException;

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'ULTCHQFECHA = :ultchqfecha'.
	 */
	public SegSistema[] findWhereUltchqfechaEquals(Date ultchqfecha) throws SegSistemaDaoException;

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'ERI = :eri'.
	 */
	public SegSistema[] findWhereEriEquals(short eri) throws SegSistemaDaoException;

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'EOL = :eol'.
	 */
	public SegSistema[] findWhereEolEquals(short eol) throws SegSistemaDaoException;

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public SegSistema[] findWhereComentariosEquals(String comentarios) throws SegSistemaDaoException;

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'TIEMPOERI = :tiempoeri'.
	 */
	public SegSistema[] findWhereTiempoeriEquals(String tiempoeri) throws SegSistemaDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the seg_sistema table that match the specified arbitrary SQL statement
	 */
	public SegSistema[] findByDynamicSelect(String sql, Object[] sqlParams) throws SegSistemaDaoException;

	/** 
	 * Returns all rows from the seg_sistema table that match the specified arbitrary SQL statement
	 */
	public SegSistema[] findByDynamicWhere(String sql, Object[] sqlParams) throws SegSistemaDaoException;

}
