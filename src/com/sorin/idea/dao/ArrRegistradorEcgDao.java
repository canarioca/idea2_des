/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface ArrRegistradorEcgDao
{
	/** 
	 * Inserts a new row in the arr_registrador_ecg table.
	 */
	public ArrRegistradorEcgPk insert(ArrRegistradorEcg dto) throws ArrRegistradorEcgDaoException;

	/** 
	 * Updates a single row in the arr_registrador_ecg table.
	 */
	public void update(ArrRegistradorEcgPk pk, ArrRegistradorEcg dto) throws ArrRegistradorEcgDaoException;

	/** 
	 * Deletes a single row in the arr_registrador_ecg table.
	 */
	public void delete(ArrRegistradorEcgPk pk) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns the rows from the arr_registrador_ecg table that matches the specified primary-key value.
	 */
	public ArrRegistradorEcg findByPrimaryKey(ArrRegistradorEcgPk pk) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the criteria 'ID_REGISTRADOR = :idRegistrador'.
	 */
	public ArrRegistradorEcg findByPrimaryKey(Integer idRegistrador) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the criteria ''.
	 */
	public ArrRegistradorEcg[] findAll() throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the criteria 'ID_REGISTRADOR = :idRegistrador'.
	 */
	public ArrRegistradorEcg[] findByArrRegistrador(Integer idRegistrador) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the criteria 'ID_REGISTRADOR = :idRegistrador'.
	 */
	public ArrRegistradorEcg[] findWhereIdRegistradorEquals(Integer idRegistrador) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the criteria 'IDRITMO = :idritmo'.
	 */
	public ArrRegistradorEcg[] findWhereIdritmoEquals(Integer idritmo) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the criteria 'IDCONDUCCION = :idconduccion'.
	 */
	public ArrRegistradorEcg[] findWhereIdconduccionEquals(Integer idconduccion) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the criteria 'IDCONDUCCIONNO = :idconduccionno'.
	 */
	public ArrRegistradorEcg[] findWhereIdconduccionnoEquals(Integer idconduccionno) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the criteria 'IDQRS = :idqrs'.
	 */
	public ArrRegistradorEcg[] findWhereIdqrsEquals(Integer idqrs) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the criteria 'IDQRSNO = :idqrsno'.
	 */
	public ArrRegistradorEcg[] findWhereIdqrsnoEquals(Integer idqrsno) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the criteria 'MORFOLOGIA = :morfologia'.
	 */
	public ArrRegistradorEcg[] findWhereMorfologiaEquals(String morfologia) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ArrRegistradorEcg[] findWhereComentariosEquals(String comentarios) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the criteria 'RR = :rr'.
	 */
	public ArrRegistradorEcg[] findWhereRrEquals(String rr) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the criteria 'PR = :pr'.
	 */
	public ArrRegistradorEcg[] findWherePrEquals(String pr) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the criteria 'QRS = :qrs'.
	 */
	public ArrRegistradorEcg[] findWhereQrsEquals(String qrs) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the criteria 'QT = :qt'.
	 */
	public ArrRegistradorEcg[] findWhereQtEquals(String qt) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the criteria 'QTC = :qtc'.
	 */
	public ArrRegistradorEcg[] findWhereQtcEquals(String qtc) throws ArrRegistradorEcgDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the specified arbitrary SQL statement
	 */
	public ArrRegistradorEcg[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrRegistradorEcgDaoException;

	/** 
	 * Returns all rows from the arr_registrador_ecg table that match the specified arbitrary SQL statement
	 */
	public ArrRegistradorEcg[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrRegistradorEcgDaoException;

}
