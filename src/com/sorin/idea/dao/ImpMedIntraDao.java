/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface ImpMedIntraDao
{
	/** 
	 * Inserts a new row in the imp_med_intra table.
	 */
	public ImpMedIntraPk insert(ImpMedIntra dto) throws ImpMedIntraDaoException;

	/** 
	 * Updates a single row in the imp_med_intra table.
	 */
	public void update(ImpMedIntraPk pk, ImpMedIntra dto) throws ImpMedIntraDaoException;

	/** 
	 * Deletes a single row in the imp_med_intra table.
	 */
	public void delete(ImpMedIntraPk pk) throws ImpMedIntraDaoException;

	/** 
	 * Returns the rows from the imp_med_intra table that matches the specified primary-key value.
	 */
	public ImpMedIntra findByPrimaryKey(ImpMedIntraPk pk) throws ImpMedIntraDaoException;

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'IDMEDINTRA = :idmedintra'.
	 */
	public ImpMedIntra findByPrimaryKey(Integer idmedintra) throws ImpMedIntraDaoException;

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria ''.
	 */
	public ImpMedIntra[] findAll() throws ImpMedIntraDaoException;

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'IDMEDINTRA = :idmedintra'.
	 */
	public ImpMedIntra[] findWhereIdmedintraEquals(int idmedintra) throws ImpMedIntraDaoException;

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'IDHOJAIMP = :idhojaimp'.
	 */
	public ImpMedIntra[] findWhereIdhojaimpEquals(int idhojaimp) throws ImpMedIntraDaoException;

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'PROFI_ANTIBIO = :profiAntibio'.
	 */
	public ImpMedIntra[] findWhereProfiAntibioEquals(int profiAntibio) throws ImpMedIntraDaoException;

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'PROFI_ANTIBIO_OTRA = :profiAntibioOtra'.
	 */
	public ImpMedIntra[] findWhereProfiAntibioOtraEquals(String profiAntibioOtra) throws ImpMedIntraDaoException;

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'ANTICOAG = :anticoag'.
	 */
	public ImpMedIntra[] findWhereAnticoagEquals(int anticoag) throws ImpMedIntraDaoException;

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'ANTICOAG_OTRA = :anticoagOtra'.
	 */
	public ImpMedIntra[] findWhereAnticoagOtraEquals(String anticoagOtra) throws ImpMedIntraDaoException;

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'ANTICOAG_RETIRADA = :anticoagRetirada'.
	 */
	public ImpMedIntra[] findWhereAnticoagRetiradaEquals(int anticoagRetirada) throws ImpMedIntraDaoException;

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'INR = :inr'.
	 */
	public ImpMedIntra[] findWhereInrEquals(String inr) throws ImpMedIntraDaoException;

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'OBSERVACIONES = :observaciones'.
	 */
	public ImpMedIntra[] findWhereObservacionesEquals(String observaciones) throws ImpMedIntraDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the imp_med_intra table that match the specified arbitrary SQL statement
	 */
	public ImpMedIntra[] findByDynamicSelect(String sql, Object[] sqlParams) throws ImpMedIntraDaoException;

	/** 
	 * Returns all rows from the imp_med_intra table that match the specified arbitrary SQL statement
	 */
	public ImpMedIntra[] findByDynamicWhere(String sql, Object[] sqlParams) throws ImpMedIntraDaoException;

}
