/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface ArrAblacionComplicaDao
{
	/** 
	 * Inserts a new row in the arr_ablacion_complica table.
	 */
	public ArrAblacionComplicaPk insert(ArrAblacionComplica dto) throws ArrAblacionComplicaDaoException;

	/** 
	 * Updates a single row in the arr_ablacion_complica table.
	 */
	public void update(ArrAblacionComplicaPk pk, ArrAblacionComplica dto) throws ArrAblacionComplicaDaoException;

	/** 
	 * Deletes a single row in the arr_ablacion_complica table.
	 */
	public void delete(ArrAblacionComplicaPk pk) throws ArrAblacionComplicaDaoException;
	public void delete(Integer idestudio) throws ArrAblacionComplicaDaoException;

	/** 
	 * Returns the rows from the arr_ablacion_complica table that matches the specified primary-key value.
	 */
	public ArrAblacionComplica findByPrimaryKey(ArrAblacionComplicaPk pk) throws ArrAblacionComplicaDaoException;

	/** 
	 * Returns all rows from the arr_ablacion_complica table that match the criteria 'IDESTUDIO = :idestudio AND IDABLACION = :idablacion AND IDCOMPLICACION = :idcomplicacion'.
	 */
	public ArrAblacionComplica findByPrimaryKey(Integer idestudio, Integer idablacion, Integer idcomplicacion) throws ArrAblacionComplicaDaoException;

	/** 
	 * Returns all rows from the arr_ablacion_complica table that match the criteria ''.
	 */
	public ArrAblacionComplica[] findAll() throws ArrAblacionComplicaDaoException;

	/** 
	 * Returns all rows from the arr_ablacion_complica table that match the criteria 'IDESTUDIO = :idestudio'.
	 */
	public ArrAblacionComplica[] findWhereIdestudioEquals(int idestudio) throws ArrAblacionComplicaDaoException;

	/** 
	 * Returns all rows from the arr_ablacion_complica table that match the criteria 'IDABLACION = :idablacion'.
	 */
	public ArrAblacionComplica[] findWhereIdablacionEquals(int idablacion) throws ArrAblacionComplicaDaoException;

	/** 
	 * Returns all rows from the arr_ablacion_complica table that match the criteria 'IDPROCEDIMIENTO = :idprocedimiento'.
	 */
	public ArrAblacionComplica[] findWhereIdprocedimientoEquals(int idprocedimiento) throws ArrAblacionComplicaDaoException;

	/** 
	 * Returns all rows from the arr_ablacion_complica table that match the criteria 'IDLUGAR = :idlugar'.
	 */
	public ArrAblacionComplica[] findWhereIdlugarEquals(int idlugar) throws ArrAblacionComplicaDaoException;

	/** 
	 * Returns all rows from the arr_ablacion_complica table that match the criteria 'IDCOMPLICACION = :idcomplicacion'.
	 */
	public ArrAblacionComplica[] findWhereIdcomplicacionEquals(int idcomplicacion) throws ArrAblacionComplicaDaoException;

	/** 
	 * Returns all rows from the arr_ablacion_complica table that match the criteria 'IDMUERTE = :idmuerte'.
	 */
	public ArrAblacionComplica[] findWhereIdmuerteEquals(int idmuerte) throws ArrAblacionComplicaDaoException;

	/** 
	 * Returns all rows from the arr_ablacion_complica table that match the criteria 'OTROS = :otros'.
	 */
	public ArrAblacionComplica[] findWhereOtrosEquals(String otros) throws ArrAblacionComplicaDaoException;

	/** 
	 * Returns all rows from the arr_ablacion_complica table that match the criteria 'IDCOMPLICACION2 = :idcomplicacion2'.
	 */
	public ArrAblacionComplica[] findWhereIdcomplicacion2Equals(int idcomplicacion2) throws ArrAblacionComplicaDaoException;

	/** 
	 * Returns all rows from the arr_ablacion_complica table that match the criteria 'IDCOMPAC = :idcompac'.
	 */
	public ArrAblacionComplica[] findWhereIdcompacEquals(int idcompac) throws ArrAblacionComplicaDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the arr_ablacion_complica table that match the specified arbitrary SQL statement
	 */
	public ArrAblacionComplica[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrAblacionComplicaDaoException;

	/** 
	 * Returns all rows from the arr_ablacion_complica table that match the specified arbitrary SQL statement
	 */
	public ArrAblacionComplica[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrAblacionComplicaDaoException;

}
