/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.ArrayList;
import java.util.Date;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface ArrMesasDao
{
	/** 
	 * Inserts a new row in the ARR_MESAS table.
	 */
	public ArrMesasPk insert(ArrMesas dto) throws ArrMesasDaoException;

	/** 
	 * Updates a single row in the ARR_MESAS table.
	 */
	public void update(ArrMesasPk pk, ArrMesas dto) throws ArrMesasDaoException;

	/** 
	 * Deletes a single row in the ARR_MESAS table.
	 */
	public void delete(ArrMesasPk pk) throws ArrMesasDaoException;

	/** 
	 * Returns the rows from the ARR_MESAS table that matches the specified primary-key value.
	 */
	public ArrMesas findByPrimaryKey(ArrMesasPk pk) throws ArrMesasDaoException;

	/** 
	 * Returns all rows from the ARR_MESAS table that match the criteria 'ID_MESA = :idMesa'.
	 */
	public ArrMesas findByPrimaryKey(Integer idMesa) throws ArrMesasDaoException;

	/** 
	 * Returns all rows from the ARR_MESAS table that match the criteria ''.
	 */
	public ArrMesas[] findAll() throws ArrMesasDaoException;

	/** 
	 * Returns all rows from the ARR_MESAS table that match the criteria 'ID_PACIENTE = :idPaciente'.
	 */
	public ArrMesas[] findByArrPacientes(long idPaciente) throws ArrMesasDaoException;

	/** 
	 * Returns all rows from the ARR_MESAS table that match the criteria 'ID_PACIENTE = :idPaciente'.
	 */
	public ArrMesas[] findWhereIdPacienteEquals(long idPaciente) throws ArrMesasDaoException;

	/** 
	 * Returns all rows from the ARR_MESAS table that match the criteria 'ID_MESA = :idMesa'.
	 */
	public ArrMesas[] findWhereIdMesaEquals(long idMesa) throws ArrMesasDaoException;

	/** 
	 * Returns all rows from the ARR_MESAS table that match the criteria 'FECHA = :fecha'.
	 */
	public ArrMesas[] findWhereFechaEquals(Date fecha) throws ArrMesasDaoException;

	/** 
	 * Returns all rows from the ARR_MESAS table that match the criteria 'NPROC = :nproc'.
	 */
	public ArrMesas[] findWhereNprocEquals(long nproc) throws ArrMesasDaoException;

	/** 
	 * Returns all rows from the ARR_MESAS table that match the criteria 'REFERIDOR = :referidor'.
	 */
	public ArrMesas[] findWhereReferidorEquals(long referidor) throws ArrMesasDaoException;

	/** 
	 * Returns all rows from the ARR_MESAS table that match the criteria 'INDICACION = :indicacion'.
	 */
	public ArrMesas[] findWhereIndicacionEquals(long indicacion) throws ArrMesasDaoException;

	/** 
	 * Returns all rows from the ARR_MESAS table that match the criteria 'EPI_PREVIOS = :epiPrevios'.
	 */
	public ArrMesas[] findWhereEpiPreviosEquals(long epiPrevios) throws ArrMesasDaoException;

	/** 
	 * Returns all rows from the ARR_MESAS table that match the criteria 'OP_MED = :opMed'.
	 */
	public ArrMesas[] findWhereOpMedEquals(Integer opMed) throws ArrMesasDaoException;
	
	/** 
	 * Returns all rows from the ARR_MESAS table that match the criteria 'OP_ENF = :opEnf'.
	 */
	public ArrMesas[] findWhereOpEnfEquals(Integer opEnf) throws ArrMesasDaoException;

	/** 
	 * Returns all rows from the ARR_MESAS table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ArrMesas[] findWhereComentariosEquals(String comentarios) throws ArrMesasDaoException;

	/** 
	 * Returns all rows from the ARR_MESAS table that match the criteria 'CARDIOPATIA = :cardiopatia'.
	 */
	public ArrMesas[] findWhereCardiopatiaEquals(long cardiopatia) throws ArrMesasDaoException;

	/** 
	 * Returns all rows from the ARR_MESAS table that match the criteria 'COMPLICACIONES_SN = :complicacionesSn'.
	 */
	public ArrMesas[] findWhereComplicacionesSnEquals(long complicacionesSn) throws ArrMesasDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ARR_MESAS table that match the specified arbitrary SQL statement
	 */
	public ArrMesas[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrMesasDaoException;

	/** 
	 * Returns all rows from the ARR_MESAS table that match the specified arbitrary SQL statement
	 */
	public ArrMesas[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrMesasDaoException;
	public ArrayList<ArrayList<Object>> getEstadisticasMesas(Date fechaini, Date fechafin) throws ArrMesasDaoException;
	public ArrayList<ArrayList<Object>> getEstadisticas(Date fechaini, Date fechafin,int res) throws ArrMesasDaoException;
}
