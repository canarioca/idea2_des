/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface IntegradorRegistrosDao
{
	/** 
	 * Inserts a new row in the integrador_registros table.
	 */
	public IntegradorRegistrosPk insert(IntegradorRegistros dto) throws IntegradorRegistrosDaoException;

	/** 
	 * Updates a single row in the integrador_registros table.
	 */
	public void update(IntegradorRegistrosPk pk, IntegradorRegistros dto) throws IntegradorRegistrosDaoException;

	/** 
	 * Deletes a single row in the integrador_registros table.
	 */
	public void delete(IntegradorRegistrosPk pk) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns the rows from the integrador_registros table that matches the specified primary-key value.
	 */
	public IntegradorRegistros findByPrimaryKey(IntegradorRegistrosPk pk) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'IDINTEGRADORREGISTROS = :idintegradorregistros'.
	 */
	public IntegradorRegistros findByPrimaryKey(Integer idintegradorregistros) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria ''.
	 */
	public IntegradorRegistros[] findAll() throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'IDINTEGRADORREGISTROS = :idintegradorregistros'.
	 */
	public IntegradorRegistros[] findWhereIdintegradorregistrosEquals(int idintegradorregistros) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'NOMBREFICHERO = :nombrefichero'.
	 */
	public IntegradorRegistros[] findWhereNombreficheroEquals(String nombrefichero) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'ESTADO = :estado'.
	 */
	public IntegradorRegistros[] findWhereEstadoEquals(int estado) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'FECHAHORARX = :fechahorarx'.
	 */
	public IntegradorRegistros[] findWhereFechahorarxEquals(Date fechahorarx) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'FECHAHORAENVIO = :fechahoraenvio'.
	 */
	public IntegradorRegistros[] findWhereFechahoraenvioEquals(Date fechahoraenvio) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'REPROCESADO = :reprocesado'.
	 */
	public IntegradorRegistros[] findWhereReprocesadoEquals(int reprocesado) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'PATH_NO_PROCESADO = :pathNoProcesado'.
	 */
	public IntegradorRegistros[] findWherePathNoProcesadoEquals(String pathNoProcesado) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'SISTEMA = :sistema'.
	 */
	public IntegradorRegistros[] findWhereSistemaEquals(int sistema) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'ERROR = :error'.
	 */
	public IntegradorRegistros[] findWhereErrorEquals(String error) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public IntegradorRegistros[] findWhereComentariosEquals(String comentarios) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'MODELO = :modelo'.
	 */
	public IntegradorRegistros[] findWhereModeloEquals(String modelo) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'NSERIE = :nserie'.
	 */
	public IntegradorRegistros[] findWhereNserieEquals(String nserie) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'FECHASEG = :fechaseg'.
	 */
	public IntegradorRegistros[] findWhereFechasegEquals(Date fechaseg) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'ESTADOEHR = :estadoehr'.
	 */
	public IntegradorRegistros[] findWhereEstadoehrEquals(int estadoehr) throws IntegradorRegistrosDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the integrador_registros table that match the specified arbitrary SQL statement
	 */
	public IntegradorRegistros[] findByDynamicSelect(String sql, Object[] sqlParams) throws IntegradorRegistrosDaoException;

	/** 
	 * Returns all rows from the integrador_registros table that match the specified arbitrary SQL statement
	 */
	public IntegradorRegistros[] findByDynamicWhere(String sql, Object[] sqlParams) throws IntegradorRegistrosDaoException;

}
