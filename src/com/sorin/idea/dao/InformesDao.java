/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface InformesDao
{
	/** 
	 * Inserts a new row in the informes table.
	 */
	public InformesPk insert(Informes dto) throws InformesDaoException;

	/** 
	 * Updates a single row in the informes table.
	 */
	public void update(InformesPk pk, Informes dto) throws InformesDaoException;

	/** 
	 * Deletes a single row in the informes table.
	 */
	public void delete(InformesPk pk) throws InformesDaoException;

	/** 
	 * Returns the rows from the informes table that matches the specified primary-key value.
	 */
	public Informes findByPrimaryKey(InformesPk pk) throws InformesDaoException;

	/** 
	 * Returns all rows from the informes table that match the criteria 'IDINF = :idinf'.
	 */
	public Informes findByPrimaryKey(Integer idinf) throws InformesDaoException;

	/** 
	 * Returns all rows from the informes table that match the criteria ''.
	 */
	public Informes[] findAll() throws InformesDaoException;

	/** 
	 * Returns all rows from the informes table that match the criteria 'IDINF = :idinf'.
	 */
	public Informes[] findWhereIdinfEquals(int idinf) throws InformesDaoException;

	/** 
	 * Returns all rows from the informes table that match the criteria 'IDPROCEDIMIENTO = :idprocedimiento'.
	 */
	public Informes[] findWhereIdprocedimientoEquals(int idprocedimiento) throws InformesDaoException;

	/** 
	 * Returns all rows from the informes table that match the criteria 'TIPOPROCEDIMIENTO = :tipoprocedimiento'.
	 */
	public Informes[] findWhereTipoprocedimientoEquals(int tipoprocedimiento) throws InformesDaoException;

	/** 
	 * Returns all rows from the informes table that match the criteria 'CODIGO = :codigo'.
	 */
	public Informes[] findWhereCodigoEquals(int codigo) throws InformesDaoException;

	/** 
	 * Returns all rows from the informes table that match the criteria 'RUTA = :ruta'.
	 */
	public Informes[] findWhereRutaEquals(String ruta) throws InformesDaoException;

	/** 
	 * Returns all rows from the informes table that match the criteria 'FECHACREACION = :fechacreacion'.
	 */
	public Informes[] findWhereFechacreacionEquals(Date fechacreacion) throws InformesDaoException;

	/** 
	 * Returns all rows from the informes table that match the criteria 'FECHAMOD = :fechamod'.
	 */
	public Informes[] findWhereFechamodEquals(Date fechamod) throws InformesDaoException;

	/** 
	 * Returns all rows from the informes table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public Informes[] findWhereDescripcionEquals(String descripcion) throws InformesDaoException;

	/** 
	 * Returns all rows from the informes table that match the criteria 'IDINFORME = :idinforme'.
	 */
	public Informes[] findWhereIdinformeEquals(String idinforme) throws InformesDaoException;

	/** 
	 * Returns all rows from the informes table that match the criteria 'IDEPISODIO = :idepisodio'.
	 */
	public Informes[] findWhereIdepisodioEquals(int idepisodio) throws InformesDaoException;

	/** 
	 * Returns all rows from the informes table that match the criteria 'ESTADO = :estado'.
	 */
	public Informes[] findWhereEstadoEquals(int estado) throws InformesDaoException;

	/** 
	 * Returns all rows from the informes table that match the criteria 'ORIGEN = :origen'.
	 */
	public Informes[] findWhereOrigenEquals(int origen) throws InformesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the informes table that match the specified arbitrary SQL statement
	 */
	public Informes[] findByDynamicSelect(String sql, Object[] sqlParams) throws InformesDaoException;

	/** 
	 * Returns all rows from the informes table that match the specified arbitrary SQL statement
	 */
	public Informes[] findByDynamicWhere(String sql, Object[] sqlParams) throws InformesDaoException;

}
