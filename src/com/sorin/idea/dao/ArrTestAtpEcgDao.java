/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface ArrTestAtpEcgDao
{
	/** 
	 * Inserts a new row in the ARR_TEST_ATP_ECG table.
	 */
	public ArrTestAtpEcgPk insert(ArrTestAtpEcg dto) throws ArrTestAtpEcgDaoException;

	/** 
	 * Updates a single row in the ARR_TEST_ATP_ECG table.
	 */
	public void update(ArrTestAtpEcgPk pk, ArrTestAtpEcg dto) throws ArrTestAtpEcgDaoException;

	/** 
	 * Deletes a single row in the ARR_TEST_ATP_ECG table.
	 */
	public void delete(ArrTestAtpEcgPk pk) throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns the rows from the ARR_TEST_ATP_ECG table that matches the specified primary-key value.
	 */
	public ArrTestAtpEcg findByPrimaryKey(ArrTestAtpEcgPk pk) throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the criteria 'IDTEST = :idtest'.
	 */
	public ArrTestAtpEcg findByPrimaryKey(Integer idtest) throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the criteria ''.
	 */
	public ArrTestAtpEcg[] findAll() throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the criteria 'IDTEST = :idtest'.
	 */
	public ArrTestAtpEcg[] findWhereIdtestEquals(long idtest) throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the criteria 'IDRITMO = :idritmo'.
	 */
	public ArrTestAtpEcg[] findWhereIdritmoEquals(long idritmo) throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the criteria 'IDCONDUCCION = :idconduccion'.
	 */
	public ArrTestAtpEcg[] findWhereIdconduccionEquals(long idconduccion) throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the criteria 'IDCONDUCCIONNO = :idconduccionno'.
	 */
	public ArrTestAtpEcg[] findWhereIdconduccionnoEquals(long idconduccionno) throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the criteria 'IDQRS = :idqrs'.
	 */
	public ArrTestAtpEcg[] findWhereIdqrsEquals(long idqrs) throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the criteria 'IDQRSNO = :idqrsno'.
	 */
	public ArrTestAtpEcg[] findWhereIdqrsnoEquals(long idqrsno) throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the criteria 'MORFOLOGIA = :morfologia'.
	 */
	public ArrTestAtpEcg[] findWhereMorfologiaEquals(String morfologia) throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ArrTestAtpEcg[] findWhereComentariosEquals(String comentarios) throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the criteria 'RR = :rr'.
	 */
	public ArrTestAtpEcg[] findWhereRrEquals(String rr) throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the criteria 'PR = :pr'.
	 */
	public ArrTestAtpEcg[] findWherePrEquals(String pr) throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the criteria 'QRS = :qrs'.
	 */
	public ArrTestAtpEcg[] findWhereQrsEquals(String qrs) throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the criteria 'QT = :qt'.
	 */
	public ArrTestAtpEcg[] findWhereQtEquals(String qt) throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the criteria 'QTC = :qtc'.
	 */
	public ArrTestAtpEcg[] findWhereQtcEquals(String qtc) throws ArrTestAtpEcgDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the specified arbitrary SQL statement
	 */
	public ArrTestAtpEcg[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrTestAtpEcgDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_ATP_ECG table that match the specified arbitrary SQL statement
	 */
	public ArrTestAtpEcg[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrTestAtpEcgDaoException;

}
