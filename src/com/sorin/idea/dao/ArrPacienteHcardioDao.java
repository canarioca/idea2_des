/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface ArrPacienteHcardioDao
{
	/** 
	 * Inserts a new row in the ARR_PACIENTE_HCARDIO table.
	 */
	public ArrPacienteHcardioPk insert(ArrPacienteHcardio dto) throws ArrPacienteHcardioDaoException;

	/** 
	 * Updates a single row in the ARR_PACIENTE_HCARDIO table.
	 */
	public void update(ArrPacienteHcardioPk pk, ArrPacienteHcardio dto) throws ArrPacienteHcardioDaoException;

	/** 
	 * Deletes a single row in the ARR_PACIENTE_HCARDIO table.
	 */
	public void delete(ArrPacienteHcardioPk pk) throws ArrPacienteHcardioDaoException;

	/** 
	 * Returns the rows from the ARR_PACIENTE_HCARDIO table that matches the specified primary-key value.
	 */
	public ArrPacienteHcardio findByPrimaryKey(ArrPacienteHcardioPk pk) throws ArrPacienteHcardioDaoException;

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCARDIO table that match the criteria 'IDPACIENTE = :idpaciente'.
	 */
	public ArrPacienteHcardio findByPrimaryKey(Integer idpaciente) throws ArrPacienteHcardioDaoException;

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCARDIO table that match the criteria ''.
	 */
	public ArrPacienteHcardio[] findAll() throws ArrPacienteHcardioDaoException;

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCARDIO table that match the criteria 'IDPACIENTE = :idpaciente'.
	 */
	public ArrPacienteHcardio[] findWhereIdpacienteEquals(long idpaciente) throws ArrPacienteHcardioDaoException;

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCARDIO table that match the criteria 'ID1 = :id1'.
	 */
	public ArrPacienteHcardio[] findWhereId1Equals(long id1) throws ArrPacienteHcardioDaoException;

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCARDIO table that match the criteria 'ID2 = :id2'.
	 */
	public ArrPacienteHcardio[] findWhereId2Equals(long id2) throws ArrPacienteHcardioDaoException;

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCARDIO table that match the criteria 'ID3 = :id3'.
	 */
	public ArrPacienteHcardio[] findWhereId3Equals(long id3) throws ArrPacienteHcardioDaoException;

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCARDIO table that match the criteria 'ID4 = :id4'.
	 */
	public ArrPacienteHcardio[] findWhereId4Equals(long id4) throws ArrPacienteHcardioDaoException;

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCARDIO table that match the criteria 'ID5 = :id5'.
	 */
	public ArrPacienteHcardio[] findWhereId5Equals(long id5) throws ArrPacienteHcardioDaoException;

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCARDIO table that match the criteria 'ID6 = :id6'.
	 */
	public ArrPacienteHcardio[] findWhereId6Equals(long id6) throws ArrPacienteHcardioDaoException;

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCARDIO table that match the criteria 'ID7 = :id7'.
	 */
	public ArrPacienteHcardio[] findWhereId7Equals(long id7) throws ArrPacienteHcardioDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCARDIO table that match the specified arbitrary SQL statement
	 */
	public ArrPacienteHcardio[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrPacienteHcardioDaoException;

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCARDIO table that match the specified arbitrary SQL statement
	 */
	public ArrPacienteHcardio[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrPacienteHcardioDaoException;

}
