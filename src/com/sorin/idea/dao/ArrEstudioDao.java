/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.ArrayList;
import java.util.Date;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface ArrEstudioDao
{
	/** 
	 * Inserts a new row in the ARR_ESTUDIO table.
	 */
	public ArrEstudioPk insert(ArrEstudio dto) throws ArrEstudioDaoException;

	/** 
	 * Updates a single row in the ARR_ESTUDIO table.
	 */
	public void update(ArrEstudioPk pk, ArrEstudio dto) throws ArrEstudioDaoException;

	/** 
	 * Deletes a single row in the ARR_ESTUDIO table.
	 */
	public void delete(ArrEstudioPk pk) throws ArrEstudioDaoException;

	/** 
	 * Returns the rows from the ARR_ESTUDIO table that matches the specified primary-key value.
	 */
	public ArrEstudio findByPrimaryKey(ArrEstudioPk pk) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'IDESTUDIO = :idestudio'.
	 */
	public ArrEstudio findByPrimaryKey(Integer idestudio) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria ''.
	 */
	public ArrEstudio[] findAll() throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'IDESTUDIO = :idestudio'.
	 */
	public ArrEstudio[] findWhereIdestudioEquals(long idestudio) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'FECHA = :fecha'.
	 */
	public ArrEstudio[] findWhereFechaEquals(Date fecha) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'MOTIVO = :motivo'.
	 */
	public ArrEstudio[] findWhereMotivoEquals(String motivo) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'HALLAZGOS = :hallazgos'.
	 */
	public ArrEstudio[] findWhereHallazgosEquals(String hallazgos) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'DIAGNOSTICO = :diagnostico'.
	 */
	public ArrEstudio[] findWhereDiagnosticoEquals(long diagnostico) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'ANESTESISTA = :anestesista'.
	 */
	public ArrEstudio[] findWhereAnestesistaEquals(long anestesista) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'INTERES = :interes'.
	 */
	public ArrEstudio[] findWhereInteresEquals(long interes) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'NAVEGADOR = :navegador'.
	 */
	public ArrEstudio[] findWhereNavegadorEquals(long navegador) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'ESCOPIA = :escopia'.
	 */
	public ArrEstudio[] findWhereEscopiaEquals(long escopia) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'ECOGRAFIA = :ecografia'.
	 */
	public ArrEstudio[] findWhereEcografiaEquals(long ecografia) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'ECG = :ecg'.
	 */
	public ArrEstudio[] findWhereEcgEquals(long ecg) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'CATETERES = :cateteres'.
	 */
	public ArrEstudio[] findWhereCateteresEquals(long cateteres) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'SINUSAL = :sinusal'.
	 */
	public ArrEstudio[] findWhereSinusalEquals(long sinusal) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'TAQUICARDIAS = :taquicardias'.
	 */
	public ArrEstudio[] findWhereTaquicardiasEquals(long taquicardias) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'CONDUCCION = :conduccion'.
	 */
	public ArrEstudio[] findWhereConduccionEquals(long conduccion) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'VIAS = :vias'.
	 */
	public ArrEstudio[] findWhereViasEquals(long vias) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'PERIODOS = :periodos'.
	 */
	public ArrEstudio[] findWherePeriodosEquals(long periodos) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'COMPLICACIONES = :complicaciones'.
	 */
	public ArrEstudio[] findWhereComplicacionesEquals(long complicaciones) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'ABLACION = :ablacion'.
	 */
	public ArrEstudio[] findWhereAblacionEquals(long ablacion) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'IDPACIENTE = :idpaciente'.
	 */
	public ArrEstudio[] findWhereIdpacienteEquals(long idpaciente) throws ArrEstudioDaoException;
	/** 
	 * Returns all rows from the arr_estudio table that match the criteria 'ANGIOGRAFIA = :angiografia'.
	 */
	public ArrEstudio[] findWhereAngiografiaEquals(int angiografia) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the arr_estudio table that match the criteria 'ROBOT = :robot'.
	 */
	public ArrEstudio[] findWhereRobotEquals(int robot) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the criteria 'RECOMENDACIOENS = :recomendaciones'.
	 */
	public ArrEstudio[] findWhereRecomendacionesEquals(String recomendaciones) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the arr_estudio table that match the criteria 'TIPODIAG1 = :tipodiag1'.
	 */
	public ArrEstudio[] findWhereTipodiag1Equals(int tipodiag1) throws ArrEstudioDaoException;
	
	/** 
	 * Returns all rows from the arr_estudio table that match the criteria 'TIPODIAG2 = :tipodiag2'.
	 */
	public ArrEstudio[] findWhereTipodiag2Equals(int tipodiag2) throws ArrEstudioDaoException;
	
	/** 
	 * Returns all rows from the arr_estudio table that match the criteria 'DOSIS_ESCOPIA = :dosisEscopia'.
	 */
	public ArrEstudio[] findWhereDosisEscopiaEquals(String dosisEscopia) throws ArrEstudioDaoException;
	
	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the specified arbitrary SQL statement
	 */
	public ArrEstudio[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrEstudioDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO table that match the specified arbitrary SQL statement
	 */
	public ArrEstudio[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrEstudioDaoException;

	/** 
	 * Devuelve la consulta estadística de los Estudios
	 * @param eef 
	 */
	public ArrayList<ArrayList<Object>> getEstadisticas(Date fechaini, Date fechafin,ArrEstudio eef, ArrEstudioIntento intento, ArrEstudioAblacion ablacion) throws ArrEstudioDaoException;
	public ArrayList<ArrayList<Object>> getComplicacionesAblacion(Date fechaini, Date fechafin,ArrEstudio eef, ArrEstudioAblacion ablacion) throws ArrEstudioDaoException;
	public ArrayList<ArrayList<Object>> getPops(Integer idestudio) throws ArrEstudioDaoException;
	public ArrayList<ArrayList<Object>> getSops(Integer idestudio) throws ArrEstudioDaoException;
	public ArrayList<ArrayList<Object>> getEstadisticasEef(Date fechaini, Date fechafin) throws ArrEstudioDaoException;
	public ArrayList<ArrayList<Object>> getEstadisticasEefIntentos(Date fechaini, Date fechafin) throws ArrEstudioDaoException;
	public ArrayList<ArrayList<Object>> getEstadisticasEefAblaciones(Date fechaini, Date fechafin) throws ArrEstudioDaoException;
}
