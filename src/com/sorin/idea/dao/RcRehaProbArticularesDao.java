/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface RcRehaProbArticularesDao
{
	/** 
	 * Inserts a new row in the RC_REHA_PROB_ARTICULARES table.
	 */
	public RcRehaProbArticularesPk insert(RcRehaProbArticulares dto) throws RcRehaProbArticularesDaoException;

	/** 
	 * Updates a single row in the RC_REHA_PROB_ARTICULARES table.
	 */
	public void update(RcRehaProbArticularesPk pk, RcRehaProbArticulares dto) throws RcRehaProbArticularesDaoException;

	/** 
	 * Deletes a single row in the RC_REHA_PROB_ARTICULARES table.
	 */
	public void delete(RcRehaProbArticularesPk pk) throws RcRehaProbArticularesDaoException;

	/** 
	 * Returns the rows from the RC_REHA_PROB_ARTICULARES table that matches the specified primary-key value.
	 */
	public RcRehaProbArticulares findByPrimaryKey(RcRehaProbArticularesPk pk) throws RcRehaProbArticularesDaoException;

	/** 
	 * Returns all rows from the RC_REHA_PROB_ARTICULARES table that match the criteria 'ID_PROBLEMA_ARTICULAR = :idProblemaArticular'.
	 */
	public RcRehaProbArticulares findByPrimaryKey(long idProblemaArticular) throws RcRehaProbArticularesDaoException;

	/** 
	 * Returns all rows from the RC_REHA_PROB_ARTICULARES table that match the criteria ''.
	 */
	public RcRehaProbArticulares[] findAll() throws RcRehaProbArticularesDaoException;

	/** 
	 * Returns all rows from the RC_REHA_PROB_ARTICULARES table that match the criteria 'ID_PROBLEMA_ARTICULAR = :idProblemaArticular'.
	 */
	public RcRehaProbArticulares[] findWhereIdProblemaArticularEquals(long idProblemaArticular) throws RcRehaProbArticularesDaoException;

	/** 
	 * Returns all rows from the RC_REHA_PROB_ARTICULARES table that match the criteria 'NOMBRE_PROBLEMA = :nombreProblema'.
	 */
	public RcRehaProbArticulares[] findWhereNombreProblemaEquals(String nombreProblema) throws RcRehaProbArticularesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the RC_REHA_PROB_ARTICULARES table that match the specified arbitrary SQL statement
	 */
	public RcRehaProbArticulares[] findByDynamicSelect(String sql, Object[] sqlParams) throws RcRehaProbArticularesDaoException;

	/** 
	 * Returns all rows from the RC_REHA_PROB_ARTICULARES table that match the specified arbitrary SQL statement
	 */
	public RcRehaProbArticulares[] findByDynamicWhere(String sql, Object[] sqlParams) throws RcRehaProbArticularesDaoException;
	
	/** 
	 * Returns all rows from the RC_REHA_PROB_ARTICULARES table that match the specified arbitrary SQL statement inner join with RC_REHABILITADOR
	 */
	public RcRehaProbArticulares findByInnerJoinRCRehabilitador( long idRehabilitador ) throws RcRehaProbArticularesDaoException;

}
