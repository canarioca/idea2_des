/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface SegPorestimulacionDao
{
	/** 
	 * Inserts a new row in the seg_porestimulacion table.
	 */
	public SegPorestimulacionPk insert(SegPorestimulacion dto) throws SegPorestimulacionDaoException;

	/** 
	 * Updates a single row in the seg_porestimulacion table.
	 */
	public void update(SegPorestimulacionPk pk, SegPorestimulacion dto) throws SegPorestimulacionDaoException;

	/** 
	 * Deletes a single row in the seg_porestimulacion table.
	 */
	public void delete(SegPorestimulacionPk pk) throws SegPorestimulacionDaoException;

	/** 
	 * Returns the rows from the seg_porestimulacion table that matches the specified primary-key value.
	 */
	public SegPorestimulacion findByPrimaryKey(SegPorestimulacionPk pk) throws SegPorestimulacionDaoException;

	/** 
	 * Returns all rows from the seg_porestimulacion table that match the criteria 'IDPORESTIM = :idporestim'.
	 */
	public SegPorestimulacion findByPrimaryKey(Integer idporestim) throws SegPorestimulacionDaoException;

	/** 
	 * Returns all rows from the seg_porestimulacion table that match the criteria ''.
	 */
	public SegPorestimulacion[] findAll() throws SegPorestimulacionDaoException;

	/** 
	 * Returns all rows from the seg_porestimulacion table that match the criteria 'IDPORESTIM = :idporestim'.
	 */
	public SegPorestimulacion[] findWhereIdporestimEquals(int idporestim) throws SegPorestimulacionDaoException;

	/** 
	 * Returns all rows from the seg_porestimulacion table that match the criteria 'PORAS = :poras'.
	 */
	public SegPorestimulacion[] findWherePorasEquals(String poras) throws SegPorestimulacionDaoException;

	/** 
	 * Returns all rows from the seg_porestimulacion table that match the criteria 'PORAP = :porap'.
	 */
	public SegPorestimulacion[] findWherePorapEquals(String porap) throws SegPorestimulacionDaoException;

	/** 
	 * Returns all rows from the seg_porestimulacion table that match the criteria 'PORVS = :porvs'.
	 */
	public SegPorestimulacion[] findWherePorvsEquals(String porvs) throws SegPorestimulacionDaoException;

	/** 
	 * Returns all rows from the seg_porestimulacion table that match the criteria 'PORVP = :porvp'.
	 */
	public SegPorestimulacion[] findWherePorvpEquals(String porvp) throws SegPorestimulacionDaoException;

	/** 
	 * Returns all rows from the seg_porestimulacion table that match the criteria 'TIEMPOFA = :tiempofa'.
	 */
	public SegPorestimulacion[] findWhereTiempofaEquals(String tiempofa) throws SegPorestimulacionDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the seg_porestimulacion table that match the specified arbitrary SQL statement
	 */
	public SegPorestimulacion[] findByDynamicSelect(String sql, Object[] sqlParams) throws SegPorestimulacionDaoException;

	/** 
	 * Returns all rows from the seg_porestimulacion table that match the specified arbitrary SQL statement
	 */
	public SegPorestimulacion[] findByDynamicWhere(String sql, Object[] sqlParams) throws SegPorestimulacionDaoException;

}
