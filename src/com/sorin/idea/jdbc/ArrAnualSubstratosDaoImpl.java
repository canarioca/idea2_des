/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;

public class ArrAnualSubstratosDaoImpl extends AbstractDAO implements ArrAnualSubstratosDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ANIO, SUBSTRATO, CAMPO1, CAMPO2, CAMPO3, CAMPO4, CAMPO5, CAMPO6, CAMPO7, CAMPO8, CAMPO9, CAMPO10, CAMPO11, CAMPO12, CAMPO13, CAMPO14, CAMPO15, CAMPO16, CAMPO17, CAMPO18, CAMPO19, CAMPO20, CAMPO21, CAMPO22, CAMPO23, CAMPO24, CAMPO25, CAMPO26, CAMPO27, CAMPO28, CAMPO29, CAMPO30, CAMPO31, CAMPO32, CAMPO33, CAMPO34, CAMPO35, CAMPO36, CAMPO37, CAMPO38, CAMPO39, CAMPO40, CAMPO41, CAMPO42, CAMPO43, CAMPO44, CAMPO45, CAMPO46, CAMPO47, CAMPO48, CAMPO49, CAMPO50 FROM " + getTableName() + "";
	
	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ANIO, SUBSTRATO, CAMPO1, CAMPO2, CAMPO3, CAMPO4, CAMPO5, CAMPO6, CAMPO7, CAMPO8, CAMPO9, CAMPO10, CAMPO11, CAMPO12, CAMPO13, CAMPO14, CAMPO15, CAMPO16, CAMPO17, CAMPO18, CAMPO19, CAMPO20, CAMPO21, CAMPO22, CAMPO23, CAMPO24, CAMPO25, CAMPO26, CAMPO27, CAMPO28, CAMPO29, CAMPO30, CAMPO31, CAMPO32, CAMPO33, CAMPO34, CAMPO35, CAMPO36, CAMPO37, CAMPO38, CAMPO39, CAMPO40, CAMPO41, CAMPO42, CAMPO43, CAMPO44, CAMPO45, CAMPO46, CAMPO47, CAMPO48, CAMPO49, CAMPO50 ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ANIO = ?, SUBSTRATO = ?, CAMPO1 = ?, CAMPO2 = ?, CAMPO3 = ?, CAMPO4 = ?, CAMPO5 = ?, CAMPO6 = ?, CAMPO7 = ?, CAMPO8 = ?, CAMPO9 = ?, CAMPO10 = ?, CAMPO11 = ?, CAMPO12 = ?, CAMPO13 = ?, CAMPO14 = ?, CAMPO15 = ?, CAMPO16 = ?, CAMPO17 = ?, CAMPO18 = ?, CAMPO19 = ?, CAMPO20 = ?, CAMPO21 = ?, CAMPO22 = ?, CAMPO23 = ?, CAMPO24 = ?, CAMPO25 = ?, CAMPO26 = ?, CAMPO27 = ?, CAMPO28 = ?, CAMPO29 = ?, CAMPO30 = ?, CAMPO31 = ?, CAMPO32 = ?, CAMPO33 = ?, CAMPO34 = ?, CAMPO35 = ?, CAMPO36 = ?, CAMPO37 = ?, CAMPO38 = ?, CAMPO39 = ?, CAMPO40 = ?, CAMPO41 = ?, CAMPO42 = ?, CAMPO43 = ?, CAMPO44 = ?, CAMPO45 = ?, CAMPO46 = ?, CAMPO47 = ?, CAMPO48 = ?, CAMPO49 = ?, CAMPO50 = ? WHERE ANIO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ANIO = ? ";

	/** 
	 * Index of column ANIO
	 */
	protected static final int COLUMN_ANIO = 1;

	/** 
	 * Index of column SUBSTRATO
	 */
	protected static final int COLUMN_SUBSTRATO = 2;

	/** 
	 * Index of column CAMPO1
	 */
	protected static final int COLUMN_CAMPO1 = 3;

	/** 
	 * Index of column CAMPO2
	 */
	protected static final int COLUMN_CAMPO2 = 4;

	/** 
	 * Index of column CAMPO3
	 */
	protected static final int COLUMN_CAMPO3 = 5;

	/** 
	 * Index of column CAMPO4
	 */
	protected static final int COLUMN_CAMPO4 = 6;

	/** 
	 * Index of column CAMPO5
	 */
	protected static final int COLUMN_CAMPO5 = 7;

	/** 
	 * Index of column CAMPO6
	 */
	protected static final int COLUMN_CAMPO6 = 8;

	/** 
	 * Index of column CAMPO7
	 */
	protected static final int COLUMN_CAMPO7 = 9;

	/** 
	 * Index of column CAMPO8
	 */
	protected static final int COLUMN_CAMPO8 = 10;

	/** 
	 * Index of column CAMPO9
	 */
	protected static final int COLUMN_CAMPO9 = 11;

	/** 
	 * Index of column CAMPO10
	 */
	protected static final int COLUMN_CAMPO10 = 12;

	/** 
	 * Index of column CAMPO11
	 */
	protected static final int COLUMN_CAMPO11 = 13;

	/** 
	 * Index of column CAMPO12
	 */
	protected static final int COLUMN_CAMPO12 = 14;

	/** 
	 * Index of column CAMPO13
	 */
	protected static final int COLUMN_CAMPO13 = 15;

	/** 
	 * Index of column CAMPO14
	 */
	protected static final int COLUMN_CAMPO14 = 16;

	/** 
	 * Index of column CAMPO15
	 */
	protected static final int COLUMN_CAMPO15 = 17;

	/** 
	 * Index of column CAMPO16
	 */
	protected static final int COLUMN_CAMPO16 = 18;

	/** 
	 * Index of column CAMPO17
	 */
	protected static final int COLUMN_CAMPO17 = 19;

	/** 
	 * Index of column CAMPO18
	 */
	protected static final int COLUMN_CAMPO18 = 20;

	/** 
	 * Index of column CAMPO19
	 */
	protected static final int COLUMN_CAMPO19 = 21;

	/** 
	 * Index of column CAMPO20
	 */
	protected static final int COLUMN_CAMPO20 = 22;

	/** 
	 * Index of column CAMPO21
	 */
	protected static final int COLUMN_CAMPO21 = 23;

	/** 
	 * Index of column CAMPO22
	 */
	protected static final int COLUMN_CAMPO22 = 24;

	/** 
	 * Index of column CAMPO23
	 */
	protected static final int COLUMN_CAMPO23 = 25;

	/** 
	 * Index of column CAMPO24
	 */
	protected static final int COLUMN_CAMPO24 = 26;

	/** 
	 * Index of column CAMPO25
	 */
	protected static final int COLUMN_CAMPO25 = 27;

	/** 
	 * Index of column CAMPO26
	 */
	protected static final int COLUMN_CAMPO26 = 28;

	/** 
	 * Index of column CAMPO27
	 */
	protected static final int COLUMN_CAMPO27 = 29;

	/** 
	 * Index of column CAMPO28
	 */
	protected static final int COLUMN_CAMPO28 = 30;

	/** 
	 * Index of column CAMPO29
	 */
	protected static final int COLUMN_CAMPO29 = 31;

	/** 
	 * Index of column CAMPO30
	 */
	protected static final int COLUMN_CAMPO30 = 32;

	/** 
	 * Index of column CAMPO31
	 */
	protected static final int COLUMN_CAMPO31 = 33;

	/** 
	 * Index of column CAMPO32
	 */
	protected static final int COLUMN_CAMPO32 = 34;

	/** 
	 * Index of column CAMPO33
	 */
	protected static final int COLUMN_CAMPO33 = 35;

	/** 
	 * Index of column CAMPO34
	 */
	protected static final int COLUMN_CAMPO34 = 36;

	/** 
	 * Index of column CAMPO35
	 */
	protected static final int COLUMN_CAMPO35 = 37;

	/** 
	 * Index of column CAMPO36
	 */
	protected static final int COLUMN_CAMPO36 = 38;

	/** 
	 * Index of column CAMPO37
	 */
	protected static final int COLUMN_CAMPO37 = 39;

	/** 
	 * Index of column CAMPO38
	 */
	protected static final int COLUMN_CAMPO38 = 40;

	/** 
	 * Index of column CAMPO39
	 */
	protected static final int COLUMN_CAMPO39 = 41;

	/** 
	 * Index of column CAMPO40
	 */
	protected static final int COLUMN_CAMPO40 = 42;

	/** 
	 * Index of column CAMPO41
	 */
	protected static final int COLUMN_CAMPO41 = 43;

	/** 
	 * Index of column CAMPO42
	 */
	protected static final int COLUMN_CAMPO42 = 44;

	/** 
	 * Index of column CAMPO43
	 */
	protected static final int COLUMN_CAMPO43 = 45;

	/** 
	 * Index of column CAMPO44
	 */
	protected static final int COLUMN_CAMPO44 = 46;

	/** 
	 * Index of column CAMPO45
	 */
	protected static final int COLUMN_CAMPO45 = 47;

	/** 
	 * Index of column CAMPO46
	 */
	protected static final int COLUMN_CAMPO46 = 48;

	/** 
	 * Index of column CAMPO47
	 */
	protected static final int COLUMN_CAMPO47 = 49;

	/** 
	 * Index of column CAMPO48
	 */
	protected static final int COLUMN_CAMPO48 = 50;

	/** 
	 * Index of column CAMPO49
	 */
	protected static final int COLUMN_CAMPO49 = 51;

	/** 
	 * Index of column CAMPO50
	 */
	protected static final int COLUMN_CAMPO50 = 52;
	
	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 52;

	/** 
	 * Index of primary-key column ANIO
	 */
	protected static final int PK_COLUMN_ANIO = 1;

	/** 
	 * Index of primary-key column SUBSTRATO
	 */
	protected static final int PK_COLUMN_SUBSTRATO = 2;

	/** 
	 * Inserts a new row in the ARR_ANUAL_SUBSTRATOS table.
	 */
	public ArrAnualSubstratosPk insert(ArrAnualSubstratos dto) throws ArrAnualSubstratosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.getAnio() != null) {
				stmt.setInt( index++, dto.getAnio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSubstrato() != null) {
				stmt.setInt( index++, dto.getSubstrato().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getCampo1() );
			stmt.setString( index++, dto.getCampo2() );
			stmt.setString( index++, dto.getCampo3() );
			stmt.setString( index++, dto.getCampo4() );
			stmt.setString( index++, dto.getCampo5() );
			stmt.setString( index++, dto.getCampo6() );
			stmt.setString( index++, dto.getCampo7() );
			stmt.setString( index++, dto.getCampo8() );
			stmt.setString( index++, dto.getCampo9() );
			stmt.setString( index++, dto.getCampo10() );
			stmt.setString( index++, dto.getCampo11() );
			stmt.setString( index++, dto.getCampo12() );
			stmt.setString( index++, dto.getCampo13() );
			stmt.setString( index++, dto.getCampo14() );
			stmt.setString( index++, dto.getCampo15() );
			stmt.setString( index++, dto.getCampo16() );
			stmt.setString( index++, dto.getCampo17() );
			stmt.setString( index++, dto.getCampo18() );
			stmt.setString( index++, dto.getCampo19() );
			stmt.setString( index++, dto.getCampo20() );
			stmt.setString( index++, dto.getCampo21() );
			stmt.setString( index++, dto.getCampo22() );
			stmt.setString( index++, dto.getCampo23() );
			stmt.setString( index++, dto.getCampo24() );
			stmt.setString( index++, dto.getCampo25() );
			stmt.setString( index++, dto.getCampo26() );
			stmt.setString( index++, dto.getCampo27() );
			stmt.setString( index++, dto.getCampo28() );
			stmt.setString( index++, dto.getCampo29() );
			stmt.setString( index++, dto.getCampo30() );
			stmt.setString( index++, dto.getCampo31() );
			stmt.setString( index++, dto.getCampo32() );
			stmt.setString( index++, dto.getCampo33() );
			stmt.setString( index++, dto.getCampo34() );
			stmt.setString( index++, dto.getCampo35() );
			stmt.setString( index++, dto.getCampo36() );
			stmt.setString( index++, dto.getCampo37() );
			stmt.setString( index++, dto.getCampo38() );
			stmt.setString( index++, dto.getCampo39() );
			stmt.setString( index++, dto.getCampo40() );
			stmt.setString( index++, dto.getCampo41() );
			stmt.setString( index++, dto.getCampo42() );
			stmt.setString( index++, dto.getCampo43() );
			stmt.setString( index++, dto.getCampo44() );
			stmt.setString( index++, dto.getCampo45() );
			stmt.setString( index++, dto.getCampo46() );
			stmt.setString( index++, dto.getCampo47() );
			stmt.setString( index++, dto.getCampo48() );
			stmt.setString( index++, dto.getCampo49() );
			stmt.setString( index++, dto.getCampo50() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			throw new ArrAnualSubstratosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the ARR_ANUAL_SUBSTRATOS table.
	 */
	public void update(ArrAnualSubstratosPk pk, ArrAnualSubstratos dto) throws ArrAnualSubstratosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getAnio() != null) {
				stmt.setInt( index++, dto.getAnio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSubstrato() != null) {
				stmt.setInt( index++, dto.getSubstrato().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getCampo1() );
			stmt.setString( index++, dto.getCampo2() );
			stmt.setString( index++, dto.getCampo3() );
			stmt.setString( index++, dto.getCampo4() );
			stmt.setString( index++, dto.getCampo5() );
			stmt.setString( index++, dto.getCampo6() );
			stmt.setString( index++, dto.getCampo7() );
			stmt.setString( index++, dto.getCampo8() );
			stmt.setString( index++, dto.getCampo9() );
			stmt.setString( index++, dto.getCampo10() );
			stmt.setString( index++, dto.getCampo11() );
			stmt.setString( index++, dto.getCampo12() );
			stmt.setString( index++, dto.getCampo13() );
			stmt.setString( index++, dto.getCampo14() );
			stmt.setString( index++, dto.getCampo15() );
			stmt.setString( index++, dto.getCampo16() );
			stmt.setString( index++, dto.getCampo17() );
			stmt.setString( index++, dto.getCampo18() );
			stmt.setString( index++, dto.getCampo19() );
			stmt.setString( index++, dto.getCampo20() );
			stmt.setString( index++, dto.getCampo21() );
			stmt.setString( index++, dto.getCampo22() );
			stmt.setString( index++, dto.getCampo23() );
			stmt.setString( index++, dto.getCampo24() );
			stmt.setString( index++, dto.getCampo25() );
			stmt.setString( index++, dto.getCampo26() );
			stmt.setString( index++, dto.getCampo27() );
			stmt.setString( index++, dto.getCampo28() );
			stmt.setString( index++, dto.getCampo29() );
			stmt.setString( index++, dto.getCampo30() );
			stmt.setString( index++, dto.getCampo31() );
			stmt.setString( index++, dto.getCampo32() );
			stmt.setString( index++, dto.getCampo33() );
			stmt.setString( index++, dto.getCampo34() );
			stmt.setString( index++, dto.getCampo35() );
			stmt.setString( index++, dto.getCampo36() );
			stmt.setString( index++, dto.getCampo37() );
			stmt.setString( index++, dto.getCampo38() );
			stmt.setString( index++, dto.getCampo39() );
			stmt.setString( index++, dto.getCampo40() );
			stmt.setString( index++, dto.getCampo41() );
			stmt.setString( index++, dto.getCampo42() );
			stmt.setString( index++, dto.getCampo43() );
			stmt.setString( index++, dto.getCampo44() );
			stmt.setString( index++, dto.getCampo45() );
			stmt.setString( index++, dto.getCampo46() );
			stmt.setString( index++, dto.getCampo47() );
			stmt.setString( index++, dto.getCampo48() );
			stmt.setString( index++, dto.getCampo49() );
			stmt.setString( index++, dto.getCampo50() );
			if (pk.getAnio() != null) {
				stmt.setInt( 53, pk.getAnio().intValue() );
			} else {
				stmt.setNull(53, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrAnualSubstratosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the ARR_ANUAL_SUBSTRATOS table.
	 */
	public void delete(ArrAnualSubstratosPk pk) throws ArrAnualSubstratosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getAnio() != null) {
				stmt.setInt( 1, pk.getAnio().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrAnualSubstratosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the ARR_ANUAL_SUBSTRATOS table that matches the specified primary-key value.
	 */
	public ArrAnualSubstratos findByPrimaryKey(ArrAnualSubstratosPk pk) throws ArrAnualSubstratosDaoException
	{
		return findByPrimaryKey( pk.getAnio());
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'ANIO = :anio AND SUBSTRATO = :substrato'.
	 */
	public ArrAnualSubstratos findByPrimaryKey(Integer anio) throws ArrAnualSubstratosDaoException
	{
		ArrAnualSubstratos ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ANIO = ? ", new Object[] { anio} );
		return ret.length==0 ? new ArrAnualSubstratos() : ret[0];
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria ''.
	 */
	public ArrAnualSubstratos[] findAll() throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ANIO, SUBSTRATO", null );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'ANIO = :anio'.
	 */
	public ArrAnualSubstratos[] findWhereAnioEquals(long anio) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANIO = ? ORDER BY ANIO", new Object[] {  new Long(anio) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'SUBSTRATO = :substrato'.
	 */
	public ArrAnualSubstratos[] findWhereSubstratoEquals(long substrato) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUBSTRATO = ? ORDER BY SUBSTRATO", new Object[] {  new Long(substrato) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO1 = :campo1'.
	 */
	public ArrAnualSubstratos[] findWhereCampo1Equals(String campo1) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO1 = ? ORDER BY CAMPO1", new Object[] { campo1 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO2 = :campo2'.
	 */
	public ArrAnualSubstratos[] findWhereCampo2Equals(String campo2) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO2 = ? ORDER BY CAMPO2", new Object[] { campo2 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO3 = :campo3'.
	 */
	public ArrAnualSubstratos[] findWhereCampo3Equals(String campo3) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO3 = ? ORDER BY CAMPO3", new Object[] { campo3 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO4 = :campo4'.
	 */
	public ArrAnualSubstratos[] findWhereCampo4Equals(String campo4) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO4 = ? ORDER BY CAMPO4", new Object[] { campo4 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO5 = :campo5'.
	 */
	public ArrAnualSubstratos[] findWhereCampo5Equals(String campo5) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO5 = ? ORDER BY CAMPO5", new Object[] { campo5 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO6 = :campo6'.
	 */
	public ArrAnualSubstratos[] findWhereCampo6Equals(String campo6) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO6 = ? ORDER BY CAMPO6", new Object[] { campo6 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO7 = :campo7'.
	 */
	public ArrAnualSubstratos[] findWhereCampo7Equals(String campo7) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO7 = ? ORDER BY CAMPO7", new Object[] { campo7 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO8 = :campo8'.
	 */
	public ArrAnualSubstratos[] findWhereCampo8Equals(String campo8) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO8 = ? ORDER BY CAMPO8", new Object[] { campo8 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO9 = :campo9'.
	 */
	public ArrAnualSubstratos[] findWhereCampo9Equals(String campo9) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO9 = ? ORDER BY CAMPO9", new Object[] { campo9 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO10 = :campo10'.
	 */
	public ArrAnualSubstratos[] findWhereCampo10Equals(String campo10) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO10 = ? ORDER BY CAMPO10", new Object[] { campo10 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO11 = :campo11'.
	 */
	public ArrAnualSubstratos[] findWhereCampo11Equals(String campo11) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO11 = ? ORDER BY CAMPO11", new Object[] { campo11 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO12 = :campo12'.
	 */
	public ArrAnualSubstratos[] findWhereCampo12Equals(String campo12) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO12 = ? ORDER BY CAMPO12", new Object[] { campo12 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO13 = :campo13'.
	 */
	public ArrAnualSubstratos[] findWhereCampo13Equals(String campo13) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO13 = ? ORDER BY CAMPO13", new Object[] { campo13 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO14 = :campo14'.
	 */
	public ArrAnualSubstratos[] findWhereCampo14Equals(String campo14) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO14 = ? ORDER BY CAMPO14", new Object[] { campo14 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO15 = :campo15'.
	 */
	public ArrAnualSubstratos[] findWhereCampo15Equals(String campo15) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO15 = ? ORDER BY CAMPO15", new Object[] { campo15 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO16 = :campo16'.
	 */
	public ArrAnualSubstratos[] findWhereCampo16Equals(String campo16) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO16 = ? ORDER BY CAMPO16", new Object[] { campo16 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO17 = :campo17'.
	 */
	public ArrAnualSubstratos[] findWhereCampo17Equals(String campo17) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO17 = ? ORDER BY CAMPO17", new Object[] { campo17 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO18 = :campo18'.
	 */
	public ArrAnualSubstratos[] findWhereCampo18Equals(String campo18) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO18 = ? ORDER BY CAMPO18", new Object[] { campo18 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO19 = :campo19'.
	 */
	public ArrAnualSubstratos[] findWhereCampo19Equals(String campo19) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO19 = ? ORDER BY CAMPO19", new Object[] { campo19 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO20 = :campo20'.
	 */
	public ArrAnualSubstratos[] findWhereCampo20Equals(String campo20) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO20 = ? ORDER BY CAMPO20", new Object[] { campo20 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO21 = :campo21'.
	 */
	public ArrAnualSubstratos[] findWhereCampo21Equals(String campo21) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO21 = ? ORDER BY CAMPO21", new Object[] { campo21 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO22 = :campo22'.
	 */
	public ArrAnualSubstratos[] findWhereCampo22Equals(String campo22) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO22 = ? ORDER BY CAMPO22", new Object[] { campo22 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO23 = :campo23'.
	 */
	public ArrAnualSubstratos[] findWhereCampo23Equals(String campo23) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO23 = ? ORDER BY CAMPO23", new Object[] { campo23 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO24 = :campo24'.
	 */
	public ArrAnualSubstratos[] findWhereCampo24Equals(String campo24) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO24 = ? ORDER BY CAMPO24", new Object[] { campo24 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO25 = :campo25'.
	 */
	public ArrAnualSubstratos[] findWhereCampo25Equals(String campo25) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO25 = ? ORDER BY CAMPO25", new Object[] { campo25 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO26 = :campo26'.
	 */
	public ArrAnualSubstratos[] findWhereCampo26Equals(String campo26) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO26 = ? ORDER BY CAMPO26", new Object[] { campo26 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO27 = :campo27'.
	 */
	public ArrAnualSubstratos[] findWhereCampo27Equals(String campo27) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO27 = ? ORDER BY CAMPO27", new Object[] { campo27 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO28 = :campo28'.
	 */
	public ArrAnualSubstratos[] findWhereCampo28Equals(String campo28) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO28 = ? ORDER BY CAMPO28", new Object[] { campo28 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO29 = :campo29'.
	 */
	public ArrAnualSubstratos[] findWhereCampo29Equals(String campo29) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO29 = ? ORDER BY CAMPO29", new Object[] { campo29 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO30 = :campo30'.
	 */
	public ArrAnualSubstratos[] findWhereCampo30Equals(String campo30) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO30 = ? ORDER BY CAMPO30", new Object[] { campo30 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO31 = :campo31'.
	 */
	public ArrAnualSubstratos[] findWhereCampo31Equals(String campo31) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO31 = ? ORDER BY CAMPO31", new Object[] { campo31 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO32 = :campo32'.
	 */
	public ArrAnualSubstratos[] findWhereCampo32Equals(String campo32) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO32 = ? ORDER BY CAMPO32", new Object[] { campo32 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO33 = :campo33'.
	 */
	public ArrAnualSubstratos[] findWhereCampo33Equals(String campo33) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO33 = ? ORDER BY CAMPO33", new Object[] { campo33 } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the criteria 'CAMPO34 = :campo34'.
	 */
	public ArrAnualSubstratos[] findWhereCampo34Equals(String campo34) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO34 = ? ORDER BY CAMPO34", new Object[] { campo34 } );
	}

	/** 
	 * Returns all rows from the arr_anual_substratos table that match the criteria 'CAMPO35 = :campo35'.
	 */
	public ArrAnualSubstratos[] findWhereCampo35Equals(String campo35) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO35 = ? ORDER BY CAMPO35", new Object[] { campo35 } );
	}

	/** 
	 * Returns all rows from the arr_anual_substratos table that match the criteria 'CAMPO36 = :campo36'.
	 */
	public ArrAnualSubstratos[] findWhereCampo36Equals(String campo36) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO36 = ? ORDER BY CAMPO36", new Object[] { campo36 } );
	}

	/** 
	 * Returns all rows from the arr_anual_substratos table that match the criteria 'CAMPO37 = :campo37'.
	 */
	public ArrAnualSubstratos[] findWhereCampo37Equals(String campo37) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO37 = ? ORDER BY CAMPO37", new Object[] { campo37 } );
	}

	/** 
	 * Returns all rows from the arr_anual_substratos table that match the criteria 'CAMPO38 = :campo38'.
	 */
	public ArrAnualSubstratos[] findWhereCampo38Equals(String campo38) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO38 = ? ORDER BY CAMPO38", new Object[] { campo38 } );
	}

	/** 
	 * Returns all rows from the arr_anual_substratos table that match the criteria 'CAMPO39 = :campo39'.
	 */
	public ArrAnualSubstratos[] findWhereCampo39Equals(String campo39) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO39 = ? ORDER BY CAMPO39", new Object[] { campo39 } );
	}

	/** 
	 * Returns all rows from the arr_anual_substratos table that match the criteria 'CAMPO40 = :campo40'.
	 */
	public ArrAnualSubstratos[] findWhereCampo40Equals(String campo40) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO40 = ? ORDER BY CAMPO40", new Object[] { campo40 } );
	}

	/** 
	 * Returns all rows from the arr_anual_substratos table that match the criteria 'CAMPO41 = :campo41'.
	 */
	public ArrAnualSubstratos[] findWhereCampo41Equals(String campo41) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO41 = ? ORDER BY CAMPO41", new Object[] { campo41 } );
	}

	/** 
	 * Returns all rows from the arr_anual_substratos table that match the criteria 'CAMPO42 = :campo42'.
	 */
	public ArrAnualSubstratos[] findWhereCampo42Equals(String campo42) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO42 = ? ORDER BY CAMPO42", new Object[] { campo42 } );
	}

	/** 
	 * Returns all rows from the arr_anual_substratos table that match the criteria 'CAMPO43 = :campo43'.
	 */
	public ArrAnualSubstratos[] findWhereCampo43Equals(String campo43) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO43 = ? ORDER BY CAMPO43", new Object[] { campo43 } );
	}

	/** 
	 * Returns all rows from the arr_anual_substratos table that match the criteria 'CAMPO44 = :campo44'.
	 */
	public ArrAnualSubstratos[] findWhereCampo44Equals(String campo44) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO44 = ? ORDER BY CAMPO44", new Object[] { campo44 } );
	}

	/** 
	 * Returns all rows from the arr_anual_substratos table that match the criteria 'CAMPO45 = :campo45'.
	 */
	public ArrAnualSubstratos[] findWhereCampo45Equals(String campo45) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO45 = ? ORDER BY CAMPO45", new Object[] { campo45 } );
	}

	/** 
	 * Returns all rows from the arr_anual_substratos table that match the criteria 'CAMPO46 = :campo46'.
	 */
	public ArrAnualSubstratos[] findWhereCampo46Equals(String campo46) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO46 = ? ORDER BY CAMPO46", new Object[] { campo46 } );
	}

	/** 
	 * Returns all rows from the arr_anual_substratos table that match the criteria 'CAMPO47 = :campo47'.
	 */
	public ArrAnualSubstratos[] findWhereCampo47Equals(String campo47) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO47 = ? ORDER BY CAMPO47", new Object[] { campo47 } );
	}

	/** 
	 * Returns all rows from the arr_anual_substratos table that match the criteria 'CAMPO48 = :campo48'.
	 */
	public ArrAnualSubstratos[] findWhereCampo48Equals(String campo48) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO48 = ? ORDER BY CAMPO48", new Object[] { campo48 } );
	}

	/** 
	 * Returns all rows from the arr_anual_substratos table that match the criteria 'CAMPO49 = :campo49'.
	 */
	public ArrAnualSubstratos[] findWhereCampo49Equals(String campo49) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO49 = ? ORDER BY CAMPO49", new Object[] { campo49 } );
	}

	/** 
	 * Returns all rows from the arr_anual_substratos table that match the criteria 'CAMPO50 = :campo50'.
	 */
	public ArrAnualSubstratos[] findWhereCampo50Equals(String campo50) throws ArrAnualSubstratosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMPO50 = ? ORDER BY CAMPO50", new Object[] { campo50 } );
	}
	
	/**
	 * Method 'ArrAnualSubstratosDaoImpl'
	 * 
	 */
	public ArrAnualSubstratosDaoImpl()
	{
	}

	/**
	 * Method 'ArrAnualSubstratosDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrAnualSubstratosDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		//return "idea.ARR_ANUAL_SUBSTRATOS";
		return "idea.arr_anual_substratos";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrAnualSubstratos fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrAnualSubstratos dto = new ArrAnualSubstratos();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrAnualSubstratos[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrAnualSubstratos dto = new ArrAnualSubstratos();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrAnualSubstratos ret[] = new ArrAnualSubstratos[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrAnualSubstratos dto, ResultSet rs) throws SQLException
	{
		dto.setAnio( new Integer( rs.getInt(COLUMN_ANIO) ) );
		dto.setSubstrato( new Integer( rs.getInt(COLUMN_SUBSTRATO) ) );
		dto.setCampo1( rs.getString( COLUMN_CAMPO1 ) );
		dto.setCampo2( rs.getString( COLUMN_CAMPO2 ) );
		dto.setCampo3( rs.getString( COLUMN_CAMPO3 ) );
		dto.setCampo4( rs.getString( COLUMN_CAMPO4 ) );
		dto.setCampo5( rs.getString( COLUMN_CAMPO5 ) );
		dto.setCampo6( rs.getString( COLUMN_CAMPO6 ) );
		dto.setCampo7( rs.getString( COLUMN_CAMPO7 ) );
		dto.setCampo8( rs.getString( COLUMN_CAMPO8 ) );
		dto.setCampo9( rs.getString( COLUMN_CAMPO9 ) );
		dto.setCampo10( rs.getString( COLUMN_CAMPO10 ) );
		dto.setCampo11( rs.getString( COLUMN_CAMPO11 ) );
		dto.setCampo12( rs.getString( COLUMN_CAMPO12 ) );
		dto.setCampo13( rs.getString( COLUMN_CAMPO13 ) );
		dto.setCampo14( rs.getString( COLUMN_CAMPO14 ) );
		dto.setCampo15( rs.getString( COLUMN_CAMPO15 ) );
		dto.setCampo16( rs.getString( COLUMN_CAMPO16 ) );
		dto.setCampo17( rs.getString( COLUMN_CAMPO17 ) );
		dto.setCampo18( rs.getString( COLUMN_CAMPO18 ) );
		dto.setCampo19( rs.getString( COLUMN_CAMPO19 ) );
		dto.setCampo20( rs.getString( COLUMN_CAMPO20 ) );
		dto.setCampo21( rs.getString( COLUMN_CAMPO21 ) );
		dto.setCampo22( rs.getString( COLUMN_CAMPO22 ) );
		dto.setCampo23( rs.getString( COLUMN_CAMPO23 ) );
		dto.setCampo24( rs.getString( COLUMN_CAMPO24 ) );
		dto.setCampo25( rs.getString( COLUMN_CAMPO25 ) );
		dto.setCampo26( rs.getString( COLUMN_CAMPO26 ) );
		dto.setCampo27( rs.getString( COLUMN_CAMPO27 ) );
		dto.setCampo28( rs.getString( COLUMN_CAMPO28 ) );
		dto.setCampo29( rs.getString( COLUMN_CAMPO29 ) );
		dto.setCampo30( rs.getString( COLUMN_CAMPO30 ) );
		dto.setCampo31( rs.getString( COLUMN_CAMPO31 ) );
		dto.setCampo32( rs.getString( COLUMN_CAMPO32 ) );
		dto.setCampo33( rs.getString( COLUMN_CAMPO33 ) );
		dto.setCampo34( rs.getString( COLUMN_CAMPO34 ) );
		dto.setCampo35( rs.getString( COLUMN_CAMPO35 ) );
		dto.setCampo36( rs.getString( COLUMN_CAMPO36 ) );
		dto.setCampo37( rs.getString( COLUMN_CAMPO37 ) );
		dto.setCampo38( rs.getString( COLUMN_CAMPO38 ) );
		dto.setCampo39( rs.getString( COLUMN_CAMPO39 ) );
		dto.setCampo40( rs.getString( COLUMN_CAMPO40 ) );
		dto.setCampo41( rs.getString( COLUMN_CAMPO41 ) );
		dto.setCampo42( rs.getString( COLUMN_CAMPO42 ) );
		dto.setCampo43( rs.getString( COLUMN_CAMPO43 ) );
		dto.setCampo44( rs.getString( COLUMN_CAMPO44 ) );
		dto.setCampo45( rs.getString( COLUMN_CAMPO45 ) );
		dto.setCampo46( rs.getString( COLUMN_CAMPO46 ) );
		dto.setCampo47( rs.getString( COLUMN_CAMPO47 ) );
		dto.setCampo48( rs.getString( COLUMN_CAMPO48 ) );
		dto.setCampo49( rs.getString( COLUMN_CAMPO49 ) );
		dto.setCampo50( rs.getString( COLUMN_CAMPO50 ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrAnualSubstratos dto)
	{
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the specified arbitrary SQL statement
	 */
	public ArrAnualSubstratos[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrAnualSubstratosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrAnualSubstratosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_SUBSTRATOS table that match the specified arbitrary SQL statement
	 */
	public ArrAnualSubstratos[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrAnualSubstratosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrAnualSubstratosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
