/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;


import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;

public class ArrAnualTecnicasDaoImpl extends AbstractDAO implements ArrAnualTecnicasDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ANIO, CARTO, NAVX, LOCALISA, RPM, NOGA, OTROS, ICT, TA, FM, FA, TVI, TVC, IDECO, IDCRIO, IDUS, IDREMOTA, TECNICAS, COMENTARIOS, RYTHMIA, MEDIGUIDE, ANGROT, NIOBE, HANSEN, AMIGO, AROTRO, IDLASER FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ANIO, CARTO, NAVX, LOCALISA, RPM, NOGA, OTROS, ICT, TA, FM, FA, TVI, TVC, IDECO, IDCRIO, IDUS, IDREMOTA, TECNICAS, COMENTARIOS, RYTHMIA, MEDIGUIDE, ANGROT, NIOBE, HANSEN, AMIGO, AROTRO, IDLASER ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ANIO = ?, CARTO = ?, NAVX = ?, LOCALISA = ?, RPM = ?, NOGA = ?, OTROS = ?, ICT = ?, TA = ?, FM = ?, FA = ?, TVI = ?, TVC = ?, IDECO = ?, IDCRIO = ?, IDUS = ?, IDREMOTA = ?, TECNICAS = ?, COMENTARIOS = ?, RYTHMIA = ?, MEDIGUIDE = ?, ANGROT = ?, NIOBE = ?, HANSEN = ?, AMIGO = ?, AROTRO = ?, IDLASER = ? WHERE ANIO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ANIO = ?";

	/** 
	 * Index of column ANIO
	 */
	protected static final int COLUMN_ANIO = 1;

	/** 
	 * Index of column CARTO
	 */
	protected static final int COLUMN_CARTO = 2;

	/** 
	 * Index of column NAVX
	 */
	protected static final int COLUMN_NAVX = 3;

	/** 
	 * Index of column LOCALISA
	 */
	protected static final int COLUMN_LOCALISA = 4;

	/** 
	 * Index of column RPM
	 */
	protected static final int COLUMN_RPM = 5;

	/** 
	 * Index of column NOGA
	 */
	protected static final int COLUMN_NOGA = 6;

	/** 
	 * Index of column OTROS
	 */
	protected static final int COLUMN_OTROS = 7;

	/** 
	 * Index of column ICT
	 */
	protected static final int COLUMN_ICT = 8;

	/** 
	 * Index of column TA
	 */
	protected static final int COLUMN_TA = 9;

	/** 
	 * Index of column FM
	 */
	protected static final int COLUMN_FM = 10;

	/** 
	 * Index of column FA
	 */
	protected static final int COLUMN_FA = 11;

	/** 
	 * Index of column TVI
	 */
	protected static final int COLUMN_TVI = 12;

	/** 
	 * Index of column TVC
	 */
	protected static final int COLUMN_TVC = 13;

	/** 
	 * Index of column IDECO
	 */
	protected static final int COLUMN_IDECO = 14;

	/** 
	 * Index of column IDCRIO
	 */
	protected static final int COLUMN_IDCRIO = 15;

	/** 
	 * Index of column IDUS
	 */
	protected static final int COLUMN_IDUS = 16;

	/** 
	 * Index of column IDREMOTA
	 */
	protected static final int COLUMN_IDREMOTA = 17;

	/** 
	 * Index of column TECNICAS
	 */
	protected static final int COLUMN_TECNICAS = 18;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 19;

	/** 
	 * Index of column RYTHMIA
	 */
	protected static final int COLUMN_RYTHMIA = 20;

	/** 
	 * Index of column MEDIGUIDE
	 */
	protected static final int COLUMN_MEDIGUIDE = 21;

	/** 
	 * Index of column ANGROT
	 */
	protected static final int COLUMN_ANGROT = 22;

	/** 
	 * Index of column NIOBE
	 */
	protected static final int COLUMN_NIOBE = 23;

	/** 
	 * Index of column HANSEN
	 */
	protected static final int COLUMN_HANSEN = 24;

	/** 
	 * Index of column AMIGO
	 */
	protected static final int COLUMN_AMIGO = 25;

	/** 
	 * Index of column AROTRO
	 */
	protected static final int COLUMN_AROTRO = 26;

	/** 
	 * Index of column IDLASER
	 */
	protected static final int COLUMN_IDLASER = 27;
	
	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 27;

	/** 
	 * Index of primary-key column ANIO
	 */
	protected static final int PK_COLUMN_ANIO = 1;

	/** 
	 * Inserts a new row in the ARR_ANUAL_TECNICAS table.
	 */
	public ArrAnualTecnicasPk insert(ArrAnualTecnicas dto) throws ArrAnualTecnicasDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.getAnio() != null) {
				stmt.setInt( index++, dto.getAnio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCarto() != null) {
				stmt.setInt( index++, dto.getCarto().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNavx() != null) {
				stmt.setInt( index++, dto.getNavx().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getLocalisa() != null) {
				stmt.setInt( index++, dto.getLocalisa().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getRpm() != null) {
				stmt.setInt( index++, dto.getRpm().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNoga() != null) {
				stmt.setInt( index++, dto.getNoga().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getOtros() != null) {
				stmt.setInt( index++, dto.getOtros().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIct() != null) {
				stmt.setInt( index++, dto.getIct().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTa() != null) {
				stmt.setInt( index++, dto.getTa().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getFm() != null) {
				stmt.setInt( index++, dto.getFm().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getFa() != null) {
				stmt.setInt( index++, dto.getFa().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTvi() != null) {
				stmt.setInt( index++, dto.getTvi().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTvc() != null) {
				stmt.setInt( index++, dto.getTvc().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdeco() != null) {
				stmt.setInt( index++, dto.getIdeco().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdcrio() != null) {
				stmt.setInt( index++, dto.getIdcrio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdus() != null) {
				stmt.setInt( index++, dto.getIdus().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdremota() != null) {
				stmt.setInt( index++, dto.getIdremota().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getTecnicas() );
			stmt.setString( index++, dto.getComentarios() );
			if (dto.getRythmia() != null) {
				stmt.setInt( index++, dto.getRythmia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMediguide() != null) {
				stmt.setInt( index++, dto.getMediguide().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAngrot() != null) {
				stmt.setInt( index++, dto.getAngrot().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNiobe() != null) {
				stmt.setInt( index++, dto.getNiobe().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHansen() != null) {
				stmt.setInt( index++, dto.getHansen().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAmigo() != null) {
				stmt.setInt( index++, dto.getAmigo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getArotro() );
			if (dto.getIdlaser() != null) {
				stmt.setInt( index++, dto.getIdlaser().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			throw new ArrAnualTecnicasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the ARR_ANUAL_TECNICAS table.
	 */
	public void update(ArrAnualTecnicasPk pk, ArrAnualTecnicas dto) throws ArrAnualTecnicasDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getAnio() != null) {
				stmt.setInt( index++, dto.getAnio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCarto() != null) {
				stmt.setInt( index++, dto.getCarto().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNavx() != null) {
				stmt.setInt( index++, dto.getNavx().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getLocalisa() != null) {
				stmt.setInt( index++, dto.getLocalisa().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getRpm() != null) {
				stmt.setInt( index++, dto.getRpm().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNoga() != null) {
				stmt.setInt( index++, dto.getNoga().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getOtros() != null) {
				stmt.setInt( index++, dto.getOtros().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIct() != null) {
				stmt.setInt( index++, dto.getIct().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTa() != null) {
				stmt.setInt( index++, dto.getTa().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getFm() != null) {
				stmt.setInt( index++, dto.getFm().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getFa() != null) {
				stmt.setInt( index++, dto.getFa().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTvi() != null) {
				stmt.setInt( index++, dto.getTvi().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTvc() != null) {
				stmt.setInt( index++, dto.getTvc().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdeco() != null) {
				stmt.setInt( index++, dto.getIdeco().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdcrio() != null) {
				stmt.setInt( index++, dto.getIdcrio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdus() != null) {
				stmt.setInt( index++, dto.getIdus().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdremota() != null) {
				stmt.setInt( index++, dto.getIdremota().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getTecnicas() );
			stmt.setString( index++, dto.getComentarios() );
			if (dto.getRythmia() != null) {
				stmt.setInt( index++, dto.getRythmia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMediguide() != null) {
				stmt.setInt( index++, dto.getMediguide().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAngrot() != null) {
				stmt.setInt( index++, dto.getAngrot().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNiobe() != null) {
				stmt.setInt( index++, dto.getNiobe().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHansen() != null) {
				stmt.setInt( index++, dto.getHansen().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAmigo() != null) {
				stmt.setInt( index++, dto.getAmigo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getArotro() );
			if (dto.getIdlaser() != null) {
				stmt.setInt( index++, dto.getIdlaser().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			if (pk.getAnio() != null) {
				stmt.setInt( 28, pk.getAnio().intValue() );
			} else {
				stmt.setNull(28, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrAnualTecnicasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the ARR_ANUAL_TECNICAS table.
	 */
	public void delete(ArrAnualTecnicasPk pk) throws ArrAnualTecnicasDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getAnio() != null) {
				stmt.setInt( 1, pk.getAnio().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrAnualTecnicasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the ARR_ANUAL_TECNICAS table that matches the specified primary-key value.
	 */
	public ArrAnualTecnicas findByPrimaryKey(ArrAnualTecnicasPk pk) throws ArrAnualTecnicasDaoException
	{
		return findByPrimaryKey( pk.getAnio() );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'ANIO = :anio'.
	 */
	public ArrAnualTecnicas findByPrimaryKey(Integer anio) throws ArrAnualTecnicasDaoException
	{
		ArrAnualTecnicas ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ANIO = ?", new Object[] { anio } );
		return ret.length==0 ? null : ret[0];
	}
	public ArrAnualTecnicas findByMaxAnio() throws ArrAnualTecnicasDaoException{
		ArrAnualTecnicas ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ANIO = (select max(anio) from "+getTableName()+")", null );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria ''.
	 */
	public ArrAnualTecnicas[] findAll() throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ANIO", null );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'ANIO = :anio'.
	 */
	public ArrAnualTecnicas[] findWhereAnioEquals(long anio) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANIO = ? ORDER BY ANIO", new Object[] {  new Long(anio) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'CARTO = :carto'.
	 */
	public ArrAnualTecnicas[] findWhereCartoEquals(long carto) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CARTO = ? ORDER BY CARTO", new Object[] {  new Long(carto) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'NAVX = :navx'.
	 */
	public ArrAnualTecnicas[] findWhereNavxEquals(long navx) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NAVX = ? ORDER BY NAVX", new Object[] {  new Long(navx) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'LOCALISA = :localisa'.
	 */
	public ArrAnualTecnicas[] findWhereLocalisaEquals(long localisa) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOCALISA = ? ORDER BY LOCALISA", new Object[] {  new Long(localisa) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'RPM = :rpm'.
	 */
	public ArrAnualTecnicas[] findWhereRpmEquals(long rpm) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RPM = ? ORDER BY RPM", new Object[] {  new Long(rpm) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'NOGA = :noga'.
	 */
	public ArrAnualTecnicas[] findWhereNogaEquals(long noga) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOGA = ? ORDER BY NOGA", new Object[] {  new Long(noga) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'OTROS = :otros'.
	 */
	public ArrAnualTecnicas[] findWhereOtrosEquals(long otros) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OTROS = ? ORDER BY OTROS", new Object[] {  new Long(otros) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'ICT = :ict'.
	 */
	public ArrAnualTecnicas[] findWhereIctEquals(long ict) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ICT = ? ORDER BY ICT", new Object[] {  new Long(ict) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'TA = :ta'.
	 */
	public ArrAnualTecnicas[] findWhereTaEquals(long ta) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TA = ? ORDER BY TA", new Object[] {  new Long(ta) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'FM = :fm'.
	 */
	public ArrAnualTecnicas[] findWhereFmEquals(long fm) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FM = ? ORDER BY FM", new Object[] {  new Long(fm) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'FA = :fa'.
	 */
	public ArrAnualTecnicas[] findWhereFaEquals(long fa) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FA = ? ORDER BY FA", new Object[] {  new Long(fa) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'TVI = :tvi'.
	 */
	public ArrAnualTecnicas[] findWhereTviEquals(long tvi) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TVI = ? ORDER BY TVI", new Object[] {  new Long(tvi) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'TVC = :tvc'.
	 */
	public ArrAnualTecnicas[] findWhereTvcEquals(long tvc) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TVC = ? ORDER BY TVC", new Object[] {  new Long(tvc) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'IDECO = :ideco'.
	 */
	public ArrAnualTecnicas[] findWhereIdecoEquals(long ideco) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDECO = ? ORDER BY IDECO", new Object[] {  new Long(ideco) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'IDCRIO = :idcrio'.
	 */
	public ArrAnualTecnicas[] findWhereIdcrioEquals(long idcrio) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDCRIO = ? ORDER BY IDCRIO", new Object[] {  new Long(idcrio) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'IDUS = :idus'.
	 */
	public ArrAnualTecnicas[] findWhereIdusEquals(long idus) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDUS = ? ORDER BY IDUS", new Object[] {  new Long(idus) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'IDREMOTA = :idremota'.
	 */
	public ArrAnualTecnicas[] findWhereIdremotaEquals(long idremota) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDREMOTA = ? ORDER BY IDREMOTA", new Object[] {  new Long(idremota) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'TECNICAS = :tecnicas'.
	 */
	public ArrAnualTecnicas[] findWhereTecnicasEquals(String tecnicas) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TECNICAS = ? ORDER BY TECNICAS", new Object[] { tecnicas } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ArrAnualTecnicas[] findWhereComentariosEquals(String comentarios) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}
	
	/** 
	 * Returns all rows from the arr_anual_tecnicas table that match the criteria 'RYTHMIA = :rythmia'.
	 */
	public ArrAnualTecnicas[] findWhereRythmiaEquals(int rythmia) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RYTHMIA = ? ORDER BY RYTHMIA", new Object[] {  new Integer(rythmia) } );
	}

	/** 
	 * Returns all rows from the arr_anual_tecnicas table that match the criteria 'MEDIGUIDE = :mediguide'.
	 */
	public ArrAnualTecnicas[] findWhereMediguideEquals(int mediguide) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MEDIGUIDE = ? ORDER BY MEDIGUIDE", new Object[] {  new Integer(mediguide) } );
	}

	/** 
	 * Returns all rows from the arr_anual_tecnicas table that match the criteria 'ANGROT = :angrot'.
	 */
	public ArrAnualTecnicas[] findWhereAngrotEquals(int angrot) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANGROT = ? ORDER BY ANGROT", new Object[] {  new Integer(angrot) } );
	}

	/** 
	 * Returns all rows from the arr_anual_tecnicas table that match the criteria 'NIOBE = :niobe'.
	 */
	public ArrAnualTecnicas[] findWhereNiobeEquals(int niobe) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NIOBE = ? ORDER BY NIOBE", new Object[] {  new Integer(niobe) } );
	}

	/** 
	 * Returns all rows from the arr_anual_tecnicas table that match the criteria 'HANSEN = :hansen'.
	 */
	public ArrAnualTecnicas[] findWhereHansenEquals(int hansen) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HANSEN = ? ORDER BY HANSEN", new Object[] {  new Integer(hansen) } );
	}

	/** 
	 * Returns all rows from the arr_anual_tecnicas table that match the criteria 'AMIGO = :amigo'.
	 */
	public ArrAnualTecnicas[] findWhereAmigoEquals(int amigo) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AMIGO = ? ORDER BY AMIGO", new Object[] {  new Integer(amigo) } );
	}

	/** 
	 * Returns all rows from the arr_anual_tecnicas table that match the criteria 'AROTRO = :arotro'.
	 */
	public ArrAnualTecnicas[] findWhereArotroEquals(String arotro) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AROTRO = ? ORDER BY AROTRO", new Object[] { arotro } );
	}

	/** 
	 * Returns all rows from the arr_anual_tecnicas table that match the criteria 'IDLASER = :idlaser'.
	 */
	public ArrAnualTecnicas[] findWhereIdlaserEquals(int idlaser) throws ArrAnualTecnicasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDLASER = ? ORDER BY IDLASER", new Object[] {  new Integer(idlaser) } );
	}

	/**
	 * Method 'ArrAnualTecnicasDaoImpl'
	 * 
	 */
	public ArrAnualTecnicasDaoImpl()
	{
	}

	/**
	 * Method 'ArrAnualTecnicasDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrAnualTecnicasDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		//return "idea.ARR_ANUAL_TECNICAS";
		return "idea.arr_anual_tecnicas";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrAnualTecnicas fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrAnualTecnicas dto = new ArrAnualTecnicas();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrAnualTecnicas[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrAnualTecnicas dto = new ArrAnualTecnicas();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrAnualTecnicas ret[] = new ArrAnualTecnicas[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrAnualTecnicas dto, ResultSet rs) throws SQLException
	{
		dto.setAnio( new Integer( rs.getInt(COLUMN_ANIO) ) );
		dto.setCarto( new Integer( rs.getInt(COLUMN_CARTO) ) );
		if (rs.wasNull()) {
			dto.setCarto( null );
		}
		
		dto.setNavx( new Integer( rs.getInt(COLUMN_NAVX) ) );
		if (rs.wasNull()) {
			dto.setNavx( null );
		}
		
		dto.setLocalisa( new Integer( rs.getInt(COLUMN_LOCALISA) ) );
		if (rs.wasNull()) {
			dto.setLocalisa( null );
		}
		
		dto.setRpm( new Integer( rs.getInt(COLUMN_RPM) ) );
		if (rs.wasNull()) {
			dto.setRpm( null );
		}
		
		dto.setNoga( new Integer( rs.getInt(COLUMN_NOGA) ) );
		if (rs.wasNull()) {
			dto.setNoga( null );
		}
		
		dto.setOtros( new Integer( rs.getInt(COLUMN_OTROS) ) );
		if (rs.wasNull()) {
			dto.setOtros( null );
		}
		
		dto.setIct( new Integer( rs.getInt(COLUMN_ICT) ) );
		if (rs.wasNull()) {
			dto.setIct( null );
		}
		
		dto.setTa( new Integer( rs.getInt(COLUMN_TA) ) );
		if (rs.wasNull()) {
			dto.setTa( null );
		}
		
		dto.setFm( new Integer( rs.getInt(COLUMN_FM) ) );
		if (rs.wasNull()) {
			dto.setFm( null );
		}
		
		dto.setFa( new Integer( rs.getInt(COLUMN_FA) ) );
		if (rs.wasNull()) {
			dto.setFa( null );
		}
		
		dto.setTvi( new Integer( rs.getInt(COLUMN_TVI) ) );
		if (rs.wasNull()) {
			dto.setTvi( null );
		}
		
		dto.setTvc( new Integer( rs.getInt(COLUMN_TVC) ) );
		if (rs.wasNull()) {
			dto.setTvc( null );
		}
		
		dto.setIdeco( new Integer( rs.getInt(COLUMN_IDECO) ) );
		if (rs.wasNull()) {
			dto.setIdeco( null );
		}
		
		dto.setIdcrio( new Integer( rs.getInt(COLUMN_IDCRIO) ) );
		if (rs.wasNull()) {
			dto.setIdcrio( null );
		}
		
		dto.setIdus( new Integer( rs.getInt(COLUMN_IDUS) ) );
		if (rs.wasNull()) {
			dto.setIdus( null );
		}
		
		dto.setIdremota( new Integer( rs.getInt(COLUMN_IDREMOTA) ) );
		if (rs.wasNull()) {
			dto.setIdremota( null );
		}
		
		dto.setTecnicas( rs.getString( COLUMN_TECNICAS ) );
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setRythmia( new Integer( rs.getInt(COLUMN_RYTHMIA) ) );
		if (rs.wasNull()) {
			dto.setRythmia( null );
		}
		
		dto.setMediguide( new Integer( rs.getInt(COLUMN_MEDIGUIDE) ) );
		if (rs.wasNull()) {
			dto.setMediguide( null );
		}
		
		dto.setAngrot( new Integer( rs.getInt(COLUMN_ANGROT) ) );
		if (rs.wasNull()) {
			dto.setAngrot( null );
		}
		
		dto.setNiobe( new Integer( rs.getInt(COLUMN_NIOBE) ) );
		if (rs.wasNull()) {
			dto.setNiobe( null );
		}
		
		dto.setHansen( new Integer( rs.getInt(COLUMN_HANSEN) ) );
		if (rs.wasNull()) {
			dto.setHansen( null );
		}
		
		dto.setAmigo( new Integer( rs.getInt(COLUMN_AMIGO) ) );
		if (rs.wasNull()) {
			dto.setAmigo( null );
		}
		
		dto.setArotro( rs.getString( COLUMN_AROTRO ) );
		dto.setIdlaser( new Integer( rs.getInt(COLUMN_IDLASER) ) );
		if (rs.wasNull()) {
			dto.setIdlaser( null );
		}
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrAnualTecnicas dto)
	{
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the specified arbitrary SQL statement
	 */
	public ArrAnualTecnicas[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrAnualTecnicasDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrAnualTecnicasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_TECNICAS table that match the specified arbitrary SQL statement
	 */
	public ArrAnualTecnicas[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrAnualTecnicasDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrAnualTecnicasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
