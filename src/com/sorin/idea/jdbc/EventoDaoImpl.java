/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.util.UtilFechas;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class EventoDaoImpl extends AbstractDAO implements EventoDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDEVENTO, CODIGO, IDUSUARIO, PROCEDIMIENTO, DESCRIPCION, SOLICITANTE, FECHAINI, FECHAFIN, IDENTIFICADOR, ESTADO, RESPONSABLE, IDPACIENTE, FECHAASIGNACION, NOMBRE, APELLIDO1, APELLIDO2, FNAC, TIPO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDEVENTO, CODIGO, IDUSUARIO, PROCEDIMIENTO, DESCRIPCION, SOLICITANTE, FECHAINI, FECHAFIN, IDENTIFICADOR, ESTADO, RESPONSABLE, IDPACIENTE, FECHAASIGNACION, NOMBRE, APELLIDO1, APELLIDO2, FNAC, TIPO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDEVENTO = ?, CODIGO = ?, IDUSUARIO = ?, PROCEDIMIENTO = ?, DESCRIPCION = ?, SOLICITANTE = ?, FECHAINI = ?, FECHAFIN = ?, IDENTIFICADOR = ?, ESTADO = ?, RESPONSABLE = ?, IDPACIENTE = ?, FECHAASIGNACION = ?, NOMBRE = ?, APELLIDO1 = ?, APELLIDO2 = ?, FNAC = ?, TIPO = ? WHERE IDEVENTO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDEVENTO = ?";

	/** 
	 * Index of column IDEVENTO
	 */
	protected static final int COLUMN_IDEVENTO = 1;

	/** 
	 * Index of column CODIGO
	 */
	protected static final int COLUMN_CODIGO = 2;

	/** 
	 * Index of column IDUSUARIO
	 */
	protected static final int COLUMN_IDUSUARIO = 3;

	/** 
	 * Index of column PROCEDIMIENTO
	 */
	protected static final int COLUMN_PROCEDIMIENTO = 4;

	/** 
	 * Index of column DESCRIPCION
	 */
	protected static final int COLUMN_DESCRIPCION = 5;

	/** 
	 * Index of column SOLICITANTE
	 */
	protected static final int COLUMN_SOLICITANTE = 6;

	/** 
	 * Index of column FECHAINI
	 */
	protected static final int COLUMN_FECHAINI = 7;

	/** 
	 * Index of column FECHAFIN
	 */
	protected static final int COLUMN_FECHAFIN = 8;

	/** 
	 * Index of column IDENTIFICADOR
	 */
	protected static final int COLUMN_IDENTIFICADOR = 9;

	/** 
	 * Index of column ESTADO
	 */
	protected static final int COLUMN_ESTADO = 10;

	/** 
	 * Index of column RESPONSABLE
	 */
	protected static final int COLUMN_RESPONSABLE = 11;

	/** 
	 * Index of column IDPACIENTE
	 */
	protected static final int COLUMN_IDPACIENTE = 12;

	/** 
	 * Index of column FECHAASIGNACION
	 */
	protected static final int COLUMN_FECHAASIGNACION = 13;

	/** 
	 * Index of column NOMBRE
	 */
	protected static final int COLUMN_NOMBRE = 14;

	/** 
	 * Index of column APELLIDO1
	 */
	protected static final int COLUMN_APELLIDO1 = 15;

	/** 
	 * Index of column APELLIDO2
	 */
	protected static final int COLUMN_APELLIDO2 = 16;

	/** 
	 * Index of column FNAC
	 */
	protected static final int COLUMN_FNAC = 17;

	/** 
	 * Index of column TIPO
	 */
	protected static final int COLUMN_TIPO = 18;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 18;

	/** 
	 * Index of primary-key column IDEVENTO
	 */
	protected static final int PK_COLUMN_IDEVENTO = 1;

	/** 
	 * Inserts a new row in the evento table.
	 */
	public EventoPk insert(Evento dto) throws EventoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdevento() != null) {
				stmt.setInt( index++, dto.getIdevento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCodigo() != null) {
				stmt.setInt( index++, dto.getCodigo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getIdusuario() );
			if (dto.getProcedimiento() != null) {
				stmt.setInt( index++, dto.getProcedimiento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getDescripcion() );
			stmt.setString( index++, dto.getSolicitante() );
			stmt.setTimestamp(index++, dto.getFechaini()==null ? null : new java.sql.Timestamp( dto.getFechaini().getTime() ) );
			stmt.setTimestamp(index++, dto.getFechafin()==null ? null : new java.sql.Timestamp( dto.getFechafin().getTime() ) );
			stmt.setString( index++, dto.getIdentificador() );
			if (dto.getEstado() != null) {
				stmt.setInt( index++, dto.getEstado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getResponsable() );
			stmt.setString( index++, dto.getIdpaciente() );
			stmt.setTimestamp(index++, dto.getFechaasignacion()==null ? null : new java.sql.Timestamp( dto.getFechaasignacion().getTime() ) );
			stmt.setString( index++, dto.getNombre() );
			stmt.setString( index++, dto.getApellido1() );
			stmt.setString( index++, dto.getApellido2() );
			stmt.setDate(index++, dto.getFnac()==null ? null : new java.sql.Date( dto.getFnac().getTime() ) );
			if (dto.getTipo() != null) {
				stmt.setInt( index++, dto.getTipo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdevento( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EventoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the evento table.
	 */
	public void update(EventoPk pk, Evento dto) throws EventoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdevento() != null) {
				stmt.setInt( index++, dto.getIdevento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCodigo() != null) {
				stmt.setInt( index++, dto.getCodigo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getIdusuario() );
			if (dto.getProcedimiento() != null) {
				stmt.setInt( index++, dto.getProcedimiento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getDescripcion() );
			stmt.setString( index++, dto.getSolicitante() );
			stmt.setTimestamp(index++, dto.getFechaini()==null ? null : new java.sql.Timestamp( dto.getFechaini().getTime() ) );
			stmt.setTimestamp(index++, dto.getFechafin()==null ? null : new java.sql.Timestamp( dto.getFechafin().getTime() ) );
			stmt.setString( index++, dto.getIdentificador() );
			if (dto.getEstado() != null) {
				stmt.setInt( index++, dto.getEstado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getResponsable() );
			stmt.setString( index++, dto.getIdpaciente() );
			stmt.setTimestamp(index++, dto.getFechaasignacion()==null ? null : new java.sql.Timestamp( dto.getFechaasignacion().getTime() ) );
			stmt.setString( index++, dto.getNombre() );
			stmt.setString( index++, dto.getApellido1() );
			stmt.setString( index++, dto.getApellido2() );
			stmt.setDate(index++, dto.getFnac()==null ? null : new java.sql.Date( dto.getFnac().getTime() ) );
			if (dto.getTipo() != null) {
				stmt.setInt( index++, dto.getTipo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (pk.getIdevento() != null) {
				stmt.setInt( 19, pk.getIdevento().intValue() );
			} else {
				stmt.setNull(19, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EventoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the evento table.
	 */
	public void delete(EventoPk pk) throws EventoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdevento() != null) {
				stmt.setInt( 1, pk.getIdevento().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EventoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the evento table that matches the specified primary-key value.
	 */
	public Evento findByPrimaryKey(EventoPk pk) throws EventoDaoException
	{
		return findByPrimaryKey( pk.getIdevento() );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'IDEVENTO = :idevento'.
	 */
	public Evento findByPrimaryKey(Integer idevento) throws EventoDaoException
	{
		Evento ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDEVENTO = ?", new Object[] { idevento } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the evento table that match the criteria ''.
	 */
	public Evento[] findAll() throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDEVENTO", null );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'IDEVENTO = :idevento'.
	 */
	public Evento[] findWhereIdeventoEquals(int idevento) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDEVENTO = ? ORDER BY IDEVENTO", new Object[] {  new Integer(idevento) } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'CODIGO = :codigo'.
	 */
	public Evento[] findWhereCodigoEquals(int codigo) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CODIGO = ? ORDER BY CODIGO", new Object[] {  new Integer(codigo) } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'IDUSUARIO = :idusuario'.
	 */
	public Evento[] findWhereIdusuarioEquals(String idusuario) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDUSUARIO = ? ORDER BY IDUSUARIO", new Object[] { idusuario } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'PROCEDIMIENTO = :procedimiento'.
	 */
	public Evento[] findWhereProcedimientoEquals(int procedimiento) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROCEDIMIENTO = ? ORDER BY PROCEDIMIENTO", new Object[] {  new Integer(procedimiento) } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public Evento[] findWhereDescripcionEquals(String descripcion) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPCION = ? ORDER BY DESCRIPCION", new Object[] { descripcion } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'SOLICITANTE = :solicitante'.
	 */
	public Evento[] findWhereSolicitanteEquals(String solicitante) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SOLICITANTE = ? ORDER BY SOLICITANTE", new Object[] { solicitante } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'FECHAINI = :fechaini'.
	 */
	public Evento[] findWhereFechainiEquals(Date fechaini) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAINI = ? ORDER BY FECHAINI", new Object[] { fechaini==null ? null : new java.sql.Timestamp( fechaini.getTime() ) } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'FECHAFIN = :fechafin'.
	 */
	public Evento[] findWhereFechafinEquals(Date fechafin) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAFIN = ? ORDER BY FECHAFIN", new Object[] { fechafin==null ? null : new java.sql.Timestamp( fechafin.getTime() ) } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'IDENTIFICADOR = :identificador'.
	 */
	public Evento[] findWhereIdentificadorEquals(String identificador) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDENTIFICADOR = ? ORDER BY IDENTIFICADOR", new Object[] { identificador } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'ESTADO = :estado'.
	 */
	public Evento[] findWhereEstadoEquals(int estado) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTADO = ? ORDER BY ESTADO", new Object[] {  new Integer(estado) } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'RESPONSABLE = :responsable'.
	 */
	public Evento[] findWhereResponsableEquals(String responsable) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RESPONSABLE = ? ORDER BY RESPONSABLE", new Object[] { responsable } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'IDPACIENTE = :idpaciente'.
	 */
	public Evento[] findWhereIdpacienteEquals(String idpaciente) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPACIENTE = ? ORDER BY IDPACIENTE", new Object[] { idpaciente } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'FECHAASIGNACION = :fechaasignacion'.
	 */
	public Evento[] findWhereFechaasignacionEquals(Date fechaasignacion) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAASIGNACION = ? ORDER BY FECHAASIGNACION", new Object[] { fechaasignacion==null ? null : new java.sql.Timestamp( fechaasignacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'NOMBRE = :nombre'.
	 */
	public Evento[] findWhereNombreEquals(String nombre) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE = ? ORDER BY NOMBRE", new Object[] { nombre } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'APELLIDO1 = :apellido1'.
	 */
	public Evento[] findWhereApellido1Equals(String apellido1) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APELLIDO1 = ? ORDER BY APELLIDO1", new Object[] { apellido1 } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'APELLIDO2 = :apellido2'.
	 */
	public Evento[] findWhereApellido2Equals(String apellido2) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APELLIDO2 = ? ORDER BY APELLIDO2", new Object[] { apellido2 } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'FNAC = :fnac'.
	 */
	public Evento[] findWhereFnacEquals(Date fnac) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FNAC = ? ORDER BY FNAC", new Object[] { fnac==null ? null : new java.sql.Date( fnac.getTime() ) } );
	}

	/** 
	 * Returns all rows from the evento table that match the criteria 'TIPO = :tipo'.
	 */
	public Evento[] findWhereTipoEquals(int tipo) throws EventoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO = ? ORDER BY TIPO", new Object[] {  new Integer(tipo) } );
	}

	/**
	 * Method 'EventoDaoImpl'
	 * 
	 */
	public EventoDaoImpl()
	{
	}
	public EventoDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public EventoDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'EventoDaoImpl'
	 * 
	 * @param userConn
	 */
	public EventoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.evento";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Evento fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Evento dto = new Evento();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Evento[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Evento dto = new Evento();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Evento ret[] = new Evento[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Evento dto, ResultSet rs) throws SQLException
	{
		dto.setIdevento( new Integer( rs.getInt(COLUMN_IDEVENTO) ) );
		dto.setCodigo( new Integer( rs.getInt(COLUMN_CODIGO) ) );
		if (rs.wasNull()) {
			dto.setCodigo( null );
		}
		
		dto.setIdusuario( rs.getString( COLUMN_IDUSUARIO ) );
		dto.setProcedimiento( new Integer( rs.getInt(COLUMN_PROCEDIMIENTO) ) );
		if (rs.wasNull()) {
			dto.setProcedimiento( null );
		}
		
		dto.setDescripcion( rs.getString( COLUMN_DESCRIPCION ) );
		dto.setSolicitante( rs.getString( COLUMN_SOLICITANTE ) );
		dto.setFechaini( rs.getTimestamp(COLUMN_FECHAINI ) );
		dto.setFechafin( rs.getTimestamp(COLUMN_FECHAFIN ) );
		dto.setIdentificador( rs.getString( COLUMN_IDENTIFICADOR ) );
		dto.setEstado( new Integer( rs.getInt(COLUMN_ESTADO) ) );
		if (rs.wasNull()) {
			dto.setEstado( null );
		}
		
		dto.setResponsable( rs.getString( COLUMN_RESPONSABLE ) );
		dto.setIdpaciente( rs.getString( COLUMN_IDPACIENTE ) );
		dto.setFechaasignacion( rs.getTimestamp(COLUMN_FECHAASIGNACION ) );
		dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
		dto.setApellido1( rs.getString( COLUMN_APELLIDO1 ) );
		dto.setApellido2( rs.getString( COLUMN_APELLIDO2 ) );
		dto.setFnac( rs.getDate(COLUMN_FNAC ) );
		dto.setTipo( new Integer( rs.getInt(COLUMN_TIPO) ) );
		if (rs.wasNull()) {
			dto.setTipo( null );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Evento dto)
	{
	}

	/** 
	 * Returns all rows from the evento table that match the specified arbitrary SQL statement
	 */
	public Evento[] findByDynamicSelect(String sql, Object[] sqlParams) throws EventoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EventoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the evento table that match the specified arbitrary SQL statement
	 */
	public Evento[] findByDynamicWhere(String sql, Object[] sqlParams) throws EventoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EventoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	public Evento[] findByDynamicSelect(String sql) throws EventoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			/*for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}*/
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EventoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	public Evento[] getNumtotalEventosFecha(Date fechaini, Date fechafin, Integer idagenda) throws EventoDaoException {
    	StringBuffer sql = new StringBuffer();
		sql.append("select ev.idevento,ev.codigo,ev.idusuario,ev.procedimiento,ev.descripcion,ev.solicitante,ev.fechaini,ev.fechafin,ev.identificador,ev.estado,ev.responsable,ev.idpaciente,ev.fechaasignacion,ev.nombre,ev.apellido1,ev.apellido2,ev.fnac,ev.tipo ");
		sql.append(" from agendacita agev, evento ev ");
		sql.append(" WHERE ev.fechaini >='"+UtilFechas.getFechaString(fechaini)+"'");
		sql.append(" and ev.fechaini <='"+UtilFechas.getFechaString(fechafin)+"'");
		sql.append(" and agev.idevento = ev.idevento");
		sql.append(" and agev.idagenda = "+idagenda);
		sql.append(" and ev.tipo = 1");
		
		return findByDynamicSelect(sql.toString());
    }

}
