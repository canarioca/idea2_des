/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ProtSincopeValCardDaoImpl extends AbstractDAO implements ProtSincopeValCardDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDPROTSINCOPE, FECHA, SINCOPE_PICO, SINCOPE_DEC, AF_MS, PALPITACIONES, DOLOR_TORACICO, CARDIO_ESTRUCT, ANT_ISQ_ICC, ECG_ANORMAL, HALL_BRADI, HALL_BAV, HALL_BR, HALL_TSV, HALL_TVNS, HALL_MPDAI, HALL_ECG, HALL_ESTEN, HALL_HTAPULM, HALL_EMBOL, HALL_DISEC, HALL_MIX, COMENTARIOS, OPERADOR FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDPROTSINCOPE, FECHA, SINCOPE_PICO, SINCOPE_DEC, AF_MS, PALPITACIONES, DOLOR_TORACICO, CARDIO_ESTRUCT, ANT_ISQ_ICC, ECG_ANORMAL, HALL_BRADI, HALL_BAV, HALL_BR, HALL_TSV, HALL_TVNS, HALL_MPDAI, HALL_ECG, HALL_ESTEN, HALL_HTAPULM, HALL_EMBOL, HALL_DISEC, HALL_MIX, COMENTARIOS, OPERADOR ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDPROTSINCOPE = ?, FECHA = ?, SINCOPE_PICO = ?, SINCOPE_DEC = ?, AF_MS = ?, PALPITACIONES = ?, DOLOR_TORACICO = ?, CARDIO_ESTRUCT = ?, ANT_ISQ_ICC = ?, ECG_ANORMAL = ?, HALL_BRADI = ?, HALL_BAV = ?, HALL_BR = ?, HALL_TSV = ?, HALL_TVNS = ?, HALL_MPDAI = ?, HALL_ECG = ?, HALL_ESTEN = ?, HALL_HTAPULM = ?, HALL_EMBOL = ?, HALL_DISEC = ?, HALL_MIX = ?, COMENTARIOS = ?, OPERADOR = ? WHERE IDPROTSINCOPE = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDPROTSINCOPE = ?";

	/** 
	 * Index of column IDPROTSINCOPE
	 */
	protected static final int COLUMN_IDPROTSINCOPE = 1;

	/** 
	 * Index of column FECHA
	 */
	protected static final int COLUMN_FECHA = 2;

	/** 
	 * Index of column SINCOPE_PICO
	 */
	protected static final int COLUMN_SINCOPE_PICO = 3;

	/** 
	 * Index of column SINCOPE_DEC
	 */
	protected static final int COLUMN_SINCOPE_DEC = 4;

	/** 
	 * Index of column AF_MS
	 */
	protected static final int COLUMN_AF_MS = 5;

	/** 
	 * Index of column PALPITACIONES
	 */
	protected static final int COLUMN_PALPITACIONES = 6;

	/** 
	 * Index of column DOLOR_TORACICO
	 */
	protected static final int COLUMN_DOLOR_TORACICO = 7;

	/** 
	 * Index of column CARDIO_ESTRUCT
	 */
	protected static final int COLUMN_CARDIO_ESTRUCT = 8;

	/** 
	 * Index of column ANT_ISQ_ICC
	 */
	protected static final int COLUMN_ANT_ISQ_ICC = 9;

	/** 
	 * Index of column ECG_ANORMAL
	 */
	protected static final int COLUMN_ECG_ANORMAL = 10;

	/** 
	 * Index of column HALL_BRADI
	 */
	protected static final int COLUMN_HALL_BRADI = 11;

	/** 
	 * Index of column HALL_BAV
	 */
	protected static final int COLUMN_HALL_BAV = 12;

	/** 
	 * Index of column HALL_BR
	 */
	protected static final int COLUMN_HALL_BR = 13;

	/** 
	 * Index of column HALL_TSV
	 */
	protected static final int COLUMN_HALL_TSV = 14;

	/** 
	 * Index of column HALL_TVNS
	 */
	protected static final int COLUMN_HALL_TVNS = 15;

	/** 
	 * Index of column HALL_MPDAI
	 */
	protected static final int COLUMN_HALL_MPDAI = 16;

	/** 
	 * Index of column HALL_ECG
	 */
	protected static final int COLUMN_HALL_ECG = 17;

	/** 
	 * Index of column HALL_ESTEN
	 */
	protected static final int COLUMN_HALL_ESTEN = 18;

	/** 
	 * Index of column HALL_HTAPULM
	 */
	protected static final int COLUMN_HALL_HTAPULM = 19;

	/** 
	 * Index of column HALL_EMBOL
	 */
	protected static final int COLUMN_HALL_EMBOL = 20;

	/** 
	 * Index of column HALL_DISEC
	 */
	protected static final int COLUMN_HALL_DISEC = 21;

	/** 
	 * Index of column HALL_MIX
	 */
	protected static final int COLUMN_HALL_MIX = 22;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 23;

	/** 
	 * Index of column OPERADOR
	 */
	protected static final int COLUMN_OPERADOR = 24;
	
	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 24;

	/** 
	 * Index of primary-key column IDPROTSINCOPE
	 */
	protected static final int PK_COLUMN_IDPROTSINCOPE = 1;

	/** 
	 * Inserts a new row in the prot_sincope_val_card table.
	 */
	public ProtSincopeValCardPk insert(ProtSincopeValCard dto) throws ProtSincopeValCardDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.getIdprotsincope() != null) {
				stmt.setInt( index++, dto.getIdprotsincope().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			if (dto.getSincopePico() != null) {
				stmt.setInt( index++, dto.getSincopePico().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSincopeDec() != null) {
				stmt.setInt( index++, dto.getSincopeDec().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAfMs() != null) {
				stmt.setInt( index++, dto.getAfMs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPalpitaciones() != null) {
				stmt.setInt( index++, dto.getPalpitaciones().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getDolorToracico() != null) {
				stmt.setInt( index++, dto.getDolorToracico().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCardioEstruct() != null) {
				stmt.setInt( index++, dto.getCardioEstruct().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAntIsqIcc() != null) {
				stmt.setInt( index++, dto.getAntIsqIcc().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEcgAnormal() != null) {
				stmt.setInt( index++, dto.getEcgAnormal().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallBradi() != null) {
				stmt.setInt( index++, dto.getHallBradi().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallBav() != null) {
				stmt.setInt( index++, dto.getHallBav().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallBr() != null) {
				stmt.setInt( index++, dto.getHallBr().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallTsv() != null) {
				stmt.setInt( index++, dto.getHallTsv().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallTvns() != null) {
				stmt.setInt( index++, dto.getHallTvns().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallMpdai() != null) {
				stmt.setInt( index++, dto.getHallMpdai().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallEcg() != null) {
				stmt.setInt( index++, dto.getHallEcg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallEsten() != null) {
				stmt.setInt( index++, dto.getHallEsten().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallHtapulm() != null) {
				stmt.setInt( index++, dto.getHallHtapulm().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallEmbol() != null) {
				stmt.setInt( index++, dto.getHallEmbol().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallDisec() != null) {
				stmt.setInt( index++, dto.getHallDisec().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallMix() != null) {
				stmt.setInt( index++, dto.getHallMix().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getComentarios() );
			stmt.setString( index++, dto.getOperador() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.insercion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProtSincopeValCardDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the prot_sincope_val_card table.
	 */
	public void update(ProtSincopeValCardPk pk, ProtSincopeValCard dto) throws ProtSincopeValCardDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdprotsincope() != null) {
				stmt.setInt( index++, dto.getIdprotsincope().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			if (dto.getSincopePico() != null) {
				stmt.setInt( index++, dto.getSincopePico().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSincopeDec() != null) {
				stmt.setInt( index++, dto.getSincopeDec().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAfMs() != null) {
				stmt.setInt( index++, dto.getAfMs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPalpitaciones() != null) {
				stmt.setInt( index++, dto.getPalpitaciones().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getDolorToracico() != null) {
				stmt.setInt( index++, dto.getDolorToracico().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCardioEstruct() != null) {
				stmt.setInt( index++, dto.getCardioEstruct().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAntIsqIcc() != null) {
				stmt.setInt( index++, dto.getAntIsqIcc().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEcgAnormal() != null) {
				stmt.setInt( index++, dto.getEcgAnormal().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallBradi() != null) {
				stmt.setInt( index++, dto.getHallBradi().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallBav() != null) {
				stmt.setInt( index++, dto.getHallBav().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallBr() != null) {
				stmt.setInt( index++, dto.getHallBr().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallTsv() != null) {
				stmt.setInt( index++, dto.getHallTsv().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallTvns() != null) {
				stmt.setInt( index++, dto.getHallTvns().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallMpdai() != null) {
				stmt.setInt( index++, dto.getHallMpdai().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallEcg() != null) {
				stmt.setInt( index++, dto.getHallEcg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallEsten() != null) {
				stmt.setInt( index++, dto.getHallEsten().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallHtapulm() != null) {
				stmt.setInt( index++, dto.getHallHtapulm().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallEmbol() != null) {
				stmt.setInt( index++, dto.getHallEmbol().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallDisec() != null) {
				stmt.setInt( index++, dto.getHallDisec().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHallMix() != null) {
				stmt.setInt( index++, dto.getHallMix().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getComentarios() );
			stmt.setString( index++, dto.getOperador() );
			if (pk.getIdprotsincope() != null) {
				stmt.setInt( 25, pk.getIdprotsincope().intValue() );
			} else {
				stmt.setNull(25, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProtSincopeValCardDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the prot_sincope_val_card table.
	 */
	public void delete(ProtSincopeValCardPk pk) throws ProtSincopeValCardDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdprotsincope() != null) {
				stmt.setInt( 1, pk.getIdprotsincope().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(pk.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProtSincopeValCardDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the prot_sincope_val_card table that matches the specified primary-key value.
	 */
	public ProtSincopeValCard findByPrimaryKey(ProtSincopeValCardPk pk) throws ProtSincopeValCardDaoException
	{
		return findByPrimaryKey( pk.getIdprotsincope() );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'IDPROTSINCOPE = :idprotsincope'.
	 */
	public ProtSincopeValCard findByPrimaryKey(Integer idprotsincope) throws ProtSincopeValCardDaoException
	{
		ProtSincopeValCard ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDPROTSINCOPE = ?", new Object[] { idprotsincope } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria ''.
	 */
	public ProtSincopeValCard[] findAll() throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDPROTSINCOPE", null );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'IDPROTSINCOPE = :idprotsincope'.
	 */
	public ProtSincopeValCard[] findWhereIdprotsincopeEquals(int idprotsincope) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPROTSINCOPE = ? ORDER BY IDPROTSINCOPE", new Object[] {  new Integer(idprotsincope) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'FECHA = :fecha'.
	 */
	public ProtSincopeValCard[] findWhereFechaEquals(Date fecha) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA = ? ORDER BY FECHA", new Object[] { fecha==null ? null : new java.sql.Date( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'SINCOPE_PICO = :sincopePico'.
	 */
	public ProtSincopeValCard[] findWhereSincopePicoEquals(int sincopePico) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SINCOPE_PICO = ? ORDER BY SINCOPE_PICO", new Object[] {  new Integer(sincopePico) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'SINCOPE_DEC = :sincopeDec'.
	 */
	public ProtSincopeValCard[] findWhereSincopeDecEquals(int sincopeDec) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SINCOPE_DEC = ? ORDER BY SINCOPE_DEC", new Object[] {  new Integer(sincopeDec) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'AF_MS = :afMs'.
	 */
	public ProtSincopeValCard[] findWhereAfMsEquals(int afMs) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AF_MS = ? ORDER BY AF_MS", new Object[] {  new Integer(afMs) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'PALPITACIONES = :palpitaciones'.
	 */
	public ProtSincopeValCard[] findWherePalpitacionesEquals(int palpitaciones) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PALPITACIONES = ? ORDER BY PALPITACIONES", new Object[] {  new Integer(palpitaciones) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'DOLOR_TORACICO = :dolorToracico'.
	 */
	public ProtSincopeValCard[] findWhereDolorToracicoEquals(int dolorToracico) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DOLOR_TORACICO = ? ORDER BY DOLOR_TORACICO", new Object[] {  new Integer(dolorToracico) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'CARDIO_ESTRUCT = :cardioEstruct'.
	 */
	public ProtSincopeValCard[] findWhereCardioEstructEquals(int cardioEstruct) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CARDIO_ESTRUCT = ? ORDER BY CARDIO_ESTRUCT", new Object[] {  new Integer(cardioEstruct) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'ANT_ISQ_ICC = :antIsqIcc'.
	 */
	public ProtSincopeValCard[] findWhereAntIsqIccEquals(int antIsqIcc) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANT_ISQ_ICC = ? ORDER BY ANT_ISQ_ICC", new Object[] {  new Integer(antIsqIcc) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'ECG_ANORMAL = :ecgAnormal'.
	 */
	public ProtSincopeValCard[] findWhereEcgAnormalEquals(int ecgAnormal) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ECG_ANORMAL = ? ORDER BY ECG_ANORMAL", new Object[] {  new Integer(ecgAnormal) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_BRADI = :hallBradi'.
	 */
	public ProtSincopeValCard[] findWhereHallBradiEquals(int hallBradi) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HALL_BRADI = ? ORDER BY HALL_BRADI", new Object[] {  new Integer(hallBradi) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_BAV = :hallBav'.
	 */
	public ProtSincopeValCard[] findWhereHallBavEquals(int hallBav) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HALL_BAV = ? ORDER BY HALL_BAV", new Object[] {  new Integer(hallBav) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_BR = :hallBr'.
	 */
	public ProtSincopeValCard[] findWhereHallBrEquals(int hallBr) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HALL_BR = ? ORDER BY HALL_BR", new Object[] {  new Integer(hallBr) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_TSV = :hallTsv'.
	 */
	public ProtSincopeValCard[] findWhereHallTsvEquals(int hallTsv) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HALL_TSV = ? ORDER BY HALL_TSV", new Object[] {  new Integer(hallTsv) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_TVNS = :hallTvns'.
	 */
	public ProtSincopeValCard[] findWhereHallTvnsEquals(int hallTvns) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HALL_TVNS = ? ORDER BY HALL_TVNS", new Object[] {  new Integer(hallTvns) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_MPDAI = :hallMpdai'.
	 */
	public ProtSincopeValCard[] findWhereHallMpdaiEquals(int hallMpdai) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HALL_MPDAI = ? ORDER BY HALL_MPDAI", new Object[] {  new Integer(hallMpdai) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_ECG = :hallEcg'.
	 */
	public ProtSincopeValCard[] findWhereHallEcgEquals(int hallEcg) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HALL_ECG = ? ORDER BY HALL_ECG", new Object[] {  new Integer(hallEcg) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_ESTEN = :hallEsten'.
	 */
	public ProtSincopeValCard[] findWhereHallEstenEquals(int hallEsten) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HALL_ESTEN = ? ORDER BY HALL_ESTEN", new Object[] {  new Integer(hallEsten) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_HTAPULM = :hallHtapulm'.
	 */
	public ProtSincopeValCard[] findWhereHallHtapulmEquals(int hallHtapulm) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HALL_HTAPULM = ? ORDER BY HALL_HTAPULM", new Object[] {  new Integer(hallHtapulm) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_EMBOL = :hallEmbol'.
	 */
	public ProtSincopeValCard[] findWhereHallEmbolEquals(int hallEmbol) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HALL_EMBOL = ? ORDER BY HALL_EMBOL", new Object[] {  new Integer(hallEmbol) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_DISEC = :hallDisec'.
	 */
	public ProtSincopeValCard[] findWhereHallDisecEquals(int hallDisec) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HALL_DISEC = ? ORDER BY HALL_DISEC", new Object[] {  new Integer(hallDisec) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_MIX = :hallMix'.
	 */
	public ProtSincopeValCard[] findWhereHallMixEquals(int hallMix) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HALL_MIX = ? ORDER BY HALL_MIX", new Object[] {  new Integer(hallMix) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ProtSincopeValCard[] findWhereComentariosEquals(String comentarios) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'OPERADOR = :operador'.
	 */
	public ProtSincopeValCard[] findWhereOperadorEquals(String operador) throws ProtSincopeValCardDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OPERADOR = ? ORDER BY OPERADOR", new Object[] { operador } );
	}
	
	/**
	 * Method 'ProtSincopeValCardDaoImpl'
	 * 
	 */
	public ProtSincopeValCardDaoImpl()
	{
	}

	public ProtSincopeValCardDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ProtSincopeValCardDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	/**
	 * Method 'ProtSincopeValCardDaoImpl'
	 * 
	 * @param userConn
	 */
	public ProtSincopeValCardDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "prot_sincope_val_card";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ProtSincopeValCard fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ProtSincopeValCard dto = new ProtSincopeValCard();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ProtSincopeValCard[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ProtSincopeValCard dto = new ProtSincopeValCard();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ProtSincopeValCard ret[] = new ProtSincopeValCard[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ProtSincopeValCard dto, ResultSet rs) throws SQLException
	{
		dto.setIdprotsincope( new Integer( rs.getInt(COLUMN_IDPROTSINCOPE) ) );
		dto.setFecha( rs.getDate(COLUMN_FECHA ) );
		dto.setSincopePico( new Integer( rs.getInt(COLUMN_SINCOPE_PICO) ) );
		if (rs.wasNull()) {
			dto.setSincopePico( null );
		}
		
		dto.setSincopeDec( new Integer( rs.getInt(COLUMN_SINCOPE_DEC) ) );
		if (rs.wasNull()) {
			dto.setSincopeDec( null );
		}
		
		dto.setAfMs( new Integer( rs.getInt(COLUMN_AF_MS) ) );
		if (rs.wasNull()) {
			dto.setAfMs( null );
		}
		
		dto.setPalpitaciones( new Integer( rs.getInt(COLUMN_PALPITACIONES) ) );
		if (rs.wasNull()) {
			dto.setPalpitaciones( null );
		}
		
		dto.setDolorToracico( new Integer( rs.getInt(COLUMN_DOLOR_TORACICO) ) );
		if (rs.wasNull()) {
			dto.setDolorToracico( null );
		}
		
		dto.setCardioEstruct( new Integer( rs.getInt(COLUMN_CARDIO_ESTRUCT) ) );
		if (rs.wasNull()) {
			dto.setCardioEstruct( null );
		}
		
		dto.setAntIsqIcc( new Integer( rs.getInt(COLUMN_ANT_ISQ_ICC) ) );
		if (rs.wasNull()) {
			dto.setAntIsqIcc( null );
		}
		
		dto.setEcgAnormal( new Integer( rs.getInt(COLUMN_ECG_ANORMAL) ) );
		if (rs.wasNull()) {
			dto.setEcgAnormal( null );
		}
		
		dto.setHallBradi( new Integer( rs.getInt(COLUMN_HALL_BRADI) ) );
		if (rs.wasNull()) {
			dto.setHallBradi( null );
		}
		
		dto.setHallBav( new Integer( rs.getInt(COLUMN_HALL_BAV) ) );
		if (rs.wasNull()) {
			dto.setHallBav( null );
		}
		
		dto.setHallBr( new Integer( rs.getInt(COLUMN_HALL_BR) ) );
		if (rs.wasNull()) {
			dto.setHallBr( null );
		}
		
		dto.setHallTsv( new Integer( rs.getInt(COLUMN_HALL_TSV) ) );
		if (rs.wasNull()) {
			dto.setHallTsv( null );
		}
		
		dto.setHallTvns( new Integer( rs.getInt(COLUMN_HALL_TVNS) ) );
		if (rs.wasNull()) {
			dto.setHallTvns( null );
		}
		
		dto.setHallMpdai( new Integer( rs.getInt(COLUMN_HALL_MPDAI) ) );
		if (rs.wasNull()) {
			dto.setHallMpdai( null );
		}
		
		dto.setHallEcg( new Integer( rs.getInt(COLUMN_HALL_ECG) ) );
		if (rs.wasNull()) {
			dto.setHallEcg( null );
		}
		
		dto.setHallEsten( new Integer( rs.getInt(COLUMN_HALL_ESTEN) ) );
		if (rs.wasNull()) {
			dto.setHallEsten( null );
		}
		
		dto.setHallHtapulm( new Integer( rs.getInt(COLUMN_HALL_HTAPULM) ) );
		if (rs.wasNull()) {
			dto.setHallHtapulm( null );
		}
		
		dto.setHallEmbol( new Integer( rs.getInt(COLUMN_HALL_EMBOL) ) );
		if (rs.wasNull()) {
			dto.setHallEmbol( null );
		}
		
		dto.setHallDisec( new Integer( rs.getInt(COLUMN_HALL_DISEC) ) );
		if (rs.wasNull()) {
			dto.setHallDisec( null );
		}
		
		dto.setHallMix( new Integer( rs.getInt(COLUMN_HALL_MIX) ) );
		if (rs.wasNull()) {
			dto.setHallMix( null );
		}
		
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setOperador( rs.getString( COLUMN_OPERADOR ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ProtSincopeValCard dto)
	{
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the specified arbitrary SQL statement
	 */
	public ProtSincopeValCard[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProtSincopeValCardDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProtSincopeValCardDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the specified arbitrary SQL statement
	 */
	public ProtSincopeValCard[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProtSincopeValCardDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProtSincopeValCardDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
