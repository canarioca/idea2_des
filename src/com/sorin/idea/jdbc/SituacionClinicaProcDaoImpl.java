/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.util.UtilCodifi;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SituacionClinicaProcDaoImpl extends AbstractDAO implements SituacionClinicaProcDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDSITCLIN, RITMO, RITMO2, CONDUCAV, CONDUCAV2, QRS, QRS2, ANCHURAQRS, FEVI, FUNCIONVENTRICULAR, NYHA, CARDIOPATIA, AEVOLUCION, OTRA, REVASC, INFPREVIO, ANIO, LOCALIZACION, ARRITMIAS, EEF, ETIOLOGIA, HTA, DISLIPEMIA, DIABETES, TABAQUISMO, INGALCOHOLICA, ACV, AIT, EPOC, SAHS, TIPOSAHS, AHI, CPAP, INSRENAL, TIPOINSRENAL, NEOPLASIA, TIPONEOPLASIA, AFECTIROIDEA, ANTFA, HIPERTENSION, MUERTESUBITA, HIPERCOLEST, COMENTARIOS, FECHA, NEUROMEDIADOS, TRASPLANTECARDIACO, SINCOPE, PARADACARDIACA, AI, AI2, ENFART, FLUTTER, ALERGIAS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDSITCLIN, RITMO, RITMO2, CONDUCAV, CONDUCAV2, QRS, QRS2, ANCHURAQRS, FEVI, FUNCIONVENTRICULAR, NYHA, CARDIOPATIA, AEVOLUCION, OTRA, REVASC, INFPREVIO, ANIO, LOCALIZACION, ARRITMIAS, EEF, ETIOLOGIA, HTA, DISLIPEMIA, DIABETES, TABAQUISMO, INGALCOHOLICA, ACV, AIT, EPOC, SAHS, TIPOSAHS, AHI, CPAP, INSRENAL, TIPOINSRENAL, NEOPLASIA, TIPONEOPLASIA, AFECTIROIDEA, ANTFA, HIPERTENSION, MUERTESUBITA, HIPERCOLEST, COMENTARIOS, FECHA, NEUROMEDIADOS, TRASPLANTECARDIACO, SINCOPE, PARADACARDIACA, AI, AI2, ENFART, FLUTTER, ALERGIAS ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDSITCLIN = ?, RITMO = ?, RITMO2 = ?, CONDUCAV = ?, CONDUCAV2 = ?, QRS = ?, QRS2 = ?, ANCHURAQRS = ?, FEVI = ?, FUNCIONVENTRICULAR = ?, NYHA = ?, CARDIOPATIA = ?, AEVOLUCION = ?, OTRA = ?, REVASC = ?, INFPREVIO = ?, ANIO = ?, LOCALIZACION = ?, ARRITMIAS = ?, EEF = ?, ETIOLOGIA = ?, HTA = ?, DISLIPEMIA = ?, DIABETES = ?, TABAQUISMO = ?, INGALCOHOLICA = ?, ACV = ?, AIT = ?, EPOC = ?, SAHS = ?, TIPOSAHS = ?, AHI = ?, CPAP = ?, INSRENAL = ?, TIPOINSRENAL = ?, NEOPLASIA = ?, TIPONEOPLASIA = ?, AFECTIROIDEA = ?, ANTFA = ?, HIPERTENSION = ?, MUERTESUBITA = ?, HIPERCOLEST = ?, COMENTARIOS = ?, FECHA = ?, NEUROMEDIADOS = ?, TRASPLANTECARDIACO = ?, SINCOPE = ?, PARADACARDIACA = ?, AI = ?, AI2 = ?, ENFART = ?, FLUTTER = ?, ALERGIAS = ? WHERE IDSITCLIN = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDSITCLIN = ?";

	/** 
	 * Index of column IDSITCLIN
	 */
	protected static final int COLUMN_IDSITCLIN = 1;

	/** 
	 * Index of column RITMO
	 */
	protected static final int COLUMN_RITMO = 2;

	/** 
	 * Index of column RITMO2
	 */
	protected static final int COLUMN_RITMO2 = 3;

	/** 
	 * Index of column CONDUCAV
	 */
	protected static final int COLUMN_CONDUCAV = 4;

	/** 
	 * Index of column CONDUCAV2
	 */
	protected static final int COLUMN_CONDUCAV2 = 5;

	/** 
	 * Index of column QRS
	 */
	protected static final int COLUMN_QRS = 6;

	/** 
	 * Index of column QRS2
	 */
	protected static final int COLUMN_QRS2 = 7;

	/** 
	 * Index of column ANCHURAQRS
	 */
	protected static final int COLUMN_ANCHURAQRS = 8;

	/** 
	 * Index of column FEVI
	 */
	protected static final int COLUMN_FEVI = 9;

	/** 
	 * Index of column FUNCIONVENTRICULAR
	 */
	protected static final int COLUMN_FUNCIONVENTRICULAR = 10;

	/** 
	 * Index of column NYHA
	 */
	protected static final int COLUMN_NYHA = 11;

	/** 
	 * Index of column CARDIOPATIA
	 */
	protected static final int COLUMN_CARDIOPATIA = 12;

	/** 
	 * Index of column AEVOLUCION
	 */
	protected static final int COLUMN_AEVOLUCION = 13;

	/** 
	 * Index of column OTRA
	 */
	protected static final int COLUMN_OTRA = 14;

	/** 
	 * Index of column REVASC
	 */
	protected static final int COLUMN_REVASC = 15;

	/** 
	 * Index of column INFPREVIO
	 */
	protected static final int COLUMN_INFPREVIO = 16;

	/** 
	 * Index of column ANIO
	 */
	protected static final int COLUMN_ANIO = 17;

	/** 
	 * Index of column LOCALIZACION
	 */
	protected static final int COLUMN_LOCALIZACION = 18;

	/** 
	 * Index of column ARRITMIAS
	 */
	protected static final int COLUMN_ARRITMIAS = 19;

	/** 
	 * Index of column EEF
	 */
	protected static final int COLUMN_EEF = 20;

	/** 
	 * Index of column ETIOLOGIA
	 */
	protected static final int COLUMN_ETIOLOGIA = 21;

	/** 
	 * Index of column HTA
	 */
	protected static final int COLUMN_HTA = 22;

	/** 
	 * Index of column DISLIPEMIA
	 */
	protected static final int COLUMN_DISLIPEMIA = 23;

	/** 
	 * Index of column DIABETES
	 */
	protected static final int COLUMN_DIABETES = 24;

	/** 
	 * Index of column TABAQUISMO
	 */
	protected static final int COLUMN_TABAQUISMO = 25;

	/** 
	 * Index of column INGALCOHOLICA
	 */
	protected static final int COLUMN_INGALCOHOLICA = 26;

	/** 
	 * Index of column ACV
	 */
	protected static final int COLUMN_ACV = 27;

	/** 
	 * Index of column AIT
	 */
	protected static final int COLUMN_AIT = 28;

	/** 
	 * Index of column EPOC
	 */
	protected static final int COLUMN_EPOC = 29;

	/** 
	 * Index of column SAHS
	 */
	protected static final int COLUMN_SAHS = 30;

	/** 
	 * Index of column TIPOSAHS
	 */
	protected static final int COLUMN_TIPOSAHS = 31;

	/** 
	 * Index of column AHI
	 */
	protected static final int COLUMN_AHI = 32;

	/** 
	 * Index of column CPAP
	 */
	protected static final int COLUMN_CPAP = 33;

	/** 
	 * Index of column INSRENAL
	 */
	protected static final int COLUMN_INSRENAL = 34;

	/** 
	 * Index of column TIPOINSRENAL
	 */
	protected static final int COLUMN_TIPOINSRENAL = 35;

	/** 
	 * Index of column NEOPLASIA
	 */
	protected static final int COLUMN_NEOPLASIA = 36;

	/** 
	 * Index of column TIPONEOPLASIA
	 */
	protected static final int COLUMN_TIPONEOPLASIA = 37;

	/** 
	 * Index of column AFECTIROIDEA
	 */
	protected static final int COLUMN_AFECTIROIDEA = 38;

	/** 
	 * Index of column ANTFA
	 */
	protected static final int COLUMN_ANTFA = 39;

	/** 
	 * Index of column HIPERTENSION
	 */
	protected static final int COLUMN_HIPERTENSION = 40;

	/** 
	 * Index of column MUERTESUBITA
	 */
	protected static final int COLUMN_MUERTESUBITA = 41;

	/** 
	 * Index of column HIPERCOLEST
	 */
	protected static final int COLUMN_HIPERCOLEST = 42;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 43;

	/** 
	 * Index of column FECHA
	 */
	protected static final int COLUMN_FECHA = 44;

	/** 
	 * Index of column NEUROMEDIADOS
	 */
	protected static final int COLUMN_NEUROMEDIADOS = 45;

	/** 
	 * Index of column TRASPLANTECARDIACO
	 */
	protected static final int COLUMN_TRASPLANTECARDIACO = 46;

	/** 
	 * Index of column SINCOPE
	 */
	protected static final int COLUMN_SINCOPE = 47;

	/** 
	 * Index of column PARADACARDIACA
	 */
	protected static final int COLUMN_PARADACARDIACA = 48;

	/** 
	 * Index of column AI
	 */
	protected static final int COLUMN_AI = 49;

	/** 
	 * Index of column AI2
	 */
	protected static final int COLUMN_AI2 = 50;

	/** 
	 * Index of column ENFART
	 */
	protected static final int COLUMN_ENFART = 51;

	/** 
	 * Index of column FLUTTER
	 */
	protected static final int COLUMN_FLUTTER = 52;

	/** 
	 * Index of column ALERGIAS
	 */
	protected static final int COLUMN_ALERGIAS = 53;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 53;

	/** 
	 * Index of primary-key column IDSITCLIN
	 */
	protected static final int PK_COLUMN_IDSITCLIN = 1;

	/** 
	 * Inserts a new row in the situacion_clinica_proc table.
	 */
	public SituacionClinicaProcPk insert(SituacionClinicaProc dto) throws SituacionClinicaProcDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdsitclin() != null) {
				stmt.setInt( index++, dto.getIdsitclin().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getRitmo() != null) {
				stmt.setInt( index++, dto.getRitmo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getRitmo2() != null) {
				stmt.setInt( index++, dto.getRitmo2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getConducav() != null) {
				stmt.setInt( index++, dto.getConducav().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getConducav2() != null) {
				stmt.setInt( index++, dto.getConducav2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getQrs() != null) {
				stmt.setInt( index++, dto.getQrs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getQrs2() != null) {
				stmt.setInt( index++, dto.getQrs2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAnchuraqrs() );
			stmt.setString( index++, dto.getFevi() );
			if (dto.getFuncionventricular() != null) {
				stmt.setInt( index++, dto.getFuncionventricular().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNyha() != null) {
				stmt.setInt( index++, dto.getNyha().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCardiopatia() != null) {
				stmt.setInt( index++, dto.getCardiopatia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAevolucion() );
			stmt.setString( index++, dto.getOtra() );
			if (dto.getRevasc() != null) {
				stmt.setShort( index++, dto.getRevasc().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getInfprevio() != null) {
				stmt.setShort( index++, dto.getInfprevio().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getAnio() );
			if (dto.getLocalizacion() != null) {
				stmt.setInt( index++, dto.getLocalizacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getArritmias() != null) {
				stmt.setInt( index++, dto.getArritmias().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEef() != null) {
				stmt.setInt( index++, dto.getEef().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEtiologia() != null) {
				stmt.setInt( index++, dto.getEtiologia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHta() != null) {
				stmt.setShort( index++, dto.getHta().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getDislipemia() != null) {
				stmt.setShort( index++, dto.getDislipemia().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getDiabetes() != null) {
				stmt.setShort( index++, dto.getDiabetes().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTabaquismo() != null) {
				stmt.setShort( index++, dto.getTabaquismo().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getIngalcoholica() != null) {
				stmt.setShort( index++, dto.getIngalcoholica().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getAcv() != null) {
				stmt.setShort( index++, dto.getAcv().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getAit() != null) {
				stmt.setShort( index++, dto.getAit().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getEpoc() != null) {
				stmt.setShort( index++, dto.getEpoc().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getSahs() != null) {
				stmt.setShort( index++, dto.getSahs().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTiposahs() != null) {
				stmt.setInt( index++, dto.getTiposahs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAhi() );
			if (dto.getCpap() != null) {
				stmt.setShort( index++, dto.getCpap().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getInsrenal() != null) {
				stmt.setShort( index++, dto.getInsrenal().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTipoinsrenal() != null) {
				stmt.setInt( index++, dto.getTipoinsrenal().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNeoplasia() != null) {
				stmt.setShort( index++, dto.getNeoplasia().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getTiponeoplasia() );
			if (dto.getAfectiroidea() != null) {
				stmt.setInt( index++, dto.getAfectiroidea().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAntfa() != null) {
				stmt.setShort( index++, dto.getAntfa().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getHipertension() != null) {
				stmt.setShort( index++, dto.getHipertension().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getMuertesubita() != null) {
				stmt.setShort( index++, dto.getMuertesubita().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getHipercolest() != null) {
				stmt.setShort( index++, dto.getHipercolest().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getComentarios() );
			stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			if (dto.getNeuromediados() != null) {
				stmt.setInt( index++, dto.getNeuromediados().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTrasplantecardiaco() != null) {
				stmt.setShort( index++, dto.getTrasplantecardiaco().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getSincope() != null) {
				stmt.setShort( index++, dto.getSincope().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getParadacardiaca() != null) {
				stmt.setShort( index++, dto.getParadacardiaca().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getAi() );
			if (dto.getAi2() != null) {
				stmt.setInt( index++, dto.getAi2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEnfart() != null) {
				stmt.setInt( index++, dto.getEnfart().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getFlutter() != null) {
				stmt.setShort( index++, dto.getFlutter().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
			stmt.setString( index++, dto.getAlergias() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdsitclin( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SituacionClinicaProcDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the situacion_clinica_proc table.
	 */
	public void update(SituacionClinicaProcPk pk, SituacionClinicaProc dto) throws SituacionClinicaProcDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdsitclin() != null) {
				stmt.setInt( index++, dto.getIdsitclin().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getRitmo() != null) {
				stmt.setInt( index++, dto.getRitmo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getRitmo2() != null) {
				stmt.setInt( index++, dto.getRitmo2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getConducav() != null) {
				stmt.setInt( index++, dto.getConducav().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getConducav2() != null) {
				stmt.setInt( index++, dto.getConducav2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getQrs() != null) {
				stmt.setInt( index++, dto.getQrs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getQrs2() != null) {
				stmt.setInt( index++, dto.getQrs2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAnchuraqrs() );
			stmt.setString( index++, dto.getFevi() );
			if (dto.getFuncionventricular() != null) {
				stmt.setInt( index++, dto.getFuncionventricular().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNyha() != null) {
				stmt.setInt( index++, dto.getNyha().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCardiopatia() != null) {
				stmt.setInt( index++, dto.getCardiopatia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAevolucion() );
			stmt.setString( index++, dto.getOtra() );
			if (dto.getRevasc() != null) {
				stmt.setShort( index++, dto.getRevasc().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getInfprevio() != null) {
				stmt.setShort( index++, dto.getInfprevio().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getAnio() );
			if (dto.getLocalizacion() != null) {
				stmt.setInt( index++, dto.getLocalizacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getArritmias() != null) {
				stmt.setInt( index++, dto.getArritmias().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEef() != null) {
				stmt.setInt( index++, dto.getEef().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEtiologia() != null) {
				stmt.setInt( index++, dto.getEtiologia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHta() != null) {
				stmt.setShort( index++, dto.getHta().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getDislipemia() != null) {
				stmt.setShort( index++, dto.getDislipemia().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getDiabetes() != null) {
				stmt.setShort( index++, dto.getDiabetes().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTabaquismo() != null) {
				stmt.setShort( index++, dto.getTabaquismo().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getIngalcoholica() != null) {
				stmt.setShort( index++, dto.getIngalcoholica().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getAcv() != null) {
				stmt.setShort( index++, dto.getAcv().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getAit() != null) {
				stmt.setShort( index++, dto.getAit().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getEpoc() != null) {
				stmt.setShort( index++, dto.getEpoc().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getSahs() != null) {
				stmt.setShort( index++, dto.getSahs().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTiposahs() != null) {
				stmt.setInt( index++, dto.getTiposahs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAhi() );
			if (dto.getCpap() != null) {
				stmt.setShort( index++, dto.getCpap().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getInsrenal() != null) {
				stmt.setShort( index++, dto.getInsrenal().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTipoinsrenal() != null) {
				stmt.setInt( index++, dto.getTipoinsrenal().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNeoplasia() != null) {
				stmt.setShort( index++, dto.getNeoplasia().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getTiponeoplasia() );
			if (dto.getAfectiroidea() != null) {
				stmt.setInt( index++, dto.getAfectiroidea().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAntfa() != null) {
				stmt.setShort( index++, dto.getAntfa().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getHipertension() != null) {
				stmt.setShort( index++, dto.getHipertension().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getMuertesubita() != null) {
				stmt.setShort( index++, dto.getMuertesubita().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getHipercolest() != null) {
				stmt.setShort( index++, dto.getHipercolest().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getComentarios() );
			stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			if (dto.getNeuromediados() != null) {
				stmt.setInt( index++, dto.getNeuromediados().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTrasplantecardiaco() != null) {
				stmt.setShort( index++, dto.getTrasplantecardiaco().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getSincope() != null) {
				stmt.setShort( index++, dto.getSincope().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getParadacardiaca() != null) {
				stmt.setShort( index++, dto.getParadacardiaca().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getAi() );
			if (dto.getAi2() != null) {
				stmt.setInt( index++, dto.getAi2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEnfart() != null) {
				stmt.setInt( index++, dto.getEnfart().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getFlutter() != null) {
				stmt.setShort( index++, dto.getFlutter().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
			stmt.setString( index++, dto.getAlergias() );
		
			if (pk.getIdsitclin() != null) {
				stmt.setInt( 54, pk.getIdsitclin().intValue() );
			} else {
				stmt.setNull(54, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SituacionClinicaProcDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the situacion_clinica_proc table.
	 */
	public void delete(SituacionClinicaProcPk pk) throws SituacionClinicaProcDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdsitclin() != null) {
				stmt.setInt( 1, pk.getIdsitclin().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SituacionClinicaProcDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the situacion_clinica_proc table that matches the specified primary-key value.
	 */
	public SituacionClinicaProc findByPrimaryKey(SituacionClinicaProcPk pk) throws SituacionClinicaProcDaoException
	{
		return findByPrimaryKey( pk.getIdsitclin() );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'IDSITCLIN = :idsitclin'.
	 */
	public SituacionClinicaProc findByPrimaryKey(Integer idsitclin) throws SituacionClinicaProcDaoException
	{
		SituacionClinicaProc ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDSITCLIN = ?", new Object[] { idsitclin } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria ''.
	 */
	public SituacionClinicaProc[] findAll() throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDSITCLIN", null );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'IDSITCLIN = :idsitclin'.
	 */
	public SituacionClinicaProc[] findWhereIdsitclinEquals(int idsitclin) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDSITCLIN = ? ORDER BY IDSITCLIN", new Object[] {  new Integer(idsitclin) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'RITMO = :ritmo'.
	 */
	public SituacionClinicaProc[] findWhereRitmoEquals(int ritmo) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RITMO = ? ORDER BY RITMO", new Object[] {  new Integer(ritmo) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'RITMO2 = :ritmo2'.
	 */
	public SituacionClinicaProc[] findWhereRitmo2Equals(int ritmo2) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RITMO2 = ? ORDER BY RITMO2", new Object[] {  new Integer(ritmo2) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'CONDUCAV = :conducav'.
	 */
	public SituacionClinicaProc[] findWhereConducavEquals(int conducav) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONDUCAV = ? ORDER BY CONDUCAV", new Object[] {  new Integer(conducav) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'CONDUCAV2 = :conducav2'.
	 */
	public SituacionClinicaProc[] findWhereConducav2Equals(int conducav2) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONDUCAV2 = ? ORDER BY CONDUCAV2", new Object[] {  new Integer(conducav2) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'QRS = :qrs'.
	 */
	public SituacionClinicaProc[] findWhereQrsEquals(int qrs) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE QRS = ? ORDER BY QRS", new Object[] {  new Integer(qrs) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'QRS2 = :qrs2'.
	 */
	public SituacionClinicaProc[] findWhereQrs2Equals(int qrs2) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE QRS2 = ? ORDER BY QRS2", new Object[] {  new Integer(qrs2) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'ANCHURAQRS = :anchuraqrs'.
	 */
	public SituacionClinicaProc[] findWhereAnchuraqrsEquals(String anchuraqrs) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANCHURAQRS = ? ORDER BY ANCHURAQRS", new Object[] { anchuraqrs } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'FEVI = :fevi'.
	 */
	public SituacionClinicaProc[] findWhereFeviEquals(String fevi) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FEVI = ? ORDER BY FEVI", new Object[] { fevi } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'FUNCIONVENTRICULAR = :funcionventricular'.
	 */
	public SituacionClinicaProc[] findWhereFuncionventricularEquals(int funcionventricular) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FUNCIONVENTRICULAR = ? ORDER BY FUNCIONVENTRICULAR", new Object[] {  new Integer(funcionventricular) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'NYHA = :nyha'.
	 */
	public SituacionClinicaProc[] findWhereNyhaEquals(int nyha) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NYHA = ? ORDER BY NYHA", new Object[] {  new Integer(nyha) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'CARDIOPATIA = :cardiopatia'.
	 */
	public SituacionClinicaProc[] findWhereCardiopatiaEquals(int cardiopatia) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CARDIOPATIA = ? ORDER BY CARDIOPATIA", new Object[] {  new Integer(cardiopatia) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'AEVOLUCION = :aevolucion'.
	 */
	public SituacionClinicaProc[] findWhereAevolucionEquals(String aevolucion) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AEVOLUCION = ? ORDER BY AEVOLUCION", new Object[] { aevolucion } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'OTRA = :otra'.
	 */
	public SituacionClinicaProc[] findWhereOtraEquals(String otra) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OTRA = ? ORDER BY OTRA", new Object[] { otra } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'REVASC = :revasc'.
	 */
	public SituacionClinicaProc[] findWhereRevascEquals(short revasc) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REVASC = ? ORDER BY REVASC", new Object[] {  new Short(revasc) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'INFPREVIO = :infprevio'.
	 */
	public SituacionClinicaProc[] findWhereInfprevioEquals(short infprevio) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INFPREVIO = ? ORDER BY INFPREVIO", new Object[] {  new Short(infprevio) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'ANIO = :anio'.
	 */
	public SituacionClinicaProc[] findWhereAnioEquals(String anio) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANIO = ? ORDER BY ANIO", new Object[] { anio } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'LOCALIZACION = :localizacion'.
	 */
	public SituacionClinicaProc[] findWhereLocalizacionEquals(int localizacion) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOCALIZACION = ? ORDER BY LOCALIZACION", new Object[] {  new Integer(localizacion) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'ARRITMIAS = :arritmias'.
	 */
	public SituacionClinicaProc[] findWhereArritmiasEquals(int arritmias) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ARRITMIAS = ? ORDER BY ARRITMIAS", new Object[] {  new Integer(arritmias) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'EEF = :eef'.
	 */
	public SituacionClinicaProc[] findWhereEefEquals(int eef) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EEF = ? ORDER BY EEF", new Object[] {  new Integer(eef) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'ETIOLOGIA = :etiologia'.
	 */
	public SituacionClinicaProc[] findWhereEtiologiaEquals(int etiologia) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ETIOLOGIA = ? ORDER BY ETIOLOGIA", new Object[] {  new Integer(etiologia) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'HTA = :hta'.
	 */
	public SituacionClinicaProc[] findWhereHtaEquals(short hta) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HTA = ? ORDER BY HTA", new Object[] {  new Short(hta) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'DISLIPEMIA = :dislipemia'.
	 */
	public SituacionClinicaProc[] findWhereDislipemiaEquals(short dislipemia) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DISLIPEMIA = ? ORDER BY DISLIPEMIA", new Object[] {  new Short(dislipemia) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'DIABETES = :diabetes'.
	 */
	public SituacionClinicaProc[] findWhereDiabetesEquals(short diabetes) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DIABETES = ? ORDER BY DIABETES", new Object[] {  new Short(diabetes) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'TABAQUISMO = :tabaquismo'.
	 */
	public SituacionClinicaProc[] findWhereTabaquismoEquals(short tabaquismo) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TABAQUISMO = ? ORDER BY TABAQUISMO", new Object[] {  new Short(tabaquismo) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'INGALCOHOLICA = :ingalcoholica'.
	 */
	public SituacionClinicaProc[] findWhereIngalcoholicaEquals(short ingalcoholica) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INGALCOHOLICA = ? ORDER BY INGALCOHOLICA", new Object[] {  new Short(ingalcoholica) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'ACV = :acv'.
	 */
	public SituacionClinicaProc[] findWhereAcvEquals(short acv) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACV = ? ORDER BY ACV", new Object[] {  new Short(acv) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'AIT = :ait'.
	 */
	public SituacionClinicaProc[] findWhereAitEquals(short ait) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AIT = ? ORDER BY AIT", new Object[] {  new Short(ait) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'EPOC = :epoc'.
	 */
	public SituacionClinicaProc[] findWhereEpocEquals(short epoc) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EPOC = ? ORDER BY EPOC", new Object[] {  new Short(epoc) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'SAHS = :sahs'.
	 */
	public SituacionClinicaProc[] findWhereSahsEquals(short sahs) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SAHS = ? ORDER BY SAHS", new Object[] {  new Short(sahs) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'TIPOSAHS = :tiposahs'.
	 */
	public SituacionClinicaProc[] findWhereTiposahsEquals(int tiposahs) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPOSAHS = ? ORDER BY TIPOSAHS", new Object[] {  new Integer(tiposahs) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'AHI = :ahi'.
	 */
	public SituacionClinicaProc[] findWhereAhiEquals(String ahi) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AHI = ? ORDER BY AHI", new Object[] { ahi } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'CPAP = :cpap'.
	 */
	public SituacionClinicaProc[] findWhereCpapEquals(short cpap) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CPAP = ? ORDER BY CPAP", new Object[] {  new Short(cpap) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'INSRENAL = :insrenal'.
	 */
	public SituacionClinicaProc[] findWhereInsrenalEquals(short insrenal) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INSRENAL = ? ORDER BY INSRENAL", new Object[] {  new Short(insrenal) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'TIPOINSRENAL = :tipoinsrenal'.
	 */
	public SituacionClinicaProc[] findWhereTipoinsrenalEquals(int tipoinsrenal) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPOINSRENAL = ? ORDER BY TIPOINSRENAL", new Object[] {  new Integer(tipoinsrenal) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'NEOPLASIA = :neoplasia'.
	 */
	public SituacionClinicaProc[] findWhereNeoplasiaEquals(short neoplasia) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NEOPLASIA = ? ORDER BY NEOPLASIA", new Object[] {  new Short(neoplasia) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'TIPONEOPLASIA = :tiponeoplasia'.
	 */
	public SituacionClinicaProc[] findWhereTiponeoplasiaEquals(String tiponeoplasia) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPONEOPLASIA = ? ORDER BY TIPONEOPLASIA", new Object[] { tiponeoplasia } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'AFECTIROIDEA = :afectiroidea'.
	 */
	public SituacionClinicaProc[] findWhereAfectiroideaEquals(int afectiroidea) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AFECTIROIDEA = ? ORDER BY AFECTIROIDEA", new Object[] {  new Integer(afectiroidea) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'ANTFA = :antfa'.
	 */
	public SituacionClinicaProc[] findWhereAntfaEquals(short antfa) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANTFA = ? ORDER BY ANTFA", new Object[] {  new Short(antfa) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'HIPERTENSION = :hipertension'.
	 */
	public SituacionClinicaProc[] findWhereHipertensionEquals(short hipertension) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HIPERTENSION = ? ORDER BY HIPERTENSION", new Object[] {  new Short(hipertension) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'MUERTESUBITA = :muertesubita'.
	 */
	public SituacionClinicaProc[] findWhereMuertesubitaEquals(short muertesubita) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MUERTESUBITA = ? ORDER BY MUERTESUBITA", new Object[] {  new Short(muertesubita) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'HIPERCOLEST = :hipercolest'.
	 */
	public SituacionClinicaProc[] findWhereHipercolestEquals(short hipercolest) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HIPERCOLEST = ? ORDER BY HIPERCOLEST", new Object[] {  new Short(hipercolest) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public SituacionClinicaProc[] findWhereComentariosEquals(String comentarios) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'FECHA = :fecha'.
	 */
	public SituacionClinicaProc[] findWhereFechaEquals(Date fecha) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA = ? ORDER BY FECHA", new Object[] { fecha==null ? null : new java.sql.Date( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'NEUROMEDIADOS = :neuromediados'.
	 */
	public SituacionClinicaProc[] findWhereNeuromediadosEquals(int neuromediados) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NEUROMEDIADOS = ? ORDER BY NEUROMEDIADOS", new Object[] {  new Integer(neuromediados) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'TRASPLANTECARDIACO = :trasplantecardiaco'.
	 */
	public SituacionClinicaProc[] findWhereTrasplantecardiacoEquals(short trasplantecardiaco) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TRASPLANTECARDIACO = ? ORDER BY TRASPLANTECARDIACO", new Object[] {  new Short(trasplantecardiaco) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'SINCOPE = :sincope'.
	 */
	public SituacionClinicaProc[] findWhereSincopeEquals(short sincope) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SINCOPE = ? ORDER BY SINCOPE", new Object[] {  new Short(sincope) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'PARADACARDIACA = :paradacardiaca'.
	 */
	public SituacionClinicaProc[] findWhereParadacardiacaEquals(short paradacardiaca) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARADACARDIACA = ? ORDER BY PARADACARDIACA", new Object[] {  new Short(paradacardiaca) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'AI = :ai'.
	 */
	public SituacionClinicaProc[] findWhereAiEquals(String ai) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AI = ? ORDER BY AI", new Object[] { ai } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'AI2 = :ai2'.
	 */
	public SituacionClinicaProc[] findWhereAi2Equals(int ai2) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AI2 = ? ORDER BY AI2", new Object[] {  new Integer(ai2) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the criteria 'ENFART = :enfart'.
	 */
	public SituacionClinicaProc[] findWhereEnfartEquals(int enfart) throws SituacionClinicaProcDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ENFART = ? ORDER BY ENFART", new Object[] {  new Integer(enfart) } );
	}

	/**
	 * Method 'SituacionClinicaProcDaoImpl'
	 * 
	 */
	public SituacionClinicaProcDaoImpl()
	{
	}

	/**
	 * Method 'SituacionClinicaProcDaoImpl'
	 * 
	 * @param userConn
	 */
	public SituacionClinicaProcDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}
	public SituacionClinicaProcDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public SituacionClinicaProcDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.situacion_clinica_proc";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SituacionClinicaProc fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SituacionClinicaProc dto = new SituacionClinicaProc();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SituacionClinicaProc[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SituacionClinicaProc dto = new SituacionClinicaProc();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SituacionClinicaProc ret[] = new SituacionClinicaProc[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SituacionClinicaProc dto, ResultSet rs) throws SQLException
	{
		dto.setIdsitclin( new Integer( rs.getInt(COLUMN_IDSITCLIN) ) );
		dto.setRitmo( new Integer( rs.getInt(COLUMN_RITMO) ) );
		if (rs.wasNull()) {
			dto.setRitmo( null );
		}
		
		dto.setRitmo2( new Integer( rs.getInt(COLUMN_RITMO2) ) );
		if (rs.wasNull()) {
			dto.setRitmo2( null );
		}
		
		dto.setConducav( new Integer( rs.getInt(COLUMN_CONDUCAV) ) );
		if (rs.wasNull()) {
			dto.setConducav( null );
		}
		
		dto.setConducav2( new Integer( rs.getInt(COLUMN_CONDUCAV2) ) );
		if (rs.wasNull()) {
			dto.setConducav2( null );
		}
		
		dto.setQrs( new Integer( rs.getInt(COLUMN_QRS) ) );
		if (rs.wasNull()) {
			dto.setQrs( null );
		}
		
		dto.setQrs2( new Integer( rs.getInt(COLUMN_QRS2) ) );
		if (rs.wasNull()) {
			dto.setQrs2( null );
		}
		
		dto.setAnchuraqrs( rs.getString( COLUMN_ANCHURAQRS ) );
		dto.setFevi( rs.getString( COLUMN_FEVI ) );
		dto.setFuncionventricular( new Integer( rs.getInt(COLUMN_FUNCIONVENTRICULAR) ) );
		if (rs.wasNull()) {
			dto.setFuncionventricular( null );
		}
		
		dto.setNyha( new Integer( rs.getInt(COLUMN_NYHA) ) );
		if (rs.wasNull()) {
			dto.setNyha( null );
		}
		
		dto.setCardiopatia( new Integer( rs.getInt(COLUMN_CARDIOPATIA) ) );
		if (rs.wasNull()) {
			dto.setCardiopatia( null );
		}
		
		dto.setAevolucion( rs.getString( COLUMN_AEVOLUCION ) );
		dto.setOtra( rs.getString( COLUMN_OTRA ) );
		dto.setRevasc( new Short( rs.getShort(COLUMN_REVASC) ) );
		if (rs.wasNull()) {
			dto.setRevasc( null );
		}
		
		dto.setInfprevio( new Short( rs.getShort(COLUMN_INFPREVIO) ) );
		if (rs.wasNull()) {
			dto.setInfprevio( null );
		}
		
		dto.setAnio( rs.getString( COLUMN_ANIO ) );
		dto.setLocalizacion( new Integer( rs.getInt(COLUMN_LOCALIZACION) ) );
		if (rs.wasNull()) {
			dto.setLocalizacion( null );
		}
		
		dto.setArritmias( new Integer( rs.getInt(COLUMN_ARRITMIAS) ) );
		if (rs.wasNull()) {
			dto.setArritmias( null );
		}
		
		dto.setEef( new Integer( rs.getInt(COLUMN_EEF) ) );
		if (rs.wasNull()) {
			dto.setEef( null );
		}
		
		dto.setEtiologia( new Integer( rs.getInt(COLUMN_ETIOLOGIA) ) );
		if (rs.wasNull()) {
			dto.setEtiologia( null );
		}
		
		dto.setHta( new Short( rs.getShort(COLUMN_HTA) ) );
		if (rs.wasNull()) {
			dto.setHta( null );
		}
		
		dto.setDislipemia( new Short( rs.getShort(COLUMN_DISLIPEMIA) ) );
		if (rs.wasNull()) {
			dto.setDislipemia( null );
		}
		
		dto.setDiabetes( new Short( rs.getShort(COLUMN_DIABETES) ) );
		if (rs.wasNull()) {
			dto.setDiabetes( null );
		}
		
		dto.setTabaquismo( new Short( rs.getShort(COLUMN_TABAQUISMO) ) );
		if (rs.wasNull()) {
			dto.setTabaquismo( null );
		}
		
		dto.setIngalcoholica( new Short( rs.getShort(COLUMN_INGALCOHOLICA) ) );
		if (rs.wasNull()) {
			dto.setIngalcoholica( null );
		}
		
		dto.setAcv( new Short( rs.getShort(COLUMN_ACV) ) );
		if (rs.wasNull()) {
			dto.setAcv( null );
		}
		
		dto.setAit( new Short( rs.getShort(COLUMN_AIT) ) );
		if (rs.wasNull()) {
			dto.setAit( null );
		}
		
		dto.setEpoc( new Short( rs.getShort(COLUMN_EPOC) ) );
		if (rs.wasNull()) {
			dto.setEpoc( null );
		}
		
		dto.setSahs( new Short( rs.getShort(COLUMN_SAHS) ) );
		if (rs.wasNull()) {
			dto.setSahs( null );
		}
		
		dto.setTiposahs( new Integer( rs.getInt(COLUMN_TIPOSAHS) ) );
		if (rs.wasNull()) {
			dto.setTiposahs( null );
		}
		
		dto.setAhi( rs.getString( COLUMN_AHI ) );
		dto.setCpap( new Short( rs.getShort(COLUMN_CPAP) ) );
		if (rs.wasNull()) {
			dto.setCpap( null );
		}
		
		dto.setInsrenal( new Short( rs.getShort(COLUMN_INSRENAL) ) );
		if (rs.wasNull()) {
			dto.setInsrenal( null );
		}
		
		dto.setTipoinsrenal( new Integer( rs.getInt(COLUMN_TIPOINSRENAL) ) );
		if (rs.wasNull()) {
			dto.setTipoinsrenal( null );
		}
		
		dto.setNeoplasia( new Short( rs.getShort(COLUMN_NEOPLASIA) ) );
		if (rs.wasNull()) {
			dto.setNeoplasia( null );
		}
		
		dto.setTiponeoplasia( rs.getString( COLUMN_TIPONEOPLASIA ) );
		dto.setAfectiroidea( new Integer( rs.getInt(COLUMN_AFECTIROIDEA) ) );
		if (rs.wasNull()) {
			dto.setAfectiroidea( null );
		}
		
		dto.setAntfa( new Short( rs.getShort(COLUMN_ANTFA) ) );
		if (rs.wasNull()) {
			dto.setAntfa( null );
		}
		
		dto.setHipertension( new Short( rs.getShort(COLUMN_HIPERTENSION) ) );
		if (rs.wasNull()) {
			dto.setHipertension( null );
		}
		
		dto.setMuertesubita( new Short( rs.getShort(COLUMN_MUERTESUBITA) ) );
		if (rs.wasNull()) {
			dto.setMuertesubita( null );
		}
		
		dto.setHipercolest( new Short( rs.getShort(COLUMN_HIPERCOLEST) ) );
		if (rs.wasNull()) {
			dto.setHipercolest( null );
		}
		
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setFecha( rs.getDate(COLUMN_FECHA ) );
		dto.setNeuromediados( new Integer( rs.getInt(COLUMN_NEUROMEDIADOS) ) );
		if (rs.wasNull()) {
			dto.setNeuromediados( null );
		}
		
		dto.setTrasplantecardiaco( new Short( rs.getShort(COLUMN_TRASPLANTECARDIACO) ) );
		if (rs.wasNull()) {
			dto.setTrasplantecardiaco( null );
		}
		
		dto.setSincope( new Short( rs.getShort(COLUMN_SINCOPE) ) );
		if (rs.wasNull()) {
			dto.setSincope( null );
		}
		
		dto.setParadacardiaca( new Short( rs.getShort(COLUMN_PARADACARDIACA) ) );
		if (rs.wasNull()) {
			dto.setParadacardiaca( null );
		}
		
		dto.setAi( rs.getString( COLUMN_AI ) );
		dto.setAi2( new Integer( rs.getInt(COLUMN_AI2) ) );
		if (rs.wasNull()) {
			dto.setAi2( null );
		}
		
		dto.setEnfart( new Integer( rs.getInt(COLUMN_ENFART) ) );
		if (rs.wasNull()) {
			dto.setEnfart( null );
		}
		dto.setFlutter( new Short( rs.getShort(COLUMN_FLUTTER) ) );
		if (rs.wasNull()) {
			dto.setFlutter( null );
		}
		dto.setAlergias( rs.getString( COLUMN_ALERGIAS ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SituacionClinicaProc dto)
	{
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the specified arbitrary SQL statement
	 */
	public SituacionClinicaProc[] findByDynamicSelect(String sql, Object[] sqlParams) throws SituacionClinicaProcDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SituacionClinicaProcDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the situacion_clinica_proc table that match the specified arbitrary SQL statement
	 */
	public SituacionClinicaProc[] findByDynamicWhere(String sql, Object[] sqlParams) throws SituacionClinicaProcDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SituacionClinicaProcDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	public ArrayList<ArrayList<Object>> findByDynamicSelect(String sql) throws SituacionClinicaProcDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return UtilCodifi.Results2Array(rs);
		}
		catch (Exception _e) {
			throw new SituacionClinicaProcDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	public ArrayList<ArrayList<Object>> getEstadisticasFEVI(Integer codigo, Date fecha_muestreo) throws SituacionClinicaProcDaoException{
		StringBuffer sql = new StringBuffer();		
		sql.append("select proc.fecha FECHA, ");
		sql.append(" sitclin.fevi FEVI ");
		sql.append(" from procedimiento proc, ");
		sql.append(" situacion_clinica_proc sitclin ");		
		sql.append(" WHERE proc.codigo = "+codigo);
		sql.append(" and proc.fecha <= '"+fecha_muestreo+"'");
		sql.append(" and proc.idsitclinica = sitclin.idsitclin");
	
		return findByDynamicSelect(sql.toString());
	}

}
