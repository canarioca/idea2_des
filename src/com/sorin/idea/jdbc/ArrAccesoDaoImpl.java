/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ArrAccesoDaoImpl extends AbstractDAO implements ArrAccesoDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT USUARIO, IDROLACCESO, PASS, FECHAULTACC, FECHAREV, CONTADOR, NOMBRE, APELLIDO1, APELLIDO2, CORREO, ACTIVO, CODIGO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( USUARIO, IDROLACCESO, PASS, FECHAULTACC, FECHAREV, CONTADOR, NOMBRE, APELLIDO1, APELLIDO2, CORREO, ACTIVO, CODIGO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET USUARIO = ?, IDROLACCESO = ?, PASS = ?, FECHAULTACC = ?, FECHAREV = ?, CONTADOR = ?, NOMBRE = ?, APELLIDO1 = ?, APELLIDO2 = ?, CORREO = ?, ACTIVO = ?, CODIGO = ? WHERE USUARIO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE USUARIO = ?";

	/** 
	 * Index of column USUARIO
	 */
	protected static final int COLUMN_USUARIO = 1;

	/** 
	 * Index of column IDROLACCESO
	 */
	protected static final int COLUMN_IDROLACCESO = 2;

	/** 
	 * Index of column PASS
	 */
	protected static final int COLUMN_PASS = 3;

	/** 
	 * Index of column FECHAULTACC
	 */
	protected static final int COLUMN_FECHAULTACC = 4;

	/** 
	 * Index of column FECHAREV
	 */
	protected static final int COLUMN_FECHAREV = 5;

	/** 
	 * Index of column CONTADOR
	 */
	protected static final int COLUMN_CONTADOR = 6;

	/** 
	 * Index of column NOMBRE
	 */
	protected static final int COLUMN_NOMBRE = 7;

	/** 
	 * Index of column APELLIDO1
	 */
	protected static final int COLUMN_APELLIDO1 = 8;

	/** 
	 * Index of column APELLIDO2
	 */
	protected static final int COLUMN_APELLIDO2 = 9;

	/** 
	 * Index of column CORREO
	 */
	protected static final int COLUMN_CORREO = 10;

	/** 
	 * Index of column ACTIVO
	 */
	protected static final int COLUMN_ACTIVO = 11;

	/** 
	 * Index of column CODIGO
	 */
	protected static final int COLUMN_CODIGO = 12;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column USUARIO
	 */
	protected static final int PK_COLUMN_USUARIO = 1;

	/** 
	 * Inserts a new row in the arr_acceso table.
	 */
	public ArrAccesoPk insert(ArrAcceso dto) throws ArrAccesoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getUsuario() );
			if (dto.getIdrolacceso() != null) {
				stmt.setInt( index++, dto.getIdrolacceso().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPass() );
			stmt.setDate(index++, dto.getFechaultacc()==null ? null : new java.sql.Date( dto.getFechaultacc().getTime() ) );
			stmt.setDate(index++, dto.getFecharev()==null ? null : new java.sql.Date( dto.getFecharev().getTime() ) );
			if (dto.getContador() != null) {
				stmt.setInt( index++, dto.getContador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNombre() );
			stmt.setString( index++, dto.getApellido1() );
			stmt.setString( index++, dto.getApellido2() );
			stmt.setString( index++, dto.getCorreo() );
			if (dto.getActivo() != null) {
				stmt.setInt( index++, dto.getActivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getCodigo() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.insercion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrAccesoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the arr_acceso table.
	 */
	public void update(ArrAccesoPk pk, ArrAcceso dto) throws ArrAccesoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getUsuario() );
			if (dto.getIdrolacceso() != null) {
				stmt.setInt( index++, dto.getIdrolacceso().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPass() );
			stmt.setDate(index++, dto.getFechaultacc()==null ? null : new java.sql.Date( dto.getFechaultacc().getTime() ) );
			stmt.setDate(index++, dto.getFecharev()==null ? null : new java.sql.Date( dto.getFecharev().getTime() ) );
			if (dto.getContador() != null) {
				stmt.setInt( index++, dto.getContador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNombre() );
			stmt.setString( index++, dto.getApellido1() );
			stmt.setString( index++, dto.getApellido2() );
			stmt.setString( index++, dto.getCorreo() );
			if (dto.getActivo() != null) {
				stmt.setInt( index++, dto.getActivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getCodigo() );
			stmt.setString( 13, pk.getUsuario() );
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrAccesoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the arr_acceso table.
	 */
	public void delete(ArrAccesoPk pk) throws ArrAccesoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getUsuario() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(pk.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrAccesoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the arr_acceso table that matches the specified primary-key value.
	 */
	public ArrAcceso findByPrimaryKey(ArrAccesoPk pk) throws ArrAccesoDaoException
	{
		return findByPrimaryKey( pk.getUsuario() );
	}

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'USUARIO = :usuario'.
	 */
	public ArrAcceso findByPrimaryKey(String usuario) throws ArrAccesoDaoException
	{
		ArrAcceso ret[] = findByDynamicSelect( SQL_SELECT + " WHERE USUARIO = ?", new Object[] { usuario } );
		return ret.length==0 ? null : ret[0];
	}
	public ArrAcceso findByPrimaryUsuarioPass(String usuario, String pass) throws ArrAccesoDaoException
	{
		ArrAcceso ret[] = findByDynamicSelect( SQL_SELECT + " WHERE USUARIO = ? and PASS = ?", new Object[] { usuario, pass } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria ''.
	 */
	public ArrAcceso[] findAll() throws ArrAccesoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY USUARIO", null );
	}

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'USUARIO = :usuario'.
	 */
	public ArrAcceso[] findWhereUsuarioEquals(String usuario) throws ArrAccesoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USUARIO = ? ORDER BY USUARIO", new Object[] { usuario } );
	}

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'IDROLACCESO = :idrolacceso'.
	 */
	public ArrAcceso[] findWhereIdrolaccesoEquals(int idrolacceso) throws ArrAccesoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDROLACCESO = ? ORDER BY IDROLACCESO", new Object[] {  new Integer(idrolacceso) } );
	}

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'PASS = :pass'.
	 */
	public ArrAcceso[] findWherePassEquals(String pass) throws ArrAccesoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PASS = ? ORDER BY PASS", new Object[] { pass } );
	}

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'FECHAULTACC = :fechaultacc'.
	 */
	public ArrAcceso[] findWhereFechaultaccEquals(Date fechaultacc) throws ArrAccesoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAULTACC = ? ORDER BY FECHAULTACC", new Object[] { fechaultacc==null ? null : new java.sql.Date( fechaultacc.getTime() ) } );
	}

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'FECHAREV = :fecharev'.
	 */
	public ArrAcceso[] findWhereFecharevEquals(Date fecharev) throws ArrAccesoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAREV = ? ORDER BY FECHAREV", new Object[] { fecharev==null ? null : new java.sql.Date( fecharev.getTime() ) } );
	}

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'CONTADOR = :contador'.
	 */
	public ArrAcceso[] findWhereContadorEquals(int contador) throws ArrAccesoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONTADOR = ? ORDER BY CONTADOR", new Object[] {  new Integer(contador) } );
	}

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'NOMBRE = :nombre'.
	 */
	public ArrAcceso[] findWhereNombreEquals(String nombre) throws ArrAccesoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE = ? ORDER BY NOMBRE", new Object[] { nombre } );
	}

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'APELLIDO1 = :apellido1'.
	 */
	public ArrAcceso[] findWhereApellido1Equals(String apellido1) throws ArrAccesoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APELLIDO1 = ? ORDER BY APELLIDO1", new Object[] { apellido1 } );
	}

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'APELLIDO2 = :apellido2'.
	 */
	public ArrAcceso[] findWhereApellido2Equals(String apellido2) throws ArrAccesoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APELLIDO2 = ? ORDER BY APELLIDO2", new Object[] { apellido2 } );
	}

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'CORREO = :correo'.
	 */
	public ArrAcceso[] findWhereCorreoEquals(String correo) throws ArrAccesoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CORREO = ? ORDER BY CORREO", new Object[] { correo } );
	}

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'ACTIVO = :activo'.
	 */
	public ArrAcceso[] findWhereActivoEquals(int activo) throws ArrAccesoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTIVO = ? ORDER BY ACTIVO", new Object[] {  new Integer(activo) } );
	}

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'CODIGO = :codigo'.
	 */
	public ArrAcceso[] findWhereCodigoEquals(String codigo) throws ArrAccesoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CODIGO = ? ORDER BY CODIGO", new Object[] { codigo } );
	}

	/**
	 * Method 'ArrAccesoDaoImpl'
	 * 
	 */
	public ArrAccesoDaoImpl()
	{
	}
	public ArrAccesoDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ArrAccesoDaoImpl(final java.sql.Connection userConn, String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ArrAccesoDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrAccesoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.arr_acceso";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrAcceso fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrAcceso dto = new ArrAcceso();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrAcceso[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrAcceso dto = new ArrAcceso();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrAcceso ret[] = new ArrAcceso[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrAcceso dto, ResultSet rs) throws SQLException
	{
		dto.setUsuario( rs.getString( COLUMN_USUARIO ) );
		dto.setIdrolacceso( new Integer( rs.getInt(COLUMN_IDROLACCESO) ) );
		if (rs.wasNull()) {
			dto.setIdrolacceso( null );
		}
		
		dto.setPass( rs.getString( COLUMN_PASS ) );
		dto.setFechaultacc( rs.getDate(COLUMN_FECHAULTACC ) );
		dto.setFecharev( rs.getDate(COLUMN_FECHAREV ) );
		dto.setContador( new Integer( rs.getInt(COLUMN_CONTADOR) ) );
		if (rs.wasNull()) {
			dto.setContador( null );
		}
		
		dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
		dto.setApellido1( rs.getString( COLUMN_APELLIDO1 ) );
		dto.setApellido2( rs.getString( COLUMN_APELLIDO2 ) );
		dto.setCorreo( rs.getString( COLUMN_CORREO ) );
		dto.setActivo( new Integer( rs.getInt(COLUMN_ACTIVO) ) );
		if (rs.wasNull()) {
			dto.setActivo( null );
		}
		
		dto.setCodigo( rs.getString( COLUMN_CODIGO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrAcceso dto)
	{
	}

	/** 
	 * Returns all rows from the arr_acceso table that match the specified arbitrary SQL statement
	 */
	public ArrAcceso[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrAccesoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrAccesoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the arr_acceso table that match the specified arbitrary SQL statement
	 */
	public ArrAcceso[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrAccesoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrAccesoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
