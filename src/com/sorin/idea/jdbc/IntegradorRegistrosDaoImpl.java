/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class IntegradorRegistrosDaoImpl extends AbstractDAO implements IntegradorRegistrosDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDINTEGRADORREGISTROS, NOMBREFICHERO, ESTADO, FECHAHORARX, FECHAHORAENVIO, REPROCESADO, PATH_NO_PROCESADO, SISTEMA, ERROR, COMENTARIOS, MODELO, NSERIE, FECHASEG, ESTADOEHR FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDINTEGRADORREGISTROS, NOMBREFICHERO, ESTADO, FECHAHORARX, FECHAHORAENVIO, REPROCESADO, PATH_NO_PROCESADO, SISTEMA, ERROR, COMENTARIOS, MODELO, NSERIE, FECHASEG, ESTADOEHR ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDINTEGRADORREGISTROS = ?, NOMBREFICHERO = ?, ESTADO = ?, FECHAHORARX = ?, FECHAHORAENVIO = ?, REPROCESADO = ?, PATH_NO_PROCESADO = ?, SISTEMA = ?, ERROR = ?, COMENTARIOS = ?, MODELO = ?, NSERIE = ?, FECHASEG = ?, ESTADOEHR = ? WHERE IDINTEGRADORREGISTROS = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDINTEGRADORREGISTROS = ?";

	/** 
	 * Index of column IDINTEGRADORREGISTROS
	 */
	protected static final int COLUMN_IDINTEGRADORREGISTROS = 1;

	/** 
	 * Index of column NOMBREFICHERO
	 */
	protected static final int COLUMN_NOMBREFICHERO = 2;

	/** 
	 * Index of column ESTADO
	 */
	protected static final int COLUMN_ESTADO = 3;

	/** 
	 * Index of column FECHAHORARX
	 */
	protected static final int COLUMN_FECHAHORARX = 4;

	/** 
	 * Index of column FECHAHORAENVIO
	 */
	protected static final int COLUMN_FECHAHORAENVIO = 5;

	/** 
	 * Index of column REPROCESADO
	 */
	protected static final int COLUMN_REPROCESADO = 6;

	/** 
	 * Index of column PATH_NO_PROCESADO
	 */
	protected static final int COLUMN_PATH_NO_PROCESADO = 7;

	/** 
	 * Index of column SISTEMA
	 */
	protected static final int COLUMN_SISTEMA = 8;

	/** 
	 * Index of column ERROR
	 */
	protected static final int COLUMN_ERROR = 9;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 10;

	/** 
	 * Index of column MODELO
	 */
	protected static final int COLUMN_MODELO = 11;

	/** 
	 * Index of column NSERIE
	 */
	protected static final int COLUMN_NSERIE = 12;

	/** 
	 * Index of column FECHASEG
	 */
	protected static final int COLUMN_FECHASEG = 13;

	/** 
	 * Index of column ESTADOEHR
	 */
	protected static final int COLUMN_ESTADOEHR = 14;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 14;

	/** 
	 * Index of primary-key column IDINTEGRADORREGISTROS
	 */
	protected static final int PK_COLUMN_IDINTEGRADORREGISTROS = 1;

	/** 
	 * Inserts a new row in the integrador_registros table.
	 */
	public IntegradorRegistrosPk insert(IntegradorRegistros dto) throws IntegradorRegistrosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdintegradorregistros() != null) {
				stmt.setInt( index++, dto.getIdintegradorregistros().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNombrefichero() );
			if (dto.getEstado() != null) {
				stmt.setInt( index++, dto.getEstado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setTimestamp(index++, dto.getFechahorarx()==null ? null : new java.sql.Timestamp( dto.getFechahorarx().getTime() ) );
			stmt.setTimestamp(index++, dto.getFechahoraenvio()==null ? null : new java.sql.Timestamp( dto.getFechahoraenvio().getTime() ) );
			if (dto.getReprocesado() != null) {
				stmt.setInt( index++, dto.getReprocesado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPathNoProcesado() );
			if (dto.getSistema() != null) {
				stmt.setInt( index++, dto.getSistema().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getError() );
			stmt.setString( index++, dto.getComentarios() );
			stmt.setString( index++, dto.getModelo() );
			stmt.setString( index++, dto.getNserie() );
			stmt.setDate(index++, dto.getFechaseg()==null ? null : new java.sql.Date( dto.getFechaseg().getTime() ) );
			if (dto.getEstadoehr() != null) {
				stmt.setInt( index++, dto.getEstadoehr().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdintegradorregistros( new Integer( rs.getInt(1) ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new IntegradorRegistrosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the integrador_registros table.
	 */
	public void update(IntegradorRegistrosPk pk, IntegradorRegistros dto) throws IntegradorRegistrosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdintegradorregistros() != null) {
				stmt.setInt( index++, dto.getIdintegradorregistros().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNombrefichero() );
			if (dto.getEstado() != null) {
				stmt.setInt( index++, dto.getEstado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setTimestamp(index++, dto.getFechahorarx()==null ? null : new java.sql.Timestamp( dto.getFechahorarx().getTime() ) );
			stmt.setTimestamp(index++, dto.getFechahoraenvio()==null ? null : new java.sql.Timestamp( dto.getFechahoraenvio().getTime() ) );
			if (dto.getReprocesado() != null) {
				stmt.setInt( index++, dto.getReprocesado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPathNoProcesado() );
			if (dto.getSistema() != null) {
				stmt.setInt( index++, dto.getSistema().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getError() );
			stmt.setString( index++, dto.getComentarios() );
			stmt.setString( index++, dto.getModelo() );
			stmt.setString( index++, dto.getNserie() );
			stmt.setDate(index++, dto.getFechaseg()==null ? null : new java.sql.Date( dto.getFechaseg().getTime() ) );
			if (dto.getEstadoehr() != null) {
				stmt.setInt( index++, dto.getEstadoehr().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (pk.getIdintegradorregistros() != null) {
				stmt.setInt( 15, pk.getIdintegradorregistros().intValue() );
			} else {
				stmt.setNull(15, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new IntegradorRegistrosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the integrador_registros table.
	 */
	public void delete(IntegradorRegistrosPk pk) throws IntegradorRegistrosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdintegradorregistros() != null) {
				stmt.setInt( 1, pk.getIdintegradorregistros().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new IntegradorRegistrosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the integrador_registros table that matches the specified primary-key value.
	 */
	public IntegradorRegistros findByPrimaryKey(IntegradorRegistrosPk pk) throws IntegradorRegistrosDaoException
	{
		return findByPrimaryKey( pk.getIdintegradorregistros() );
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'IDINTEGRADORREGISTROS = :idintegradorregistros'.
	 */
	public IntegradorRegistros findByPrimaryKey(Integer idintegradorregistros) throws IntegradorRegistrosDaoException
	{
		IntegradorRegistros ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDINTEGRADORREGISTROS = ?", new Object[] { idintegradorregistros } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria ''.
	 */
	public IntegradorRegistros[] findAll() throws IntegradorRegistrosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDINTEGRADORREGISTROS", null );
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'IDINTEGRADORREGISTROS = :idintegradorregistros'.
	 */
	public IntegradorRegistros[] findWhereIdintegradorregistrosEquals(int idintegradorregistros) throws IntegradorRegistrosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDINTEGRADORREGISTROS = ? ORDER BY IDINTEGRADORREGISTROS", new Object[] {  new Integer(idintegradorregistros) } );
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'NOMBREFICHERO = :nombrefichero'.
	 */
	public IntegradorRegistros[] findWhereNombreficheroEquals(String nombrefichero) throws IntegradorRegistrosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBREFICHERO = ? ORDER BY NOMBREFICHERO", new Object[] { nombrefichero } );
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'ESTADO = :estado'.
	 */
	public IntegradorRegistros[] findWhereEstadoEquals(int estado) throws IntegradorRegistrosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTADO = ? ORDER BY ESTADO", new Object[] {  new Integer(estado) } );
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'FECHAHORARX = :fechahorarx'.
	 */
	public IntegradorRegistros[] findWhereFechahorarxEquals(Date fechahorarx) throws IntegradorRegistrosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAHORARX = ? ORDER BY FECHAHORARX", new Object[] { fechahorarx==null ? null : new java.sql.Timestamp( fechahorarx.getTime() ) } );
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'FECHAHORAENVIO = :fechahoraenvio'.
	 */
	public IntegradorRegistros[] findWhereFechahoraenvioEquals(Date fechahoraenvio) throws IntegradorRegistrosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAHORAENVIO = ? ORDER BY FECHAHORAENVIO", new Object[] { fechahoraenvio==null ? null : new java.sql.Timestamp( fechahoraenvio.getTime() ) } );
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'REPROCESADO = :reprocesado'.
	 */
	public IntegradorRegistros[] findWhereReprocesadoEquals(int reprocesado) throws IntegradorRegistrosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REPROCESADO = ? ORDER BY REPROCESADO", new Object[] {  new Integer(reprocesado) } );
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'PATH_NO_PROCESADO = :pathNoProcesado'.
	 */
	public IntegradorRegistros[] findWherePathNoProcesadoEquals(String pathNoProcesado) throws IntegradorRegistrosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PATH_NO_PROCESADO = ? ORDER BY PATH_NO_PROCESADO", new Object[] { pathNoProcesado } );
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'SISTEMA = :sistema'.
	 */
	public IntegradorRegistros[] findWhereSistemaEquals(int sistema) throws IntegradorRegistrosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SISTEMA = ? ORDER BY SISTEMA", new Object[] {  new Integer(sistema) } );
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'ERROR = :error'.
	 */
	public IntegradorRegistros[] findWhereErrorEquals(String error) throws IntegradorRegistrosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ERROR = ? ORDER BY ERROR", new Object[] { error } );
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public IntegradorRegistros[] findWhereComentariosEquals(String comentarios) throws IntegradorRegistrosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'MODELO = :modelo'.
	 */
	public IntegradorRegistros[] findWhereModeloEquals(String modelo) throws IntegradorRegistrosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MODELO = ? ORDER BY MODELO", new Object[] { modelo } );
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'NSERIE = :nserie'.
	 */
	public IntegradorRegistros[] findWhereNserieEquals(String nserie) throws IntegradorRegistrosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NSERIE = ? ORDER BY NSERIE", new Object[] { nserie } );
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'FECHASEG = :fechaseg'.
	 */
	public IntegradorRegistros[] findWhereFechasegEquals(Date fechaseg) throws IntegradorRegistrosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHASEG = ? ORDER BY FECHASEG", new Object[] { fechaseg==null ? null : new java.sql.Date( fechaseg.getTime() ) } );
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the criteria 'ESTADOEHR = :estadoehr'.
	 */
	public IntegradorRegistros[] findWhereEstadoehrEquals(int estadoehr) throws IntegradorRegistrosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTADOEHR = ? ORDER BY ESTADOEHR", new Object[] {  new Integer(estadoehr) } );
	}

	/**
	 * Method 'IntegradorRegistrosDaoImpl'
	 * 
	 */
	public IntegradorRegistrosDaoImpl()
	{
	}

	/**
	 * Method 'IntegradorRegistrosDaoImpl'
	 * 
	 * @param userConn
	 */
	public IntegradorRegistrosDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.integrador_registros";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected IntegradorRegistros fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			IntegradorRegistros dto = new IntegradorRegistros();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected IntegradorRegistros[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			IntegradorRegistros dto = new IntegradorRegistros();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		IntegradorRegistros ret[] = new IntegradorRegistros[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(IntegradorRegistros dto, ResultSet rs) throws SQLException
	{
		dto.setIdintegradorregistros( new Integer( rs.getInt(COLUMN_IDINTEGRADORREGISTROS) ) );
		dto.setNombrefichero( rs.getString( COLUMN_NOMBREFICHERO ) );
		dto.setEstado( new Integer( rs.getInt(COLUMN_ESTADO) ) );
		if (rs.wasNull()) {
			dto.setEstado( null );
		}
		
		dto.setFechahorarx( rs.getTimestamp(COLUMN_FECHAHORARX ) );
		dto.setFechahoraenvio( rs.getTimestamp(COLUMN_FECHAHORAENVIO ) );
		dto.setReprocesado( new Integer( rs.getInt(COLUMN_REPROCESADO) ) );
		if (rs.wasNull()) {
			dto.setReprocesado( null );
		}
		
		dto.setPathNoProcesado( rs.getString( COLUMN_PATH_NO_PROCESADO ) );
		dto.setSistema( new Integer( rs.getInt(COLUMN_SISTEMA) ) );
		if (rs.wasNull()) {
			dto.setSistema( null );
		}
		
		dto.setError( rs.getString( COLUMN_ERROR ) );
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setModelo( rs.getString( COLUMN_MODELO ) );
		dto.setNserie( rs.getString( COLUMN_NSERIE ) );
		dto.setFechaseg( rs.getDate(COLUMN_FECHASEG ) );
		dto.setEstadoehr( new Integer( rs.getInt(COLUMN_ESTADOEHR) ) );
		if (rs.wasNull()) {
			dto.setEstadoehr( null );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(IntegradorRegistros dto)
	{
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the specified arbitrary SQL statement
	 */
	public IntegradorRegistros[] findByDynamicSelect(String sql, Object[] sqlParams) throws IntegradorRegistrosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new IntegradorRegistrosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the integrador_registros table that match the specified arbitrary SQL statement
	 */
	public IntegradorRegistros[] findByDynamicWhere(String sql, Object[] sqlParams) throws IntegradorRegistrosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new IntegradorRegistrosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
