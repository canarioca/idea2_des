/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.util.UtilCodifi;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ArrPacientesDaoImpl extends AbstractDAO implements ArrPacientesDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT NUHSA, NHC, NOMBRE, APELLID1, APELLID2, SEXO, FECHANACI, DNI, NSS1, DIRECCION, PROVINCIA, POBLACION, PAIS, CP, ESTADO, TELEFONO1, TELEFONO2, CORREO, PROCEDENCIA, CODIGO, HPROCEDENCIA, VOID, IDFUSION FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( NUHSA, NHC, NOMBRE, APELLID1, APELLID2, SEXO, FECHANACI, DNI, NSS1, DIRECCION, PROVINCIA, POBLACION, PAIS, CP, ESTADO, TELEFONO1, TELEFONO2, CORREO, PROCEDENCIA, CODIGO, HPROCEDENCIA, VOID, IDFUSION ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET NUHSA = ?, NHC = ?, NOMBRE = ?, APELLID1 = ?, APELLID2 = ?, SEXO = ?, FECHANACI = ?, DNI = ?, NSS1 = ?, DIRECCION = ?, PROVINCIA = ?, POBLACION = ?, PAIS = ?, CP = ?, ESTADO = ?, TELEFONO1 = ?, TELEFONO2 = ?, CORREO = ?, PROCEDENCIA = ?, CODIGO = ?, HPROCEDENCIA = ?, VOID = ?, IDFUSION = ? WHERE CODIGO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE CODIGO = ?";

	/** 
	 * Index of column NUHSA
	 */
	protected static final int COLUMN_NUHSA = 1;

	/** 
	 * Index of column NHC
	 */
	protected static final int COLUMN_NHC = 2;

	/** 
	 * Index of column NOMBRE
	 */
	protected static final int COLUMN_NOMBRE = 3;

	/** 
	 * Index of column APELLID1
	 */
	protected static final int COLUMN_APELLID1 = 4;

	/** 
	 * Index of column APELLID2
	 */
	protected static final int COLUMN_APELLID2 = 5;

	/** 
	 * Index of column SEXO
	 */
	protected static final int COLUMN_SEXO = 6;

	/** 
	 * Index of column FECHANACI
	 */
	protected static final int COLUMN_FECHANACI = 7;

	/** 
	 * Index of column DNI
	 */
	protected static final int COLUMN_DNI = 8;

	/** 
	 * Index of column NSS1
	 */
	protected static final int COLUMN_NSS1 = 9;

	/** 
	 * Index of column DIRECCION
	 */
	protected static final int COLUMN_DIRECCION = 10;

	/** 
	 * Index of column PROVINCIA
	 */
	protected static final int COLUMN_PROVINCIA = 11;

	/** 
	 * Index of column POBLACION
	 */
	protected static final int COLUMN_POBLACION = 12;

	/** 
	 * Index of column PAIS
	 */
	protected static final int COLUMN_PAIS = 13;

	/** 
	 * Index of column CP
	 */
	protected static final int COLUMN_CP = 14;

	/** 
	 * Index of column ESTADO
	 */
	protected static final int COLUMN_ESTADO = 15;

	/** 
	 * Index of column TELEFONO1
	 */
	protected static final int COLUMN_TELEFONO1 = 16;

	/** 
	 * Index of column TELEFONO2
	 */
	protected static final int COLUMN_TELEFONO2 = 17;

	/** 
	 * Index of column CORREO
	 */
	protected static final int COLUMN_CORREO = 18;

	/** 
	 * Index of column PROCEDENCIA
	 */
	protected static final int COLUMN_PROCEDENCIA = 19;

	/** 
	 * Index of column CODIGO
	 */
	protected static final int COLUMN_CODIGO = 20;

	/** 
	 * Index of column HPROCEDENCIA
	 */
	protected static final int COLUMN_HPROCEDENCIA = 21;

	/** 
	 * Index of column VOID
	 */
	protected static final int COLUMN_A_VOID = 22;

	/** 
	 * Index of column IDFUSION
	 */
	protected static final int COLUMN_IDFUSION = 23;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 23;

	/** 
	 * Index of primary-key column CODIGO
	 */
	protected static final int PK_COLUMN_CODIGO = 1;

	/** 
	 * Inserts a new row in the arr_pacientes table.
	 */
	public ArrPacientesPk insert(ArrPacientes dto) throws ArrPacientesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setString( index++, dto.getNuhsa() );
			stmt.setString( index++, dto.getNhc() );
			stmt.setString( index++, dto.getNombre() );
			stmt.setString( index++, dto.getApellid1() );
			stmt.setString( index++, dto.getApellid2() );
			if (dto.getSexo() != null) {
				stmt.setInt( index++, dto.getSexo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFechanaci()==null ? null : new java.sql.Date( dto.getFechanaci().getTime() ) );
			stmt.setString( index++, dto.getDni() );
			stmt.setString( index++, dto.getNss1() );
			stmt.setString( index++, dto.getDireccion() );
			stmt.setString( index++, dto.getProvincia() );
			stmt.setString( index++, dto.getPoblacion() );
			stmt.setString( index++, dto.getPais() );
			stmt.setString( index++, dto.getCp() );
			stmt.setString( index++, dto.getEstado() );
			stmt.setString( index++, dto.getTelefono1() );
			stmt.setString( index++, dto.getTelefono2() );
			stmt.setString( index++, dto.getCorreo() );
			if (dto.getProcedencia() != null) {
				stmt.setInt( index++, dto.getProcedencia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCodigo() != null) {
				stmt.setInt( index++, dto.getCodigo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHprocedencia() != null) {
				stmt.setInt( index++, dto.getHprocedencia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAVoid() != null) {
				stmt.setInt( index++, dto.getAVoid().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdfusion() != null) {
				stmt.setInt( index++, dto.getIdfusion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setCodigo( new Integer( rs.getInt(1) ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrPacientesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the arr_pacientes table.
	 */
	public void update(ArrPacientesPk pk, ArrPacientes dto) throws ArrPacientesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getNuhsa() );
			stmt.setString( index++, dto.getNhc() );
			stmt.setString( index++, dto.getNombre() );
			stmt.setString( index++, dto.getApellid1() );
			stmt.setString( index++, dto.getApellid2() );
			if (dto.getSexo() != null) {
				stmt.setInt( index++, dto.getSexo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFechanaci()==null ? null : new java.sql.Date( dto.getFechanaci().getTime() ) );
			stmt.setString( index++, dto.getDni() );
			stmt.setString( index++, dto.getNss1() );
			stmt.setString( index++, dto.getDireccion() );
			stmt.setString( index++, dto.getProvincia() );
			stmt.setString( index++, dto.getPoblacion() );
			stmt.setString( index++, dto.getPais() );
			stmt.setString( index++, dto.getCp() );
			stmt.setString( index++, dto.getEstado() );
			stmt.setString( index++, dto.getTelefono1() );
			stmt.setString( index++, dto.getTelefono2() );
			stmt.setString( index++, dto.getCorreo() );
			if (dto.getProcedencia() != null) {
				stmt.setInt( index++, dto.getProcedencia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCodigo() != null) {
				stmt.setInt( index++, dto.getCodigo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHprocedencia() != null) {
				stmt.setInt( index++, dto.getHprocedencia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAVoid() != null) {
				stmt.setInt( index++, dto.getAVoid().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdfusion() != null) {
				stmt.setInt( index++, dto.getIdfusion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (pk.getCodigo() != null) {
				stmt.setInt( 24, pk.getCodigo().intValue() );
			} else {
				stmt.setNull(24, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrPacientesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the arr_pacientes table.
	 */
	public void delete(ArrPacientesPk pk) throws ArrPacientesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getCodigo() != null) {
				stmt.setInt( 1, pk.getCodigo().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrPacientesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the arr_pacientes table that matches the specified primary-key value.
	 */
	public ArrPacientes findByPrimaryKey(ArrPacientesPk pk) throws ArrPacientesDaoException
	{
		return findByPrimaryKey( pk.getCodigo() );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'CODIGO = :codigo'.
	 */
	public ArrPacientes findByPrimaryKey(Integer codigo) throws ArrPacientesDaoException
	{
		ArrPacientes ret[] = findByDynamicSelect( SQL_SELECT + " WHERE CODIGO = ?", new Object[] { codigo } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria ''.
	 */
	public ArrPacientes[] findAll() throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY CODIGO", null );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'NUHSA = :nuhsa'.
	 */
	public ArrPacientes[] findWhereNuhsaEquals(String nuhsa) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUHSA = ? ORDER BY NUHSA", new Object[] { nuhsa } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'NHC = :nhc'.
	 */
	public ArrPacientes[] findWhereNhcEquals(String nhc) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NHC = ? ORDER BY NHC", new Object[] { nhc } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'NOMBRE = :nombre'.
	 */
	public ArrPacientes[] findWhereNombreEquals(String nombre) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE = ? ORDER BY NOMBRE", new Object[] { nombre } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'APELLID1 = :apellid1'.
	 */
	public ArrPacientes[] findWhereApellid1Equals(String apellid1) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APELLID1 = ? ORDER BY APELLID1", new Object[] { apellid1 } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'APELLID2 = :apellid2'.
	 */
	public ArrPacientes[] findWhereApellid2Equals(String apellid2) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APELLID2 = ? ORDER BY APELLID2", new Object[] { apellid2 } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'SEXO = :sexo'.
	 */
	public ArrPacientes[] findWhereSexoEquals(int sexo) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SEXO = ? ORDER BY SEXO", new Object[] {  new Integer(sexo) } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'FECHANACI = :fechanaci'.
	 */
	public ArrPacientes[] findWhereFechanaciEquals(Date fechanaci) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHANACI = ? ORDER BY FECHANACI", new Object[] { fechanaci==null ? null : new java.sql.Date( fechanaci.getTime() ) } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'DNI = :dni'.
	 */
	public ArrPacientes[] findWhereDniEquals(String dni) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DNI = ? ORDER BY DNI", new Object[] { dni } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'NSS1 = :nss1'.
	 */
	public ArrPacientes[] findWhereNss1Equals(String nss1) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NSS1 = ? ORDER BY NSS1", new Object[] { nss1 } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'DIRECCION = :direccion'.
	 */
	public ArrPacientes[] findWhereDireccionEquals(String direccion) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DIRECCION = ? ORDER BY DIRECCION", new Object[] { direccion } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'PROVINCIA = :provincia'.
	 */
	public ArrPacientes[] findWhereProvinciaEquals(String provincia) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROVINCIA = ? ORDER BY PROVINCIA", new Object[] { provincia } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'POBLACION = :poblacion'.
	 */
	public ArrPacientes[] findWherePoblacionEquals(String poblacion) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE POBLACION = ? ORDER BY POBLACION", new Object[] { poblacion } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'PAIS = :pais'.
	 */
	public ArrPacientes[] findWherePaisEquals(String pais) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAIS = ? ORDER BY PAIS", new Object[] { pais } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'CP = :cp'.
	 */
	public ArrPacientes[] findWhereCpEquals(String cp) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CP = ? ORDER BY CP", new Object[] { cp } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'ESTADO = :estado'.
	 */
	public ArrPacientes[] findWhereEstadoEquals(String estado) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTADO = ? ORDER BY ESTADO", new Object[] { estado } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'TELEFONO1 = :telefono1'.
	 */
	public ArrPacientes[] findWhereTelefono1Equals(String telefono1) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TELEFONO1 = ? ORDER BY TELEFONO1", new Object[] { telefono1 } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'TELEFONO2 = :telefono2'.
	 */
	public ArrPacientes[] findWhereTelefono2Equals(String telefono2) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TELEFONO2 = ? ORDER BY TELEFONO2", new Object[] { telefono2 } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'CORREO = :correo'.
	 */
	public ArrPacientes[] findWhereCorreoEquals(String correo) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CORREO = ? ORDER BY CORREO", new Object[] { correo } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'PROCEDENCIA = :procedencia'.
	 */
	public ArrPacientes[] findWhereProcedenciaEquals(int procedencia) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROCEDENCIA = ? ORDER BY PROCEDENCIA", new Object[] {  new Integer(procedencia) } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'CODIGO = :codigo'.
	 */
	public ArrPacientes[] findWhereCodigoEquals(int codigo) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CODIGO = ? ORDER BY CODIGO", new Object[] {  new Integer(codigo) } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'HPROCEDENCIA = :hprocedencia'.
	 */
	public ArrPacientes[] findWhereHprocedenciaEquals(int hprocedencia) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HPROCEDENCIA = ? ORDER BY HPROCEDENCIA", new Object[] {  new Integer(hprocedencia) } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'VOID = :aVoid'.
	 */
	public ArrPacientes[] findWhereAVoidEquals(int aVoid) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VOID = ? ORDER BY VOID", new Object[] {  new Integer(aVoid) } );
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the criteria 'IDFUSION = :idfusion'.
	 */
	public ArrPacientes[] findWhereIdfusionEquals(int idfusion) throws ArrPacientesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDFUSION = ? ORDER BY IDFUSION", new Object[] {  new Integer(idfusion) } );
	}

	/**
	 * Method 'ArrPacientesDaoImpl'
	 * 
	 */
	public ArrPacientesDaoImpl()
	{
	}

	public ArrPacientesDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ArrPacientesDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	/**
	 * Method 'ArrPacientesDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrPacientesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.arr_pacientes";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrPacientes fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrPacientes dto = new ArrPacientes();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrPacientes[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrPacientes dto = new ArrPacientes();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrPacientes ret[] = new ArrPacientes[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrPacientes dto, ResultSet rs) throws SQLException
	{
		dto.setNuhsa( rs.getString( COLUMN_NUHSA ) );
		dto.setNhc( rs.getString( COLUMN_NHC ) );
		dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
		dto.setApellid1( rs.getString( COLUMN_APELLID1 ) );
		dto.setApellid2( rs.getString( COLUMN_APELLID2 ) );
		dto.setSexo( new Integer( rs.getInt(COLUMN_SEXO) ) );
		if (rs.wasNull()) {
			dto.setSexo( null );
		}
		
		dto.setFechanaci( rs.getDate(COLUMN_FECHANACI ) );
		dto.setDni( rs.getString( COLUMN_DNI ) );
		dto.setNss1( rs.getString( COLUMN_NSS1 ) );
		dto.setDireccion( rs.getString( COLUMN_DIRECCION ) );
		dto.setProvincia( rs.getString( COLUMN_PROVINCIA ) );
		dto.setPoblacion( rs.getString( COLUMN_POBLACION ) );
		dto.setPais( rs.getString( COLUMN_PAIS ) );
		dto.setCp( rs.getString( COLUMN_CP ) );
		dto.setEstado( rs.getString( COLUMN_ESTADO ) );
		dto.setTelefono1( rs.getString( COLUMN_TELEFONO1 ) );
		dto.setTelefono2( rs.getString( COLUMN_TELEFONO2 ) );
		dto.setCorreo( rs.getString( COLUMN_CORREO ) );
		dto.setProcedencia( new Integer( rs.getInt(COLUMN_PROCEDENCIA) ) );
		if (rs.wasNull()) {
			dto.setProcedencia( null );
		}
		
		dto.setCodigo( new Integer( rs.getInt(COLUMN_CODIGO) ) );
		dto.setHprocedencia( new Integer( rs.getInt(COLUMN_HPROCEDENCIA) ) );
		if (rs.wasNull()) {
			dto.setHprocedencia( null );
		}
		
		dto.setAVoid( new Integer( rs.getInt(COLUMN_A_VOID) ) );
		if (rs.wasNull()) {
			dto.setAVoid( null );
		}
		
		dto.setIdfusion( new Integer( rs.getInt(COLUMN_IDFUSION) ) );
		if (rs.wasNull()) {
			dto.setIdfusion( null );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrPacientes dto)
	{
	}

	/** 
	 * Returns all rows from the arr_pacientes table that match the specified arbitrary SQL statement
	 */
	public ArrPacientes[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrPacientesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrPacientesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	public ArrayList<ArrayList<Object>> findByDynamicSelect(String sql) throws ArrPacientesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return UtilCodifi.Results2Array(rs);
		}
		catch (Exception _e) {
			throw new ArrPacientesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	/** 
	 * Returns all rows from the arr_pacientes table that match the specified arbitrary SQL statement
	 */
	public ArrPacientes[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrPacientesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrPacientesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	public ArrayList<ArrayList<Object>> getEstadisticasPaciente() throws ArrPacientesDaoException{
		StringBuffer sql = new StringBuffer();
		sql.append("select pac.fechanaci FECHANACI,");
		sql.append("pac.sexo SEXO, ");
		//ql.append("m2.VALOR HOSPITAL_PROCEDENCIA,");
		sql.append("pac.procedencia PROCEDENCIA, ");
    	//sql.append("m1.VALOR CARACTER_PROCEDENCIA");
    	sql.append("pac.hprocedencia HPROCEDENCIA ");
    	
		sql.append(" from arr_pacientes pac ");
		//sql.append(" left outer join arr_maestras m1 on pac.procedencia = m1.codigo");
    	//sql.append(" left outer join arr_maestras m2 on pac.hprocedencia = m2.codigo"); 
    	
		
		return findByDynamicSelect(sql.toString());
	}

}
