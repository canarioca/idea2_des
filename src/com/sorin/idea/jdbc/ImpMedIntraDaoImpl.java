/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ImpMedIntraDaoImpl extends AbstractDAO implements ImpMedIntraDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDMEDINTRA, IDHOJAIMP, PROFI_ANTIBIO, PROFI_ANTIBIO_OTRA, ANTICOAG, ANTICOAG_OTRA, ANTICOAG_RETIRADA, INR, OBSERVACIONES FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDMEDINTRA, IDHOJAIMP, PROFI_ANTIBIO, PROFI_ANTIBIO_OTRA, ANTICOAG, ANTICOAG_OTRA, ANTICOAG_RETIRADA, INR, OBSERVACIONES ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDMEDINTRA = ?, IDHOJAIMP = ?, PROFI_ANTIBIO = ?, PROFI_ANTIBIO_OTRA = ?, ANTICOAG = ?, ANTICOAG_OTRA = ?, ANTICOAG_RETIRADA = ?, INR = ?, OBSERVACIONES = ? WHERE IDMEDINTRA = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDMEDINTRA = ?";

	/** 
	 * Index of column IDMEDINTRA
	 */
	protected static final int COLUMN_IDMEDINTRA = 1;

	/** 
	 * Index of column IDHOJAIMP
	 */
	protected static final int COLUMN_IDHOJAIMP = 2;

	/** 
	 * Index of column PROFI_ANTIBIO
	 */
	protected static final int COLUMN_PROFI_ANTIBIO = 3;

	/** 
	 * Index of column PROFI_ANTIBIO_OTRA
	 */
	protected static final int COLUMN_PROFI_ANTIBIO_OTRA = 4;

	/** 
	 * Index of column ANTICOAG
	 */
	protected static final int COLUMN_ANTICOAG = 5;

	/** 
	 * Index of column ANTICOAG_OTRA
	 */
	protected static final int COLUMN_ANTICOAG_OTRA = 6;

	/** 
	 * Index of column ANTICOAG_RETIRADA
	 */
	protected static final int COLUMN_ANTICOAG_RETIRADA = 7;

	/** 
	 * Index of column INR
	 */
	protected static final int COLUMN_INR = 8;

	/** 
	 * Index of column OBSERVACIONES
	 */
	protected static final int COLUMN_OBSERVACIONES = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column IDMEDINTRA
	 */
	protected static final int PK_COLUMN_IDMEDINTRA = 1;

	/** 
	 * Inserts a new row in the imp_med_intra table.
	 */
	public ImpMedIntraPk insert(ImpMedIntra dto) throws ImpMedIntraDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdmedintra() != null) {
				stmt.setInt( index++, dto.getIdmedintra().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdhojaimp() != null) {
				stmt.setInt( index++, dto.getIdhojaimp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProfiAntibio() != null) {
				stmt.setInt( index++, dto.getProfiAntibio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getProfiAntibioOtra() );
			if (dto.getAnticoag() != null) {
				stmt.setInt( index++, dto.getAnticoag().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAnticoagOtra() );
			if (dto.getAnticoagRetirada() != null) {
				stmt.setInt( index++, dto.getAnticoagRetirada().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getInr() );
			stmt.setString( index++, dto.getObservaciones() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdmedintra( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpMedIntraDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the imp_med_intra table.
	 */
	public void update(ImpMedIntraPk pk, ImpMedIntra dto) throws ImpMedIntraDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdmedintra() != null) {
				stmt.setInt( index++, dto.getIdmedintra().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdhojaimp() != null) {
				stmt.setInt( index++, dto.getIdhojaimp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProfiAntibio() != null) {
				stmt.setInt( index++, dto.getProfiAntibio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getProfiAntibioOtra() );
			if (dto.getAnticoag() != null) {
				stmt.setInt( index++, dto.getAnticoag().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAnticoagOtra() );
			if (dto.getAnticoagRetirada() != null) {
				stmt.setInt( index++, dto.getAnticoagRetirada().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getInr() );
			stmt.setString( index++, dto.getObservaciones() );
			if (pk.getIdmedintra() != null) {
				stmt.setInt( 10, pk.getIdmedintra().intValue() );
			} else {
				stmt.setNull(10, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpMedIntraDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the imp_med_intra table.
	 */
	public void delete(ImpMedIntraPk pk) throws ImpMedIntraDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdmedintra() != null) {
				stmt.setInt( 1, pk.getIdmedintra().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpMedIntraDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the imp_med_intra table that matches the specified primary-key value.
	 */
	public ImpMedIntra findByPrimaryKey(ImpMedIntraPk pk) throws ImpMedIntraDaoException
	{
		return findByPrimaryKey( pk.getIdmedintra() );
	}

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'IDMEDINTRA = :idmedintra'.
	 */
	public ImpMedIntra findByPrimaryKey(Integer idmedintra) throws ImpMedIntraDaoException
	{
		ImpMedIntra ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDMEDINTRA = ?", new Object[] { idmedintra } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria ''.
	 */
	public ImpMedIntra[] findAll() throws ImpMedIntraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDMEDINTRA", null );
	}

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'IDMEDINTRA = :idmedintra'.
	 */
	public ImpMedIntra[] findWhereIdmedintraEquals(int idmedintra) throws ImpMedIntraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDMEDINTRA = ? ORDER BY IDMEDINTRA", new Object[] {  new Integer(idmedintra) } );
	}

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'IDHOJAIMP = :idhojaimp'.
	 */
	public ImpMedIntra[] findWhereIdhojaimpEquals(int idhojaimp) throws ImpMedIntraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDHOJAIMP = ? ORDER BY IDHOJAIMP", new Object[] {  new Integer(idhojaimp) } );
	}

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'PROFI_ANTIBIO = :profiAntibio'.
	 */
	public ImpMedIntra[] findWhereProfiAntibioEquals(int profiAntibio) throws ImpMedIntraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROFI_ANTIBIO = ? ORDER BY PROFI_ANTIBIO", new Object[] {  new Integer(profiAntibio) } );
	}

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'PROFI_ANTIBIO_OTRA = :profiAntibioOtra'.
	 */
	public ImpMedIntra[] findWhereProfiAntibioOtraEquals(String profiAntibioOtra) throws ImpMedIntraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROFI_ANTIBIO_OTRA = ? ORDER BY PROFI_ANTIBIO_OTRA", new Object[] { profiAntibioOtra } );
	}

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'ANTICOAG = :anticoag'.
	 */
	public ImpMedIntra[] findWhereAnticoagEquals(int anticoag) throws ImpMedIntraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANTICOAG = ? ORDER BY ANTICOAG", new Object[] {  new Integer(anticoag) } );
	}

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'ANTICOAG_OTRA = :anticoagOtra'.
	 */
	public ImpMedIntra[] findWhereAnticoagOtraEquals(String anticoagOtra) throws ImpMedIntraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANTICOAG_OTRA = ? ORDER BY ANTICOAG_OTRA", new Object[] { anticoagOtra } );
	}

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'ANTICOAG_RETIRADA = :anticoagRetirada'.
	 */
	public ImpMedIntra[] findWhereAnticoagRetiradaEquals(int anticoagRetirada) throws ImpMedIntraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANTICOAG_RETIRADA = ? ORDER BY ANTICOAG_RETIRADA", new Object[] {  new Integer(anticoagRetirada) } );
	}

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'INR = :inr'.
	 */
	public ImpMedIntra[] findWhereInrEquals(String inr) throws ImpMedIntraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INR = ? ORDER BY INR", new Object[] { inr } );
	}

	/** 
	 * Returns all rows from the imp_med_intra table that match the criteria 'OBSERVACIONES = :observaciones'.
	 */
	public ImpMedIntra[] findWhereObservacionesEquals(String observaciones) throws ImpMedIntraDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OBSERVACIONES = ? ORDER BY OBSERVACIONES", new Object[] { observaciones } );
	}

	/**
	 * Method 'ImpMedIntraDaoImpl'
	 * 
	 */
	public ImpMedIntraDaoImpl()
	{
	}
	public ImpMedIntraDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	/**
	 * Method 'ImpMedIntraDaoImpl'
	 * 
	 * @param userConn
	 */
	public ImpMedIntraDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}
	public ImpMedIntraDaoImpl(final java.sql.Connection userConn, String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "imp_med_intra";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ImpMedIntra fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ImpMedIntra dto = new ImpMedIntra();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ImpMedIntra[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ImpMedIntra dto = new ImpMedIntra();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ImpMedIntra ret[] = new ImpMedIntra[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ImpMedIntra dto, ResultSet rs) throws SQLException
	{
		dto.setIdmedintra( new Integer( rs.getInt(COLUMN_IDMEDINTRA) ) );
		dto.setIdhojaimp( new Integer( rs.getInt(COLUMN_IDHOJAIMP) ) );
		if (rs.wasNull()) {
			dto.setIdhojaimp( null );
		}
		
		dto.setProfiAntibio( new Integer( rs.getInt(COLUMN_PROFI_ANTIBIO) ) );
		if (rs.wasNull()) {
			dto.setProfiAntibio( null );
		}
		
		dto.setProfiAntibioOtra( rs.getString( COLUMN_PROFI_ANTIBIO_OTRA ) );
		dto.setAnticoag( new Integer( rs.getInt(COLUMN_ANTICOAG) ) );
		if (rs.wasNull()) {
			dto.setAnticoag( null );
		}
		
		dto.setAnticoagOtra( rs.getString( COLUMN_ANTICOAG_OTRA ) );
		dto.setAnticoagRetirada( new Integer( rs.getInt(COLUMN_ANTICOAG_RETIRADA) ) );
		if (rs.wasNull()) {
			dto.setAnticoagRetirada( null );
		}
		
		dto.setInr( rs.getString( COLUMN_INR ) );
		dto.setObservaciones( rs.getString( COLUMN_OBSERVACIONES ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ImpMedIntra dto)
	{
	}

	/** 
	 * Returns all rows from the imp_med_intra table that match the specified arbitrary SQL statement
	 */
	public ImpMedIntra[] findByDynamicSelect(String sql, Object[] sqlParams) throws ImpMedIntraDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpMedIntraDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the imp_med_intra table that match the specified arbitrary SQL statement
	 */
	public ImpMedIntra[] findByDynamicWhere(String sql, Object[] sqlParams) throws ImpMedIntraDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpMedIntraDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
