/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;


import java.util.Date;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import org.apache.tomcat.dbcp.dbcp.DelegatingPreparedStatement;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.util.UtilCodifi;
import com.sorin.idea.util.UtilFechas;

import oracle.jdbc.OracleTypes;


public class ArrTestFleDaoImpl extends AbstractDAO implements ArrTestFleDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
    public long getMAX_REGISTROS_SQL() {
		return 10000;
	}
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT CODIGO_PACIENTE, CODIGO_TEST, CLINICO, ECG, INTERVALOS, QRS, COMPLICA, TRATAM, V1, V2, RESULTADO, FECHA, COMPLICAOTR, NPROC FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( CODIGO_PACIENTE, CODIGO_TEST, CLINICO, ECG, INTERVALOS, QRS, COMPLICA, TRATAM, V1, V2, RESULTADO, FECHA, COMPLICAOTR, NPROC ) VALUES ( ?, null, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )  ";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET CODIGO_PACIENTE = ?, CODIGO_TEST = ?, CLINICO = ?, ECG = ?, INTERVALOS = ?, QRS = ?, COMPLICA = ?, TRATAM = ?, V1 = ?, V2 = ?, RESULTADO = ?, FECHA = ?, COMPLICAOTR = ?, NPROC = ? WHERE CODIGO_TEST = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE CODIGO_TEST = ?";

	/** 
	 * Index of column CODIGO_PACIENTE
	 */
	protected static final int COLUMN_CODIGO_PACIENTE = 1;

	/** 
	 * Index of column CODIGO_TEST
	 */
	protected static final int COLUMN_CODIGO_TEST = 2;

	/** 
	 * Index of column CLINICO
	 */
	protected static final int COLUMN_CLINICO = 3;

	/** 
	 * Index of column ECG
	 */
	protected static final int COLUMN_ECG = 4;

	/** 
	 * Index of column INTERVALOS
	 */
	protected static final int COLUMN_INTERVALOS = 5;

	/** 
	 * Index of column QRS
	 */
	protected static final int COLUMN_QRS = 6;

	/** 
	 * Index of column COMPLICA
	 */
	protected static final int COLUMN_COMPLICA = 7;

	/** 
	 * Index of column TRATAM
	 */
	protected static final int COLUMN_TRATAM = 8;

	/** 
	 * Index of column V1
	 */
	protected static final int COLUMN_V1 = 9;

	/** 
	 * Index of column V2
	 */
	protected static final int COLUMN_V2 = 10;

	/** 
	 * Index of column RESULTADO
	 */
	protected static final int COLUMN_RESULTADO = 11;

	/** 
	 * Index of column FECHA
	 */
	protected static final int COLUMN_FECHA = 12;
	
	protected static final int COLUMN_COMPLICAOTR = 13;
	/** 
	 * Index of column NPROC
	 */
	protected static final int COLUMN_NPROC = 14;
	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 14;

	/** 
	 * Index of primary-key column CODIGO_TEST
	 */
	protected static final int PK_COLUMN_CODIGO_TEST = 1;

	/** 
	 * Inserts a new row in the ARR_TEST_FLE table.
	 */
	public ArrTestFlePk insert(ArrTestFle dto) throws ArrTestFleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			
			int index = 1;
			if (dto.getCodigoPaciente() != null) {
				stmt.setInt( index++, dto.getCodigoPaciente().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
		
			if (dto.getClinico() != null) {
				stmt.setInt( index++, dto.getClinico().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEcg() != null) {
				stmt.setInt( index++, dto.getEcg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIntervalos() != null) {
				stmt.setInt( index++, dto.getIntervalos().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getQrs() != null) {
				stmt.setInt( index++, dto.getQrs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getComplica() != null) {
				stmt.setInt( index++, dto.getComplica().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTratam() != null) {
				stmt.setInt( index++, dto.getTratam().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getV1() != null) {
				stmt.setInt( index++, dto.getV1().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getV2() != null) {
				stmt.setInt( index++, dto.getV2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getResultado() != null) {
				stmt.setInt( index++, dto.getResultado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			stmt.setString( index++, dto.getComplicaotr());
			stmt.setString( index++, dto.getNproc() );

			int rows = stmt.executeUpdate();
			stmt = null;
			stmt = conn.prepareStatement("SELECT LAST_INSERT_ID() id");
			ResultSet a = stmt.executeQuery();
			while (a.next()) {
				dto.setCodigoTest((int) a.getLong(1));
			}
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.insercion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			throw new ArrTestFleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the ARR_TEST_FLE table.
	 */
	public void update(ArrTestFlePk pk, ArrTestFle dto) throws ArrTestFleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getCodigoPaciente() != null) {
				stmt.setInt( index++, dto.getCodigoPaciente().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCodigoTest() != null) {
				stmt.setInt( index++, dto.getCodigoTest().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getClinico() != null) {
				stmt.setInt( index++, dto.getClinico().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEcg() != null) {
				stmt.setInt( index++, dto.getEcg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIntervalos() != null) {
				stmt.setInt( index++, dto.getIntervalos().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getQrs() != null) {
				stmt.setInt( index++, dto.getQrs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getComplica() != null) {
				stmt.setInt( index++, dto.getComplica().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTratam() != null) {
				stmt.setInt( index++, dto.getTratam().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getV1() != null) {
				stmt.setInt( index++, dto.getV1().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getV2() != null) {
				stmt.setInt( index++, dto.getV2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getResultado() != null) {
				stmt.setInt( index++, dto.getResultado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			stmt.setString( index++, dto.getComplicaotr());
			stmt.setString( index++, dto.getNproc() );
			if (pk.getCodigoTest() != null) {
				stmt.setInt( 15, pk.getCodigoTest().intValue() );
			} else {
				stmt.setNull(15, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrTestFleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the ARR_TEST_FLE table.
	 */
	public void delete(ArrTestFlePk pk) throws ArrTestFleDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getCodigoTest() != null) {
				stmt.setInt( 1, pk.getCodigoTest().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(pk.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrTestFleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the ARR_TEST_FLE table that matches the specified primary-key value.
	 */
	public ArrTestFle findByPrimaryKey(ArrTestFlePk pk) throws ArrTestFleDaoException
	{
		return findByPrimaryKey( pk.getCodigoTest() );
	}

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'CODIGO_TEST = :codigoTest'.
	 */
	public ArrTestFle findByPrimaryKey(Integer codigoTest) throws ArrTestFleDaoException
	{
		ArrTestFle ret[] = findByDynamicSelect( SQL_SELECT + " WHERE CODIGO_TEST = ?", new Object[] { codigoTest } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria ''.
	 */
	public ArrTestFle[] findAll() throws ArrTestFleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY CODIGO_TEST", null );
	}

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'CODIGO_PACIENTE = :codigoPaciente'.
	 */
	public ArrTestFle[] findWhereCodigoPacienteEquals(long codigoPaciente) throws ArrTestFleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CODIGO_PACIENTE = ? ORDER BY FECHA DESC", new Object[] {  new Long(codigoPaciente) } );
	}

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'CODIGO_TEST = :codigoTest'.
	 */
	public ArrTestFle[] findWhereCodigoTestEquals(long codigoTest) throws ArrTestFleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CODIGO_TEST = ? ORDER BY CODIGO_TEST", new Object[] {  new Long(codigoTest) } );
	}

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'CLINICO = :clinico'.
	 */
	public ArrTestFle[] findWhereClinicoEquals(long clinico) throws ArrTestFleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLINICO = ? ORDER BY CLINICO", new Object[] {  new Long(clinico) } );
	}

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'ECG = :ecg'.
	 */
	public ArrTestFle[] findWhereEcgEquals(long ecg) throws ArrTestFleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ECG = ? ORDER BY ECG", new Object[] {  new Long(ecg) } );
	}

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'INTERVALOS = :intervalos'.
	 */
	public ArrTestFle[] findWhereIntervalosEquals(long intervalos) throws ArrTestFleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INTERVALOS = ? ORDER BY INTERVALOS", new Object[] {  new Long(intervalos) } );
	}

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'QRS = :qrs'.
	 */
	public ArrTestFle[] findWhereQrsEquals(long qrs) throws ArrTestFleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE QRS = ? ORDER BY QRS", new Object[] {  new Long(qrs) } );
	}

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'COMPLICA = :complica'.
	 */
	public ArrTestFle[] findWhereComplicaEquals(long complica) throws ArrTestFleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMPLICA = ? ORDER BY COMPLICA", new Object[] {  new Long(complica) } );
	}

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'TRATAM = :tratam'.
	 */
	public ArrTestFle[] findWhereTratamEquals(long tratam) throws ArrTestFleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TRATAM = ? ORDER BY TRATAM", new Object[] {  new Long(tratam) } );
	}

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'V1 = :v1'.
	 */
	public ArrTestFle[] findWhereV1Equals(long v1) throws ArrTestFleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE V1 = ? ORDER BY V1", new Object[] {  new Long(v1) } );
	}

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'V2 = :v2'.
	 */
	public ArrTestFle[] findWhereV2Equals(long v2) throws ArrTestFleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE V2 = ? ORDER BY V2", new Object[] {  new Long(v2) } );
	}

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'RESULTADO = :resultado'.
	 */
	public ArrTestFle[] findWhereResultadoEquals(long resultado) throws ArrTestFleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RESULTADO = ? ORDER BY RESULTADO", new Object[] {  new Long(resultado) } );
	}

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'FECHA = :fecha'.
	 */
	public ArrTestFle[] findWhereFechaEquals(Date fecha) throws ArrTestFleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA = ? ORDER BY FECHA", new Object[] { fecha==null ? null : new java.sql.Timestamp( fecha.getTime() ) } );
	}
	/** 
	 * Returns all rows from the arr_test_fle table that match the criteria 'NPROC = :nproc'.
	 */
	public ArrTestFle[] findWhereNprocEquals(String nproc) throws ArrTestFleDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NPROC = ? ORDER BY NPROC", new Object[] { nproc } );
	}
	/** 
	 * ESTADISTICAS
	 */
	public ArrayList<ArrayList<Object>> getEstadisticas(Date fechaini,Date fechafin,ArrTestFle test) throws ArrTestFleDaoException{
		StringBuffer sql = new StringBuffer();
		sql.append("select pac.nhc paciente,");
		sql.append("fle.fecha FECHA,");
		sql.append("m1.valor MOTIVO_CLINICO,");
		sql.append("m2.valor MOTIVO_ECG,");
		sql.append("m3.valor RESULTADO,");
		sql.append("fle.v1 V1,");
		sql.append("fle.v2 V2,");
		sql.append("m5.valor COMPLICACIONES,");
		sql.append("fle.complicaotr OTRAS_COMPLICA,");
		sql.append("m6.valor TRATAMIENTO,");
		sql.append("m7.valor RITMO_BASAL,");
		sql.append("ecg.idconduccion CONDUCCION_AV,");
		sql.append("m8.valor CONDUCCION_AV_NO_NORMAL,");
		sql.append("ecg.idqrs QRS_NORMAL,");
		sql.append("m9.valor QRS_NO_NORMAL,");
		sql.append("ecg.rr RR,");
		sql.append("ecg.pr PR,");
		sql.append("ecg.qrs QRS,");
		sql.append("ecg.qt QT,");
		sql.append("ecg.qtc QTC,");
		sql.append("ecg.comentarios COMENTARIOS");
		sql.append(" from arr_pacientes pac, ");
		sql.append(" arr_test_fle_ecg ecg");
		sql.append(" left outer join arr_maestras m7 on ecg.idritmo = m7.codigo");
		sql.append(" left outer join arr_maestras m8 on ecg.idconduccionno = m8.codigo");
		sql.append(" left outer join arr_maestras m9 on ecg.idqrsno = m9.codigo,");
		sql.append(" arr_test_fle fle");
		sql.append(" left outer join arr_maestras m1 on fle.clinico = m1.codigo");
		sql.append(" left outer join arr_maestras m2 on fle.ecg = m2.codigo");
		sql.append(" left outer join arr_maestras m3 on fle.resultado = m3.codigo");
		sql.append(" left outer join arr_maestras m5 on fle.complica = m5.codigo");
		sql.append(" left outer join arr_maestras m6 on fle.tratam = m6.codigo");
		sql.append(" where pac.codigo = fle.codigo_paciente");
		sql.append(" and fle.codigo_test = ecg.idtest");
		sql.append(" and fle.fecha between '"+UtilFechas.getFechaString(fechaini)+"' and '"+UtilFechas.getFechaString(fechafin)+"'");
		sql.append(generaWhere(test));
		sql.append(" order by 1");
		
		return findByDynamicSelect(sql.toString());
	}
	
	private String generaWhere(ArrTestFle test){
		String where = "";
		if(test.getClinico() != null && test.getClinico() > 0)
			where += " and fle.clinico = " + test.getClinico();
		if(test.getEcg() != null && test.getEcg() > 0)
			where += " and fle.ecg = " + test.getEcg();
		if(test.getResultado() != null && test.getResultado() > 0)
			where += " and fle.resultado = " + test.getResultado();
		if(test.getComplica() != null && test.getComplica() > 0)
			where += " and fle.complica = " + test.getComplica();
		return where;
	}

	/**
	 * Method 'ArrTestFleDaoImpl'
	 * 
	 */
	public ArrTestFleDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ArrTestFleDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ArrTestFleDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrTestFleDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		//return "idea.ARR_TEST_FLE";
		return "idea.arr_test_fle";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrTestFle fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrTestFle dto = new ArrTestFle();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrTestFle[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrTestFle dto = new ArrTestFle();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrTestFle ret[] = new ArrTestFle[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
	
	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrTestFle dto, ResultSet rs) throws SQLException
	{
		dto.setCodigoPaciente( new Integer( rs.getInt(COLUMN_CODIGO_PACIENTE) ) );
		dto.setCodigoTest( new Integer( rs.getInt(COLUMN_CODIGO_TEST) ) );
		dto.setClinico( new Integer( rs.getInt(COLUMN_CLINICO) ) );
		if (rs.wasNull()) {
			dto.setClinico( null );
		}
		
		dto.setEcg( new Integer( rs.getInt(COLUMN_ECG) ) );
		if (rs.wasNull()) {
			dto.setEcg( null );
		}
		
		dto.setIntervalos( new Integer( rs.getInt(COLUMN_INTERVALOS) ) );
		if (rs.wasNull()) {
			dto.setIntervalos( null );
		}
		
		dto.setQrs( new Integer( rs.getInt(COLUMN_QRS) ) );
		if (rs.wasNull()) {
			dto.setQrs( null );
		}
		
		dto.setComplica( new Integer( rs.getInt(COLUMN_COMPLICA) ) );
		if (rs.wasNull()) {
			dto.setComplica( null );
		}
		
		dto.setTratam( new Integer( rs.getInt(COLUMN_TRATAM) ) );
		if (rs.wasNull()) {
			dto.setTratam( null );
		}
		
		dto.setV1( new Integer( rs.getInt(COLUMN_V1) ) );
		if (rs.wasNull()) {
			dto.setV1( null );
		}
		
		dto.setV2( new Integer( rs.getInt(COLUMN_V2) ) );
		if (rs.wasNull()) {
			dto.setV2( null );
		}
		
		dto.setResultado( new Integer( rs.getInt(COLUMN_RESULTADO) ) );
		if (rs.wasNull()) {
			dto.setResultado( null );
		}
		
		dto.setFecha( rs.getTimestamp(COLUMN_FECHA ) );
		dto.setComplicaotr(rs.getString(COLUMN_COMPLICAOTR));
		dto.setNproc( rs.getString( COLUMN_NPROC ) );
	}
	

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrTestFle dto)
	{
	}

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the specified arbitrary SQL statement
	 */
	public ArrTestFle[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrTestFleDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrTestFleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the specified arbitrary SQL statement
	 */
	public ArrayList<ArrayList<Object>> findByDynamicSelect(String sql) throws ArrTestFleDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return UtilCodifi.Results2Array(rs);
		}
		catch (Exception _e) {
			throw new ArrTestFleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the specified arbitrary SQL statement
	 */
	public ArrTestFle[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrTestFleDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrTestFleDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	public ArrayList<ArrayList<Object>> getEstadisticasFLE(Date fechaini, Date fechafin) throws ArrTestFleDaoException{
		StringBuffer sql = new StringBuffer();
		sql.append("select test.resultado RESULTADO ");
		sql.append(" from procedimiento proc, ");
		sql.append(" arr_test_fle test ");
		sql.append(" WHERE proc.fecha between '"+UtilFechas.getFechaString(fechaini)+"' and '"+UtilFechas.getFechaString(fechafin)+"'");
		//sql.append(" WHERE proc.fecha >='"+UtilFechas.dateToString2(new Date(fechaini.getYear(),fechaini.getMonth(),fechaini.getDay()))+"'");
		//sql.append(" and proc.fecha <='"+UtilFechas.dateToString2(new Date(fechafin.getYear(),fechafin.getMonth(),fechafin.getDay()))+"'");
		sql.append(" and proc.tipoprocedimiento = 1065 ");
		sql.append(" and proc.idprocedimiento = test.codigo_test ");
		
		return findByDynamicSelect(sql.toString());
	}

	@Override
	public ArrTestFle[] findWhereComplicaotrEquals(String complicaotr)
			throws ArrTestFleDaoException {
		// TODO Auto-generated method stub
		return null;
	}

}
