/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;


import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;

public class ArrEnfIntroductoresDaoImpl extends AbstractDAO implements ArrEnfIntroductoresDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_REG, NUMERO, CALIBRE, TIPO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_REG, NUMERO, CALIBRE, TIPO ) VALUES ( ?, ?, ?, ? )";
	
	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_REG = ?";

	/** 
	 * Index of column ID_REG
	 */
	protected static final int COLUMN_ID_REG = 1; 

	/** 
	 * Index of column NUMERO
	 */
	protected static final int COLUMN_NUMERO = 2;

	/** 
	 * Index of column CALIBRE
	 */
	protected static final int COLUMN_CALIBRE = 3;

	/** 
	 * Index of column TIPO
	 */
	protected static final int COLUMN_TIPO = 4;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 4;

	/** 
	 * Inserts a new row in the ARR_ENF_INTRODUCTORES table.
	 */
	public void insert(ArrEnfIntroductores dto) throws ArrEnfIntroductoresDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.getIdReg() != null) {
				stmt.setInt( index++, dto.getIdReg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNumero() );
			stmt.setString( index++, dto.getCalibre() );
			stmt.setString( index++, dto.getTipo() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			reset(dto);
		}
		catch (Exception _e) {
			throw new ArrEnfIntroductoresDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	/** 
	 * Deletes a single row in the ARR_ENF table.
	 */
	public void delete(Integer codEnf) throws ArrEnfIntroductoresDaoException{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (codEnf != null) {
				stmt.setInt( 1, codEnf );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrEnfIntroductoresDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	

	/** 
	 * Returns all rows from the ARR_ENF_INTRODUCTORES table that match the criteria ''.
	 */
	public ArrEnfIntroductores[] findAll() throws ArrEnfIntroductoresDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the ARR_ENF_INTRODUCTORES table that match the criteria 'ID_REG = :idReg'.
	 */
	public ArrEnfIntroductores[] findWhereIdRegEquals(long idReg) throws ArrEnfIntroductoresDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_REG = ? ORDER BY ID_REG", new Object[] {  new Long(idReg) } );
	}

	/** 
	 * Returns all rows from the ARR_ENF_INTRODUCTORES table that match the criteria 'NUMERO = :numero'.
	 */
	public ArrEnfIntroductores[] findWhereNumeroEquals(String numero) throws ArrEnfIntroductoresDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMERO = ? ORDER BY NUMERO", new Object[] { numero } );
	}

	/** 
	 * Returns all rows from the ARR_ENF_INTRODUCTORES table that match the criteria 'CALIBRE = :calibre'.
	 */
	public ArrEnfIntroductores[] findWhereCalibreEquals(String calibre) throws ArrEnfIntroductoresDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CALIBRE = ? ORDER BY CALIBRE", new Object[] { calibre } );
	}

	/** 
	 * Returns all rows from the ARR_ENF_INTRODUCTORES table that match the criteria 'TIPO = :tipo'.
	 */
	public ArrEnfIntroductores[] findWhereTipoEquals(String tipo) throws ArrEnfIntroductoresDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO = ? ORDER BY TIPO", new Object[] { tipo } );
	}

	/**
	 * Method 'ArrEnfIntroductoresDaoImpl'
	 * 
	 */
	public ArrEnfIntroductoresDaoImpl()
	{
	}

	/**
	 * Method 'ArrEnfIntroductoresDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrEnfIntroductoresDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		//return "idea.ARR_ENF_INTRODUCTORES";
		return "idea.arr_enf_introductores";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrEnfIntroductores fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrEnfIntroductores dto = new ArrEnfIntroductores();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrEnfIntroductores[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrEnfIntroductores dto = new ArrEnfIntroductores();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrEnfIntroductores ret[] = new ArrEnfIntroductores[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrEnfIntroductores dto, ResultSet rs) throws SQLException
	{
		dto.setIdReg( new Integer( rs.getInt(COLUMN_ID_REG) ) );
		if (rs.wasNull()) {
			dto.setIdReg( null );
		}
		
		dto.setNumero( rs.getString( COLUMN_NUMERO ) );
		dto.setCalibre( rs.getString( COLUMN_CALIBRE ) );
		dto.setTipo( rs.getString( COLUMN_TIPO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrEnfIntroductores dto)
	{
	}

	/** 
	 * Returns all rows from the ARR_ENF_INTRODUCTORES table that match the specified arbitrary SQL statement
	 */
	public ArrEnfIntroductores[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrEnfIntroductoresDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrEnfIntroductoresDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the ARR_ENF_INTRODUCTORES table that match the specified arbitrary SQL statement
	 */
	public ArrEnfIntroductores[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrEnfIntroductoresDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrEnfIntroductoresDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
