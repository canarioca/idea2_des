/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.util.UtilCodifi;
import com.sorin.idea.util.UtilFechas;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ProcedimientoDaoImpl extends AbstractDAO implements ProcedimientoDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDPROCEDIMIENTO, TIPOPROCEDIMIENTO, CODIGO, IDSITCLINICA, FECHA, INTEGRADO, FECHAINTEGRACION, IDEPISODIO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDPROCEDIMIENTO, TIPOPROCEDIMIENTO, CODIGO, IDSITCLINICA, FECHA, INTEGRADO, FECHAINTEGRACION, IDEPISODIO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDPROCEDIMIENTO = ?, TIPOPROCEDIMIENTO = ?, CODIGO = ?, IDSITCLINICA = ?, FECHA = ?, INTEGRADO = ?, FECHAINTEGRACION = ?, IDEPISODIO = ? WHERE IDPROCEDIMIENTO = ? AND TIPOPROCEDIMIENTO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDPROCEDIMIENTO = ? AND TIPOPROCEDIMIENTO = ?";

	/** 
	 * Index of column IDPROCEDIMIENTO
	 */
	protected static final int COLUMN_IDPROCEDIMIENTO = 1;

	/** 
	 * Index of column TIPOPROCEDIMIENTO
	 */
	protected static final int COLUMN_TIPOPROCEDIMIENTO = 2;

	/** 
	 * Index of column CODIGO
	 */
	protected static final int COLUMN_CODIGO = 3;

	/** 
	 * Index of column IDSITCLINICA
	 */
	protected static final int COLUMN_IDSITCLINICA = 4;

	/** 
	 * Index of column FECHA
	 */
	protected static final int COLUMN_FECHA = 5;

	/** 
	 * Index of column INTEGRADO
	 */
	protected static final int COLUMN_INTEGRADO = 6;

	/** 
	 * Index of column FECHAINTEGRACION
	 */
	protected static final int COLUMN_FECHAINTEGRACION = 7;

	/** 
	 * Index of column IDEPISODIO
	 */
	protected static final int COLUMN_IDEPISODIO = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column IDPROCEDIMIENTO
	 */
	protected static final int PK_COLUMN_IDPROCEDIMIENTO = 1;

	/** 
	 * Index of primary-key column TIPOPROCEDIMIENTO
	 */
	protected static final int PK_COLUMN_TIPOPROCEDIMIENTO = 2;

	/** 
	 * Inserts a new row in the procedimiento table.
	 */
	public ProcedimientoPk insert(Procedimiento dto) throws ProcedimientoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.getIdprocedimiento() != null) {
				stmt.setInt( index++, dto.getIdprocedimiento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTipoprocedimiento() != null) {
				stmt.setInt( index++, dto.getTipoprocedimiento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCodigo() != null) {
				stmt.setInt( index++, dto.getCodigo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdsitclinica() != null) {
				stmt.setInt( index++, dto.getIdsitclinica().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			if (dto.getIntegrado() != null) {
				stmt.setInt( index++, dto.getIntegrado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFechaintegracion()==null ? null : new java.sql.Date( dto.getFechaintegracion().getTime() ) );
			if (dto.getIdepisodio() != null) {
				stmt.setInt( index++, dto.getIdepisodio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProcedimientoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the procedimiento table.
	 */
	public void update(ProcedimientoPk pk, Procedimiento dto) throws ProcedimientoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdprocedimiento() != null) {
				stmt.setInt( index++, dto.getIdprocedimiento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTipoprocedimiento() != null) {
				stmt.setInt( index++, dto.getTipoprocedimiento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCodigo() != null) {
				stmt.setInt( index++, dto.getCodigo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdsitclinica() != null) {
				stmt.setInt( index++, dto.getIdsitclinica().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			if (dto.getIntegrado() != null) {
				stmt.setInt( index++, dto.getIntegrado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFechaintegracion()==null ? null : new java.sql.Date( dto.getFechaintegracion().getTime() ) );
			if (dto.getIdepisodio() != null) {
				stmt.setInt( index++, dto.getIdepisodio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (pk.getIdprocedimiento() != null) {
				stmt.setInt( 9, pk.getIdprocedimiento().intValue() );
			} else {
				stmt.setNull(9, java.sql.Types.INTEGER);
			}
		
			if (pk.getTipoprocedimiento() != null) {
				stmt.setInt( 10, pk.getTipoprocedimiento().intValue() );
			} else {
				stmt.setNull(10, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProcedimientoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the procedimiento table.
	 */
	public void delete(ProcedimientoPk pk) throws ProcedimientoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdprocedimiento() != null) {
				stmt.setInt( 1, pk.getIdprocedimiento().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			if (pk.getTipoprocedimiento() != null) {
				stmt.setInt( 2, pk.getTipoprocedimiento().intValue() );
			} else {
				stmt.setNull(2, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProcedimientoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the procedimiento table that matches the specified primary-key value.
	 */
	public Procedimiento findByPrimaryKey(ProcedimientoPk pk) throws ProcedimientoDaoException
	{
		return findByPrimaryKey( pk.getIdprocedimiento(), pk.getTipoprocedimiento() );
	}

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'IDPROCEDIMIENTO = :idprocedimiento AND TIPOPROCEDIMIENTO = :tipoprocedimiento'.
	 */
	public Procedimiento findByPrimaryKey(Integer idprocedimiento, Integer tipoprocedimiento) throws ProcedimientoDaoException
	{
		Procedimiento ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDPROCEDIMIENTO = ? AND TIPOPROCEDIMIENTO = ?", new Object[] { idprocedimiento, tipoprocedimiento } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the procedimiento table that match the criteria ''.
	 */
	public Procedimiento[] findAll() throws ProcedimientoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDPROCEDIMIENTO, TIPOPROCEDIMIENTO", null );
	}

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'IDPROCEDIMIENTO = :idprocedimiento'.
	 */
	public Procedimiento[] findWhereIdprocedimientoEquals(int idprocedimiento) throws ProcedimientoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPROCEDIMIENTO = ? ORDER BY IDPROCEDIMIENTO", new Object[] {  new Integer(idprocedimiento) } );
	}

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'TIPOPROCEDIMIENTO = :tipoprocedimiento'.
	 */
	public Procedimiento[] findWhereTipoprocedimientoEquals(int tipoprocedimiento) throws ProcedimientoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPOPROCEDIMIENTO = ? ORDER BY TIPOPROCEDIMIENTO", new Object[] {  new Integer(tipoprocedimiento) } );
	}

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'CODIGO = :codigo'.
	 */
	public Procedimiento[] findWhereCodigoEquals(int codigo) throws ProcedimientoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CODIGO = ? ORDER BY CODIGO", new Object[] {  new Integer(codigo) } );
	}

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'IDSITCLINICA = :idsitclinica'.
	 */
	public Procedimiento[] findWhereIdsitclinicaEquals(int idsitclinica) throws ProcedimientoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDSITCLINICA = ? ORDER BY IDSITCLINICA", new Object[] {  new Integer(idsitclinica) } );
	}

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'FECHA = :fecha'.
	 */
	public Procedimiento[] findWhereFechaEquals(Date fecha) throws ProcedimientoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA = ? ORDER BY FECHA", new Object[] { fecha==null ? null : new java.sql.Date( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'INTEGRADO = :integrado'.
	 */
	public Procedimiento[] findWhereIntegradoEquals(int integrado) throws ProcedimientoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INTEGRADO = ? ORDER BY INTEGRADO", new Object[] {  new Integer(integrado) } );
	}

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'FECHAINTEGRACION = :fechaintegracion'.
	 */
	public Procedimiento[] findWhereFechaintegracionEquals(Date fechaintegracion) throws ProcedimientoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAINTEGRACION = ? ORDER BY FECHAINTEGRACION", new Object[] { fechaintegracion==null ? null : new java.sql.Date( fechaintegracion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'IDEPISODIO = :idepisodio'.
	 */
	public Procedimiento[] findWhereIdepisodioEquals(int idepisodio) throws ProcedimientoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDEPISODIO = ? ORDER BY IDEPISODIO", new Object[] {  new Integer(idepisodio) } );
	}

	/**
	 * Method 'ProcedimientoDaoImpl'
	 * 
	 */
	public ProcedimientoDaoImpl()
	{
	}
	public ProcedimientoDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ProcedimientoDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ProcedimientoDaoImpl'
	 * 
	 * @param userConn
	 */
	public ProcedimientoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.procedimiento";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Procedimiento fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Procedimiento dto = new Procedimiento();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Procedimiento[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Procedimiento dto = new Procedimiento();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Procedimiento ret[] = new Procedimiento[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Procedimiento dto, ResultSet rs) throws SQLException
	{
		dto.setIdprocedimiento( new Integer( rs.getInt(COLUMN_IDPROCEDIMIENTO) ) );
		dto.setTipoprocedimiento( new Integer( rs.getInt(COLUMN_TIPOPROCEDIMIENTO) ) );
		dto.setCodigo( new Integer( rs.getInt(COLUMN_CODIGO) ) );
		dto.setIdsitclinica( new Integer( rs.getInt(COLUMN_IDSITCLINICA) ) );
		if (rs.wasNull()) {
			dto.setIdsitclinica( null );
		}
		
		dto.setFecha( rs.getDate(COLUMN_FECHA ) );
		dto.setIntegrado( new Integer( rs.getInt(COLUMN_INTEGRADO) ) );
		if (rs.wasNull()) {
			dto.setIntegrado( null );
		}
		
		dto.setFechaintegracion( rs.getDate(COLUMN_FECHAINTEGRACION ) );
		dto.setIdepisodio( new Integer( rs.getInt(COLUMN_IDEPISODIO) ) );
		if (rs.wasNull()) {
			dto.setIdepisodio( null );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Procedimiento dto)
	{
	}

	/** 
	 * Returns all rows from the procedimiento table that match the specified arbitrary SQL statement
	 */
	public Procedimiento[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProcedimientoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProcedimientoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the procedimiento table that match the specified arbitrary SQL statement
	 */
	public Procedimiento[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProcedimientoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProcedimientoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	public ArrayList<ArrayList<Object>> findByDynamicSelect(String sql) throws ProcedimientoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return UtilCodifi.Results2Array(rs);
		}
		catch (Exception _e) {
			throw new ProcedimientoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	public ArrayList<ArrayList<Object>> getNumtotalProcedimientos(Date fechaini, Date fechafin) throws ProcedimientoDaoException {
    	StringBuffer sql = new StringBuffer();
		sql.append("select proc.fecha FECHA,");
		sql.append("proc.tipoprocedimiento TIPOPROCEDIMIENTO, ");
		sql.append("proc.codigo CODIGO ");
		sql.append(" from procedimiento proc ");
		sql.append(" WHERE proc.fecha >='"+UtilFechas.getFechaString(fechaini)+"'");
		sql.append(" and proc.fecha <='"+UtilFechas.getFechaString(fechafin)+"'");
		sql.append(" and proc.tipoprocedimiento != 983");
		
		return findByDynamicSelect(sql.toString());
    }
	public ArrayList<ArrayList<Object>> getNumtotalSeguimientos(Date fechaini, Date fechafin) throws ProcedimientoDaoException {
    	StringBuffer sql = new StringBuffer();
		sql.append("select proc.fecha FECHA,");
		sql.append("proc.tipoprocedimiento TIPOPROCEDIMIENTO, ");
		sql.append("gen.tipo TIPO, ");
		sql.append("seg.remoto REMOTO ");
		sql.append(" from procedimiento proc, ");
		sql.append(" imp_implante imp, ");
		sql.append(" seg_seguimiento seg, ");
		sql.append(" imp_hoja_implante himp, ");
		sql.append(" imp_generador impgen, ");
		sql.append(" generador gen ");
		sql.append(" WHERE proc.fecha >='"+UtilFechas.dateToString2(new Date(fechaini.getYear(),fechaini.getMonth(),fechaini.getDay()))+"'");
		sql.append(" and proc.fecha <='"+UtilFechas.dateToString2(new Date(fechafin.getYear(),fechafin.getMonth(),fechafin.getDay()))+"'");
		sql.append(" and proc.idprocedimiento = seg.idseg ");
		sql.append(" and proc.tipoprocedimiento = 983 ");
		sql.append(" and seg.idimpl = imp.idimplante ");
		sql.append(" and himp.idhojaimp = imp.idhojaimp ");
		sql.append(" and impgen.idhojaimp = himp.idhojaimp ");
		sql.append(" and impgen.motivoexplante IS NULL");
		sql.append(" and gen.idgenerador = impgen.idgenerador ");
		
		return findByDynamicSelect(sql.toString());
    }
	
	public ArrayList<ArrayList<Object>> getComentariosProcImp(Integer idpat) throws ProcedimientoDaoException {
    	StringBuffer sql = new StringBuffer();
		sql.append("select proc.fecha FECHA,");
		sql.append("himp.comentarios COMENTARIOS_HIMP, ");
		sql.append("ev.comentarios COMENTARIOS_EV, ");
		sql.append("proc.tipoprocedimiento TIPOPROC ");
		sql.append(" from procedimiento proc, ");
		sql.append(" imp_implante imp, ");
		sql.append(" imp_hoja_implante himp, ");
		sql.append(" imp_evolucion ev ");
		sql.append(" WHERE proc.codigo ="+idpat);
		sql.append(" and proc.idprocedimiento = imp.idimplante ");
		sql.append(" and (proc.tipoprocedimiento = 956 or proc.tipoprocedimiento = 1059 or proc.tipoprocedimiento = 1060 or proc.tipoprocedimiento = 1183 or proc.tipoprocedimiento = 957 or proc.tipoprocedimiento = 1085 or proc.tipoprocedimiento = 1086)");
		sql.append(" and imp.idhojaimp = himp.idhojaimp ");
		sql.append(" and himp.idhojaimp = imp.idhojaimp ");
		sql.append(" and imp.idev = ev.idev ");
		
		return findByDynamicSelect(sql.toString());
    }
	
	public ArrayList<ArrayList<Object>> getComentariosProcSeg(Integer idpat) throws ProcedimientoDaoException {
    	StringBuffer sql = new StringBuffer();
		sql.append("select proc.fecha FECHA,");
		sql.append("seg.comentarios COMENTARIOS_SEG, ");
		sql.append("sist.comentarios COMENTARIOS_SIST, ");
		sql.append("proc.tipoprocedimiento TIPOPROC ");
		sql.append(" from procedimiento proc, ");
		sql.append(" seg_seguimiento seg, ");
		sql.append(" seg_sistema sist ");
		sql.append(" WHERE proc.codigo ="+idpat);
		sql.append(" and proc.idprocedimiento = seg.idseg ");
		sql.append(" and proc.tipoprocedimiento = 983 ");
		sql.append(" and seg.idsistema = sist.idsistema ");
		
		return findByDynamicSelect(sql.toString());
    }

	public ArrayList<ArrayList<Object>> getDosisEscopiaAcumuladaEEF(Integer idpat) throws ProcedimientoDaoException {
    	StringBuffer sql = new StringBuffer();
		sql.append("select proc.fecha FECHA,");
		sql.append("eef.dosis_escopia DOSIS_ESCOPIA ");
		sql.append(" from procedimiento proc, ");
		sql.append(" arr_estudio eef ");
		sql.append(" WHERE proc.codigo ="+idpat);
		sql.append(" and proc.idprocedimiento = eef.idestudio ");
		sql.append(" and proc.tipoprocedimiento = 1061 ");
		
		return findByDynamicSelect(sql.toString());
    }
	
	public ArrayList<ArrayList<Object>> getDosisEscopiaAcumuladaImplantes(Integer idpat) throws ProcedimientoDaoException {
    	StringBuffer sql = new StringBuffer();
		sql.append("select proc.fecha FECHA,");
		sql.append("himp.dosis_escopia DOSIS_ESCOPIA ");
		sql.append(" from procedimiento proc, ");
		sql.append(" imp_hoja_implante himp, ");
		sql.append(" imp_implante imp ");
		sql.append(" WHERE proc.codigo ="+idpat);
		sql.append(" and (proc.tipoprocedimiento = 956 or  proc.tipoprocedimiento = 957 or proc.tipoprocedimiento = 1059 or proc.tipoprocedimiento = 1060 or proc.tipoprocedimiento = 1085 or proc.tipoprocedimiento = 1086 or proc.tipoprocedimiento = 1147 or proc.tipoprocedimiento = 1090)");
		sql.append(" and proc.idprocedimiento = imp.idimplante ");
		sql.append(" and imp.idhojaimp = himp.idhojaimp ");
		
		return findByDynamicSelect(sql.toString());
    }
	
}
