/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SituacionClinicaGeneralDaoImpl extends AbstractDAO implements SituacionClinicaGeneralDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDPACIENTE, FEVI, FUNCIONVENTRICULAR, FECHAMODFEVI, NYHA, CARDIOPATIA, AEVOLUCION, OTRA, REVASC, INFPREVIO, ANIO, LOCALIZACION, ARRITMIAS, EEF, HTA, DISLIPEMIA, DIABETES, TABAQUISMO, INGALCOHOLICA, ACV, AIT, EPOC, SAHS, TIPOSAHS, AHI, CPAP, INSRENAL, TIPOINSRENAL, NEOPLASIA, TIPONEOPLASIA, AFECTIROIDEA, ANTFA, MUERTESUBITA, NEUROMEDIADOS, TRASPLANTECARDIACO, SINCOPE, PARADACARDIACA, FECHACREACION, FECHAMOD, COMENTARIOS, AI, AI2, ENFART, EXITUS, EXITUSFECHADESC, EXITUSFECHA, FLUTTER, ALERGIAS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDPACIENTE, FEVI, FUNCIONVENTRICULAR, FECHAMODFEVI, NYHA, CARDIOPATIA, AEVOLUCION, OTRA, REVASC, INFPREVIO, ANIO, LOCALIZACION, ARRITMIAS, EEF, HTA, DISLIPEMIA, DIABETES, TABAQUISMO, INGALCOHOLICA, ACV, AIT, EPOC, SAHS, TIPOSAHS, AHI, CPAP, INSRENAL, TIPOINSRENAL, NEOPLASIA, TIPONEOPLASIA, AFECTIROIDEA, ANTFA, MUERTESUBITA, NEUROMEDIADOS, TRASPLANTECARDIACO, SINCOPE, PARADACARDIACA, FECHACREACION, FECHAMOD, COMENTARIOS, AI, AI2, ENFART, EXITUS, EXITUSFECHADESC, EXITUSFECHA, FLUTTER, ALERGIAS ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDPACIENTE = ?, FEVI = ?, FUNCIONVENTRICULAR = ?, FECHAMODFEVI = ?, NYHA = ?, CARDIOPATIA = ?, AEVOLUCION = ?, OTRA = ?, REVASC = ?, INFPREVIO = ?, ANIO = ?, LOCALIZACION = ?, ARRITMIAS = ?, EEF = ?, HTA = ?, DISLIPEMIA = ?, DIABETES = ?, TABAQUISMO = ?, INGALCOHOLICA = ?, ACV = ?, AIT = ?, EPOC = ?, SAHS = ?, TIPOSAHS = ?, AHI = ?, CPAP = ?, INSRENAL = ?, TIPOINSRENAL = ?, NEOPLASIA = ?, TIPONEOPLASIA = ?, AFECTIROIDEA = ?, ANTFA = ?, MUERTESUBITA = ?, NEUROMEDIADOS = ?, TRASPLANTECARDIACO = ?, SINCOPE = ?, PARADACARDIACA = ?, FECHACREACION = ?, FECHAMOD = ?, COMENTARIOS = ?, AI = ?, AI2 = ?, ENFART = ?, EXITUS = ?, EXITUSFECHADESC = ?, EXITUSFECHA = ?, FLUTTER = ?, ALERGIAS = ? WHERE IDPACIENTE = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDPACIENTE = ?";

	/** 
	 * Index of column IDPACIENTE
	 */
	protected static final int COLUMN_IDPACIENTE = 1;

	/** 
	 * Index of column FEVI
	 */
	protected static final int COLUMN_FEVI = 2;

	/** 
	 * Index of column FUNCIONVENTRICULAR
	 */
	protected static final int COLUMN_FUNCIONVENTRICULAR = 3;

	/** 
	 * Index of column FECHAMODFEVI
	 */
	protected static final int COLUMN_FECHAMODFEVI = 4;

	/** 
	 * Index of column NYHA
	 */
	protected static final int COLUMN_NYHA = 5;

	/** 
	 * Index of column CARDIOPATIA
	 */
	protected static final int COLUMN_CARDIOPATIA = 6;

	/** 
	 * Index of column AEVOLUCION
	 */
	protected static final int COLUMN_AEVOLUCION = 7;

	/** 
	 * Index of column OTRA
	 */
	protected static final int COLUMN_OTRA = 8;

	/** 
	 * Index of column REVASC
	 */
	protected static final int COLUMN_REVASC = 9;

	/** 
	 * Index of column INFPREVIO
	 */
	protected static final int COLUMN_INFPREVIO = 10;

	/** 
	 * Index of column ANIO
	 */
	protected static final int COLUMN_ANIO = 11;

	/** 
	 * Index of column LOCALIZACION
	 */
	protected static final int COLUMN_LOCALIZACION = 12;

	/** 
	 * Index of column ARRITMIAS
	 */
	protected static final int COLUMN_ARRITMIAS = 13;

	/** 
	 * Index of column EEF
	 */
	protected static final int COLUMN_EEF = 14;

	/** 
	 * Index of column HTA
	 */
	protected static final int COLUMN_HTA = 15;

	/** 
	 * Index of column DISLIPEMIA
	 */
	protected static final int COLUMN_DISLIPEMIA = 16;

	/** 
	 * Index of column DIABETES
	 */
	protected static final int COLUMN_DIABETES = 17;

	/** 
	 * Index of column TABAQUISMO
	 */
	protected static final int COLUMN_TABAQUISMO = 18;

	/** 
	 * Index of column INGALCOHOLICA
	 */
	protected static final int COLUMN_INGALCOHOLICA = 19;

	/** 
	 * Index of column ACV
	 */
	protected static final int COLUMN_ACV = 20;

	/** 
	 * Index of column AIT
	 */
	protected static final int COLUMN_AIT = 21;

	/** 
	 * Index of column EPOC
	 */
	protected static final int COLUMN_EPOC = 22;

	/** 
	 * Index of column SAHS
	 */
	protected static final int COLUMN_SAHS = 23;

	/** 
	 * Index of column TIPOSAHS
	 */
	protected static final int COLUMN_TIPOSAHS = 24;

	/** 
	 * Index of column AHI
	 */
	protected static final int COLUMN_AHI = 25;

	/** 
	 * Index of column CPAP
	 */
	protected static final int COLUMN_CPAP = 26;

	/** 
	 * Index of column INSRENAL
	 */
	protected static final int COLUMN_INSRENAL = 27;

	/** 
	 * Index of column TIPOINSRENAL
	 */
	protected static final int COLUMN_TIPOINSRENAL = 28;

	/** 
	 * Index of column NEOPLASIA
	 */
	protected static final int COLUMN_NEOPLASIA = 29;

	/** 
	 * Index of column TIPONEOPLASIA
	 */
	protected static final int COLUMN_TIPONEOPLASIA = 30;

	/** 
	 * Index of column AFECTIROIDEA
	 */
	protected static final int COLUMN_AFECTIROIDEA = 31;

	/** 
	 * Index of column ANTFA
	 */
	protected static final int COLUMN_ANTFA = 32;

	/** 
	 * Index of column MUERTESUBITA
	 */
	protected static final int COLUMN_MUERTESUBITA = 33;

	/** 
	 * Index of column NEUROMEDIADOS
	 */
	protected static final int COLUMN_NEUROMEDIADOS = 34;

	/** 
	 * Index of column TRASPLANTECARDIACO
	 */
	protected static final int COLUMN_TRASPLANTECARDIACO = 35;

	/** 
	 * Index of column SINCOPE
	 */
	protected static final int COLUMN_SINCOPE = 36;

	/** 
	 * Index of column PARADACARDIACA
	 */
	protected static final int COLUMN_PARADACARDIACA = 37;

	/** 
	 * Index of column FECHACREACION
	 */
	protected static final int COLUMN_FECHACREACION = 38;

	/** 
	 * Index of column FECHAMOD
	 */
	protected static final int COLUMN_FECHAMOD = 39;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 40;

	/** 
	 * Index of column AI
	 */
	protected static final int COLUMN_AI = 41;

	/** 
	 * Index of column AI2
	 */
	protected static final int COLUMN_AI2 = 42;

	/** 
	 * Index of column ENFART
	 */
	protected static final int COLUMN_ENFART = 43;

	/** 
	 * Index of column EXITUS
	 */
	protected static final int COLUMN_EXITUS = 44;

	/** 
	 * Index of column EXITUSFECHADESC
	 */
	protected static final int COLUMN_EXITUSFECHADESC = 45;

	/** 
	 * Index of column EXITUSFECHA
	 */
	protected static final int COLUMN_EXITUSFECHA = 46;
	
	/** 
	 * Index of column FLUTTER
	 */
	protected static final int COLUMN_FLUTTER = 47;

	/** 
	 * Index of column FLUTTER
	 */
	protected static final int COLUMN_ALERGIAS = 48;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 48;

	/** 
	 * Index of primary-key column IDPACIENTE
	 */
	protected static final int PK_COLUMN_IDPACIENTE = 1;

	/** 
	 * Inserts a new row in the situacion_clinica_general table.
	 */
	public SituacionClinicaGeneralPk insert(SituacionClinicaGeneral dto) throws SituacionClinicaGeneralDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.getIdpaciente() != null) {
				stmt.setInt( index++, dto.getIdpaciente().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getFevi() );
			if (dto.getFuncionventricular() != null) {
				stmt.setInt( index++, dto.getFuncionventricular().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFechamodfevi()==null ? null : new java.sql.Date( dto.getFechamodfevi().getTime() ) );
			if (dto.getNyha() != null) {
				stmt.setInt( index++, dto.getNyha().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCardiopatia() != null) {
				stmt.setInt( index++, dto.getCardiopatia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAevolucion() );
			stmt.setString( index++, dto.getOtra() );
			if (dto.getRevasc() != null) {
				stmt.setShort( index++, dto.getRevasc().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getInfprevio() != null) {
				stmt.setShort( index++, dto.getInfprevio().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getAnio() );
			if (dto.getLocalizacion() != null) {
				stmt.setInt( index++, dto.getLocalizacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getArritmias() != null) {
				stmt.setInt( index++, dto.getArritmias().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEef() != null) {
				stmt.setInt( index++, dto.getEef().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHta() != null) {
				stmt.setShort( index++, dto.getHta().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getDislipemia() != null) {
				stmt.setShort( index++, dto.getDislipemia().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getDiabetes() != null) {
				stmt.setShort( index++, dto.getDiabetes().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTabaquismo() != null) {
				stmt.setShort( index++, dto.getTabaquismo().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getIngalcoholica() != null) {
				stmt.setShort( index++, dto.getIngalcoholica().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getAcv() != null) {
				stmt.setShort( index++, dto.getAcv().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getAit() != null) {
				stmt.setShort( index++, dto.getAit().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getEpoc() != null) {
				stmt.setShort( index++, dto.getEpoc().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getSahs() != null) {
				stmt.setShort( index++, dto.getSahs().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTiposahs() != null) {
				stmt.setInt( index++, dto.getTiposahs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAhi() );
			if (dto.getCpap() != null) {
				stmt.setShort( index++, dto.getCpap().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getInsrenal() != null) {
				stmt.setShort( index++, dto.getInsrenal().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTipoinsrenal() != null) {
				stmt.setInt( index++, dto.getTipoinsrenal().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNeoplasia() != null) {
				stmt.setShort( index++, dto.getNeoplasia().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getTiponeoplasia() );
			if (dto.getAfectiroidea() != null) {
				stmt.setInt( index++, dto.getAfectiroidea().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAntfa() != null) {
				stmt.setShort( index++, dto.getAntfa().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getMuertesubita() != null) {
				stmt.setShort( index++, dto.getMuertesubita().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getNeuromediados() != null) {
				stmt.setInt( index++, dto.getNeuromediados().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTrasplantecardiaco() != null) {
				stmt.setShort( index++, dto.getTrasplantecardiaco().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getSincope() != null) {
				stmt.setShort( index++, dto.getSincope().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getParadacardiaca() != null) {
				stmt.setShort( index++, dto.getParadacardiaca().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setDate(index++, dto.getFechacreacion()==null ? null : new java.sql.Date( dto.getFechacreacion().getTime() ) );
			stmt.setDate(index++, dto.getFechamod()==null ? null : new java.sql.Date( dto.getFechamod().getTime() ) );
			stmt.setString( index++, dto.getComentarios() );
			stmt.setString( index++, dto.getAi() );
			if (dto.getAi2() != null) {
				stmt.setInt( index++, dto.getAi2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEnfart() != null) {
				stmt.setInt( index++, dto.getEnfart().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getExitus() != null) {
				stmt.setInt( index++, dto.getExitus().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getExitusfechadesc() != null) {
				stmt.setInt( index++, dto.getExitusfechadesc().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getExitusfecha()==null ? null : new java.sql.Date( dto.getExitusfecha().getTime() ) );
			if (dto.getFlutter() != null) {
				stmt.setShort( index++, dto.getFlutter().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
			stmt.setString( index++, dto.getAlergias() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			/*auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);*/
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SituacionClinicaGeneralDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the situacion_clinica_general table.
	 */
	public void update(SituacionClinicaGeneralPk pk, SituacionClinicaGeneral dto) throws SituacionClinicaGeneralDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdpaciente() != null) {
				stmt.setInt( index++, dto.getIdpaciente().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getFevi() );
			if (dto.getFuncionventricular() != null) {
				stmt.setInt( index++, dto.getFuncionventricular().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFechamodfevi()==null ? null : new java.sql.Date( dto.getFechamodfevi().getTime() ) );
			if (dto.getNyha() != null) {
				stmt.setInt( index++, dto.getNyha().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCardiopatia() != null) {
				stmt.setInt( index++, dto.getCardiopatia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAevolucion() );
			stmt.setString( index++, dto.getOtra() );
			if (dto.getRevasc() != null) {
				stmt.setShort( index++, dto.getRevasc().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getInfprevio() != null) {
				stmt.setShort( index++, dto.getInfprevio().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getAnio() );
			if (dto.getLocalizacion() != null) {
				stmt.setInt( index++, dto.getLocalizacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getArritmias() != null) {
				stmt.setInt( index++, dto.getArritmias().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEef() != null) {
				stmt.setInt( index++, dto.getEef().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHta() != null) {
				stmt.setShort( index++, dto.getHta().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getDislipemia() != null) {
				stmt.setShort( index++, dto.getDislipemia().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getDiabetes() != null) {
				stmt.setShort( index++, dto.getDiabetes().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTabaquismo() != null) {
				stmt.setShort( index++, dto.getTabaquismo().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getIngalcoholica() != null) {
				stmt.setShort( index++, dto.getIngalcoholica().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getAcv() != null) {
				stmt.setShort( index++, dto.getAcv().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getAit() != null) {
				stmt.setShort( index++, dto.getAit().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getEpoc() != null) {
				stmt.setShort( index++, dto.getEpoc().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getSahs() != null) {
				stmt.setShort( index++, dto.getSahs().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTiposahs() != null) {
				stmt.setInt( index++, dto.getTiposahs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAhi() );
			if (dto.getCpap() != null) {
				stmt.setShort( index++, dto.getCpap().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getInsrenal() != null) {
				stmt.setShort( index++, dto.getInsrenal().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTipoinsrenal() != null) {
				stmt.setInt( index++, dto.getTipoinsrenal().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNeoplasia() != null) {
				stmt.setShort( index++, dto.getNeoplasia().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getTiponeoplasia() );
			if (dto.getAfectiroidea() != null) {
				stmt.setInt( index++, dto.getAfectiroidea().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAntfa() != null) {
				stmt.setShort( index++, dto.getAntfa().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getMuertesubita() != null) {
				stmt.setShort( index++, dto.getMuertesubita().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getNeuromediados() != null) {
				stmt.setInt( index++, dto.getNeuromediados().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTrasplantecardiaco() != null) {
				stmt.setShort( index++, dto.getTrasplantecardiaco().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getSincope() != null) {
				stmt.setShort( index++, dto.getSincope().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getParadacardiaca() != null) {
				stmt.setShort( index++, dto.getParadacardiaca().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setDate(index++, dto.getFechacreacion()==null ? null : new java.sql.Date( dto.getFechacreacion().getTime() ) );
			stmt.setDate(index++, dto.getFechamod()==null ? null : new java.sql.Date( dto.getFechamod().getTime() ) );
			stmt.setString( index++, dto.getComentarios() );
			stmt.setString( index++, dto.getAi() );
			if (dto.getAi2() != null) {
				stmt.setInt( index++, dto.getAi2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEnfart() != null) {
				stmt.setInt( index++, dto.getEnfart().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getExitus() != null) {
				stmt.setInt( index++, dto.getExitus().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getExitusfechadesc() != null) {
				stmt.setInt( index++, dto.getExitusfechadesc().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getExitusfecha()==null ? null : new java.sql.Date( dto.getExitusfecha().getTime() ) );
			if (dto.getFlutter() != null) {
				stmt.setShort( index++, dto.getFlutter().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
			stmt.setString( index++, dto.getAlergias() );
			if (pk.getIdpaciente() != null) {
				stmt.setInt( 49, pk.getIdpaciente().intValue() );
			} else {
				stmt.setNull(49, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SituacionClinicaGeneralDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the situacion_clinica_general table.
	 */
	public void delete(SituacionClinicaGeneralPk pk) throws SituacionClinicaGeneralDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdpaciente() != null) {
				stmt.setInt( 1, pk.getIdpaciente().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SituacionClinicaGeneralDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the situacion_clinica_general table that matches the specified primary-key value.
	 */
	public SituacionClinicaGeneral findByPrimaryKey(SituacionClinicaGeneralPk pk) throws SituacionClinicaGeneralDaoException
	{
		return findByPrimaryKey( pk.getIdpaciente() );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'IDPACIENTE = :idpaciente'.
	 */
	public SituacionClinicaGeneral findByPrimaryKey(Integer idpaciente) throws SituacionClinicaGeneralDaoException
	{
		SituacionClinicaGeneral ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDPACIENTE = ?", new Object[] { idpaciente } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria ''.
	 */
	public SituacionClinicaGeneral[] findAll() throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDPACIENTE", null );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'IDPACIENTE = :idpaciente'.
	 */
	public SituacionClinicaGeneral[] findWhereIdpacienteEquals(int idpaciente) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPACIENTE = ? ORDER BY IDPACIENTE", new Object[] {  new Integer(idpaciente) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'FEVI = :fevi'.
	 */
	public SituacionClinicaGeneral[] findWhereFeviEquals(String fevi) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FEVI = ? ORDER BY FEVI", new Object[] { fevi } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'FUNCIONVENTRICULAR = :funcionventricular'.
	 */
	public SituacionClinicaGeneral[] findWhereFuncionventricularEquals(int funcionventricular) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FUNCIONVENTRICULAR = ? ORDER BY FUNCIONVENTRICULAR", new Object[] {  new Integer(funcionventricular) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'FECHAMODFEVI = :fechamodfevi'.
	 */
	public SituacionClinicaGeneral[] findWhereFechamodfeviEquals(Date fechamodfevi) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAMODFEVI = ? ORDER BY FECHAMODFEVI", new Object[] { fechamodfevi==null ? null : new java.sql.Date( fechamodfevi.getTime() ) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'NYHA = :nyha'.
	 */
	public SituacionClinicaGeneral[] findWhereNyhaEquals(int nyha) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NYHA = ? ORDER BY NYHA", new Object[] {  new Integer(nyha) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'CARDIOPATIA = :cardiopatia'.
	 */
	public SituacionClinicaGeneral[] findWhereCardiopatiaEquals(int cardiopatia) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CARDIOPATIA = ? ORDER BY CARDIOPATIA", new Object[] {  new Integer(cardiopatia) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'AEVOLUCION = :aevolucion'.
	 */
	public SituacionClinicaGeneral[] findWhereAevolucionEquals(String aevolucion) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AEVOLUCION = ? ORDER BY AEVOLUCION", new Object[] { aevolucion } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'OTRA = :otra'.
	 */
	public SituacionClinicaGeneral[] findWhereOtraEquals(String otra) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OTRA = ? ORDER BY OTRA", new Object[] { otra } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'REVASC = :revasc'.
	 */
	public SituacionClinicaGeneral[] findWhereRevascEquals(short revasc) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REVASC = ? ORDER BY REVASC", new Object[] {  new Short(revasc) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'INFPREVIO = :infprevio'.
	 */
	public SituacionClinicaGeneral[] findWhereInfprevioEquals(short infprevio) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INFPREVIO = ? ORDER BY INFPREVIO", new Object[] {  new Short(infprevio) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'ANIO = :anio'.
	 */
	public SituacionClinicaGeneral[] findWhereAnioEquals(String anio) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANIO = ? ORDER BY ANIO", new Object[] { anio } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'LOCALIZACION = :localizacion'.
	 */
	public SituacionClinicaGeneral[] findWhereLocalizacionEquals(int localizacion) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOCALIZACION = ? ORDER BY LOCALIZACION", new Object[] {  new Integer(localizacion) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'ARRITMIAS = :arritmias'.
	 */
	public SituacionClinicaGeneral[] findWhereArritmiasEquals(int arritmias) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ARRITMIAS = ? ORDER BY ARRITMIAS", new Object[] {  new Integer(arritmias) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'EEF = :eef'.
	 */
	public SituacionClinicaGeneral[] findWhereEefEquals(int eef) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EEF = ? ORDER BY EEF", new Object[] {  new Integer(eef) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'HTA = :hta'.
	 */
	public SituacionClinicaGeneral[] findWhereHtaEquals(short hta) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HTA = ? ORDER BY HTA", new Object[] {  new Short(hta) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'DISLIPEMIA = :dislipemia'.
	 */
	public SituacionClinicaGeneral[] findWhereDislipemiaEquals(short dislipemia) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DISLIPEMIA = ? ORDER BY DISLIPEMIA", new Object[] {  new Short(dislipemia) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'DIABETES = :diabetes'.
	 */
	public SituacionClinicaGeneral[] findWhereDiabetesEquals(short diabetes) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DIABETES = ? ORDER BY DIABETES", new Object[] {  new Short(diabetes) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'TABAQUISMO = :tabaquismo'.
	 */
	public SituacionClinicaGeneral[] findWhereTabaquismoEquals(short tabaquismo) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TABAQUISMO = ? ORDER BY TABAQUISMO", new Object[] {  new Short(tabaquismo) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'INGALCOHOLICA = :ingalcoholica'.
	 */
	public SituacionClinicaGeneral[] findWhereIngalcoholicaEquals(short ingalcoholica) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INGALCOHOLICA = ? ORDER BY INGALCOHOLICA", new Object[] {  new Short(ingalcoholica) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'ACV = :acv'.
	 */
	public SituacionClinicaGeneral[] findWhereAcvEquals(short acv) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACV = ? ORDER BY ACV", new Object[] {  new Short(acv) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'AIT = :ait'.
	 */
	public SituacionClinicaGeneral[] findWhereAitEquals(short ait) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AIT = ? ORDER BY AIT", new Object[] {  new Short(ait) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'EPOC = :epoc'.
	 */
	public SituacionClinicaGeneral[] findWhereEpocEquals(short epoc) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EPOC = ? ORDER BY EPOC", new Object[] {  new Short(epoc) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'SAHS = :sahs'.
	 */
	public SituacionClinicaGeneral[] findWhereSahsEquals(short sahs) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SAHS = ? ORDER BY SAHS", new Object[] {  new Short(sahs) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'TIPOSAHS = :tiposahs'.
	 */
	public SituacionClinicaGeneral[] findWhereTiposahsEquals(int tiposahs) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPOSAHS = ? ORDER BY TIPOSAHS", new Object[] {  new Integer(tiposahs) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'AHI = :ahi'.
	 */
	public SituacionClinicaGeneral[] findWhereAhiEquals(String ahi) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AHI = ? ORDER BY AHI", new Object[] { ahi } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'CPAP = :cpap'.
	 */
	public SituacionClinicaGeneral[] findWhereCpapEquals(short cpap) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CPAP = ? ORDER BY CPAP", new Object[] {  new Short(cpap) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'INSRENAL = :insrenal'.
	 */
	public SituacionClinicaGeneral[] findWhereInsrenalEquals(short insrenal) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INSRENAL = ? ORDER BY INSRENAL", new Object[] {  new Short(insrenal) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'TIPOINSRENAL = :tipoinsrenal'.
	 */
	public SituacionClinicaGeneral[] findWhereTipoinsrenalEquals(int tipoinsrenal) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPOINSRENAL = ? ORDER BY TIPOINSRENAL", new Object[] {  new Integer(tipoinsrenal) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'NEOPLASIA = :neoplasia'.
	 */
	public SituacionClinicaGeneral[] findWhereNeoplasiaEquals(short neoplasia) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NEOPLASIA = ? ORDER BY NEOPLASIA", new Object[] {  new Short(neoplasia) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'TIPONEOPLASIA = :tiponeoplasia'.
	 */
	public SituacionClinicaGeneral[] findWhereTiponeoplasiaEquals(String tiponeoplasia) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPONEOPLASIA = ? ORDER BY TIPONEOPLASIA", new Object[] { tiponeoplasia } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'AFECTIROIDEA = :afectiroidea'.
	 */
	public SituacionClinicaGeneral[] findWhereAfectiroideaEquals(int afectiroidea) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AFECTIROIDEA = ? ORDER BY AFECTIROIDEA", new Object[] {  new Integer(afectiroidea) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'ANTFA = :antfa'.
	 */
	public SituacionClinicaGeneral[] findWhereAntfaEquals(short antfa) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANTFA = ? ORDER BY ANTFA", new Object[] {  new Short(antfa) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'MUERTESUBITA = :muertesubita'.
	 */
	public SituacionClinicaGeneral[] findWhereMuertesubitaEquals(short muertesubita) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MUERTESUBITA = ? ORDER BY MUERTESUBITA", new Object[] {  new Short(muertesubita) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'NEUROMEDIADOS = :neuromediados'.
	 */
	public SituacionClinicaGeneral[] findWhereNeuromediadosEquals(int neuromediados) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NEUROMEDIADOS = ? ORDER BY NEUROMEDIADOS", new Object[] {  new Integer(neuromediados) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'TRASPLANTECARDIACO = :trasplantecardiaco'.
	 */
	public SituacionClinicaGeneral[] findWhereTrasplantecardiacoEquals(short trasplantecardiaco) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TRASPLANTECARDIACO = ? ORDER BY TRASPLANTECARDIACO", new Object[] {  new Short(trasplantecardiaco) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'SINCOPE = :sincope'.
	 */
	public SituacionClinicaGeneral[] findWhereSincopeEquals(short sincope) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SINCOPE = ? ORDER BY SINCOPE", new Object[] {  new Short(sincope) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'PARADACARDIACA = :paradacardiaca'.
	 */
	public SituacionClinicaGeneral[] findWhereParadacardiacaEquals(short paradacardiaca) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARADACARDIACA = ? ORDER BY PARADACARDIACA", new Object[] {  new Short(paradacardiaca) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'FECHACREACION = :fechacreacion'.
	 */
	public SituacionClinicaGeneral[] findWhereFechacreacionEquals(Date fechacreacion) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHACREACION = ? ORDER BY FECHACREACION", new Object[] { fechacreacion==null ? null : new java.sql.Date( fechacreacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'FECHAMOD = :fechamod'.
	 */
	public SituacionClinicaGeneral[] findWhereFechamodEquals(Date fechamod) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAMOD = ? ORDER BY FECHAMOD", new Object[] { fechamod==null ? null : new java.sql.Date( fechamod.getTime() ) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public SituacionClinicaGeneral[] findWhereComentariosEquals(String comentarios) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'AI = :ai'.
	 */
	public SituacionClinicaGeneral[] findWhereAiEquals(String ai) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AI = ? ORDER BY AI", new Object[] { ai } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'AI2 = :ai2'.
	 */
	public SituacionClinicaGeneral[] findWhereAi2Equals(int ai2) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AI2 = ? ORDER BY AI2", new Object[] {  new Integer(ai2) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'ENFART = :enfart'.
	 */
	public SituacionClinicaGeneral[] findWhereEnfartEquals(int enfart) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ENFART = ? ORDER BY ENFART", new Object[] {  new Integer(enfart) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'EXITUS = :exitus'.
	 */
	public SituacionClinicaGeneral[] findWhereExitusEquals(int exitus) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EXITUS = ? ORDER BY EXITUS", new Object[] {  new Integer(exitus) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'EXITUSFECHADESC = :exitusfechadesc'.
	 */
	public SituacionClinicaGeneral[] findWhereExitusfechadescEquals(int exitusfechadesc) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EXITUSFECHADESC = ? ORDER BY EXITUSFECHADESC", new Object[] {  new Integer(exitusfechadesc) } );
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the criteria 'EXITUSFECHA = :exitusfecha'.
	 */
	public SituacionClinicaGeneral[] findWhereExitusfechaEquals(Date exitusfecha) throws SituacionClinicaGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EXITUSFECHA = ? ORDER BY EXITUSFECHA", new Object[] { exitusfecha==null ? null : new java.sql.Date( exitusfecha.getTime() ) } );
	}

	/**
	 * Method 'SituacionClinicaGeneralDaoImpl'
	 * 
	 */
	public SituacionClinicaGeneralDaoImpl()
	{
	}

	/**
	 * Method 'SituacionClinicaGeneralDaoImpl'
	 * 
	 * @param userConn
	 */
	public SituacionClinicaGeneralDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}
	public SituacionClinicaGeneralDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public SituacionClinicaGeneralDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.situacion_clinica_general";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SituacionClinicaGeneral fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SituacionClinicaGeneral dto = new SituacionClinicaGeneral();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SituacionClinicaGeneral[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SituacionClinicaGeneral dto = new SituacionClinicaGeneral();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SituacionClinicaGeneral ret[] = new SituacionClinicaGeneral[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SituacionClinicaGeneral dto, ResultSet rs) throws SQLException
	{
		dto.setIdpaciente( new Integer( rs.getInt(COLUMN_IDPACIENTE) ) );
		dto.setFevi( rs.getString( COLUMN_FEVI ) );
		dto.setFuncionventricular( new Integer( rs.getInt(COLUMN_FUNCIONVENTRICULAR) ) );
		if (rs.wasNull()) {
			dto.setFuncionventricular( null );
		}
		
		dto.setFechamodfevi( rs.getDate(COLUMN_FECHAMODFEVI ) );
		dto.setNyha( new Integer( rs.getInt(COLUMN_NYHA) ) );
		if (rs.wasNull()) {
			dto.setNyha( null );
		}
		
		dto.setCardiopatia( new Integer( rs.getInt(COLUMN_CARDIOPATIA) ) );
		if (rs.wasNull()) {
			dto.setCardiopatia( null );
		}
		
		dto.setAevolucion( rs.getString( COLUMN_AEVOLUCION ) );
		dto.setOtra( rs.getString( COLUMN_OTRA ) );
		dto.setRevasc( new Short( rs.getShort(COLUMN_REVASC) ) );
		if (rs.wasNull()) {
			dto.setRevasc( null );
		}
		
		dto.setInfprevio( new Short( rs.getShort(COLUMN_INFPREVIO) ) );
		if (rs.wasNull()) {
			dto.setInfprevio( null );
		}
		
		dto.setAnio( rs.getString( COLUMN_ANIO ) );
		dto.setLocalizacion( new Integer( rs.getInt(COLUMN_LOCALIZACION) ) );
		if (rs.wasNull()) {
			dto.setLocalizacion( null );
		}
		
		dto.setArritmias( new Integer( rs.getInt(COLUMN_ARRITMIAS) ) );
		if (rs.wasNull()) {
			dto.setArritmias( null );
		}
		
		dto.setEef( new Integer( rs.getInt(COLUMN_EEF) ) );
		if (rs.wasNull()) {
			dto.setEef( null );
		}
		
		dto.setHta( new Short( rs.getShort(COLUMN_HTA) ) );
		if (rs.wasNull()) {
			dto.setHta( null );
		}
		
		dto.setDislipemia( new Short( rs.getShort(COLUMN_DISLIPEMIA) ) );
		if (rs.wasNull()) {
			dto.setDislipemia( null );
		}
		
		dto.setDiabetes( new Short( rs.getShort(COLUMN_DIABETES) ) );
		if (rs.wasNull()) {
			dto.setDiabetes( null );
		}
		
		dto.setTabaquismo( new Short( rs.getShort(COLUMN_TABAQUISMO) ) );
		if (rs.wasNull()) {
			dto.setTabaquismo( null );
		}
		
		dto.setIngalcoholica( new Short( rs.getShort(COLUMN_INGALCOHOLICA) ) );
		if (rs.wasNull()) {
			dto.setIngalcoholica( null );
		}
		
		dto.setAcv( new Short( rs.getShort(COLUMN_ACV) ) );
		if (rs.wasNull()) {
			dto.setAcv( null );
		}
		
		dto.setAit( new Short( rs.getShort(COLUMN_AIT) ) );
		if (rs.wasNull()) {
			dto.setAit( null );
		}
		
		dto.setEpoc( new Short( rs.getShort(COLUMN_EPOC) ) );
		if (rs.wasNull()) {
			dto.setEpoc( null );
		}
		
		dto.setSahs( new Short( rs.getShort(COLUMN_SAHS) ) );
		if (rs.wasNull()) {
			dto.setSahs( null );
		}
		
		dto.setTiposahs( new Integer( rs.getInt(COLUMN_TIPOSAHS) ) );
		if (rs.wasNull()) {
			dto.setTiposahs( null );
		}
		
		dto.setAhi( rs.getString( COLUMN_AHI ) );
		dto.setCpap( new Short( rs.getShort(COLUMN_CPAP) ) );
		if (rs.wasNull()) {
			dto.setCpap( null );
		}
		
		dto.setInsrenal( new Short( rs.getShort(COLUMN_INSRENAL) ) );
		if (rs.wasNull()) {
			dto.setInsrenal( null );
		}
		
		dto.setTipoinsrenal( new Integer( rs.getInt(COLUMN_TIPOINSRENAL) ) );
		if (rs.wasNull()) {
			dto.setTipoinsrenal( null );
		}
		
		dto.setNeoplasia( new Short( rs.getShort(COLUMN_NEOPLASIA) ) );
		if (rs.wasNull()) {
			dto.setNeoplasia( null );
		}
		
		dto.setTiponeoplasia( rs.getString( COLUMN_TIPONEOPLASIA ) );
		dto.setAfectiroidea( new Integer( rs.getInt(COLUMN_AFECTIROIDEA) ) );
		if (rs.wasNull()) {
			dto.setAfectiroidea( null );
		}
		
		dto.setAntfa( new Short( rs.getShort(COLUMN_ANTFA) ) );
		if (rs.wasNull()) {
			dto.setAntfa( null );
		}
		
		dto.setMuertesubita( new Short( rs.getShort(COLUMN_MUERTESUBITA) ) );
		if (rs.wasNull()) {
			dto.setMuertesubita( null );
		}
		
		dto.setNeuromediados( new Integer( rs.getInt(COLUMN_NEUROMEDIADOS) ) );
		if (rs.wasNull()) {
			dto.setNeuromediados( null );
		}
		
		dto.setTrasplantecardiaco( new Short( rs.getShort(COLUMN_TRASPLANTECARDIACO) ) );
		if (rs.wasNull()) {
			dto.setTrasplantecardiaco( null );
		}
		
		dto.setSincope( new Short( rs.getShort(COLUMN_SINCOPE) ) );
		if (rs.wasNull()) {
			dto.setSincope( null );
		}
		
		dto.setParadacardiaca( new Short( rs.getShort(COLUMN_PARADACARDIACA) ) );
		if (rs.wasNull()) {
			dto.setParadacardiaca( null );
		}
		
		dto.setFechacreacion( rs.getDate(COLUMN_FECHACREACION ) );
		dto.setFechamod( rs.getDate(COLUMN_FECHAMOD ) );
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setAi( rs.getString( COLUMN_AI ) );
		dto.setAi2( new Integer( rs.getInt(COLUMN_AI2) ) );
		if (rs.wasNull()) {
			dto.setAi2( null );
		}
		
		dto.setEnfart( new Integer( rs.getInt(COLUMN_ENFART) ) );
		if (rs.wasNull()) {
			dto.setEnfart( null );
		}
		
		dto.setExitus( new Integer( rs.getInt(COLUMN_EXITUS) ) );
		if (rs.wasNull()) {
			dto.setExitus( null );
		}
		
		dto.setExitusfechadesc( new Integer( rs.getInt(COLUMN_EXITUSFECHADESC) ) );
		if (rs.wasNull()) {
			dto.setExitusfechadesc( null );
		}
		
		dto.setExitusfecha( rs.getDate(COLUMN_EXITUSFECHA ) );
		
		dto.setFlutter( new Short( rs.getShort(COLUMN_FLUTTER) ) );
		if (rs.wasNull()) {
			dto.setFlutter( null );
		}
		dto.setAlergias( rs.getString( COLUMN_ALERGIAS ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SituacionClinicaGeneral dto)
	{
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the specified arbitrary SQL statement
	 */
	public SituacionClinicaGeneral[] findByDynamicSelect(String sql, Object[] sqlParams) throws SituacionClinicaGeneralDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SituacionClinicaGeneralDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the situacion_clinica_general table that match the specified arbitrary SQL statement
	 */
	public SituacionClinicaGeneral[] findByDynamicWhere(String sql, Object[] sqlParams) throws SituacionClinicaGeneralDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SituacionClinicaGeneralDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
