/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class EpisodioDaoImpl extends AbstractDAO implements EpisodioDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDEPISODIO, IDEVENTO, TIPO, FECHAINI, FECHAFIN, IDPACIENTE, CODIGOPACIENTE, IDENTIFICADOR, UNIDADFUNCIONAL, ESTADO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDEPISODIO, IDEVENTO, TIPO, FECHAINI, FECHAFIN, IDPACIENTE, CODIGOPACIENTE, IDENTIFICADOR, UNIDADFUNCIONAL, ESTADO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDEPISODIO = ?, IDEVENTO = ?, TIPO = ?, FECHAINI = ?, FECHAFIN = ?, IDPACIENTE = ?, CODIGOPACIENTE = ?, IDENTIFICADOR = ?, UNIDADFUNCIONAL = ?, ESTADO = ? WHERE IDEPISODIO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDEPISODIO = ?";

	/** 
	 * Index of column IDEPISODIO
	 */
	protected static final int COLUMN_IDEPISODIO = 1;

	/** 
	 * Index of column IDEVENTO
	 */
	protected static final int COLUMN_IDEVENTO = 2;

	/** 
	 * Index of column TIPO
	 */
	protected static final int COLUMN_TIPO = 3;

	/** 
	 * Index of column FECHAINI
	 */
	protected static final int COLUMN_FECHAINI = 4;

	/** 
	 * Index of column FECHAFIN
	 */
	protected static final int COLUMN_FECHAFIN = 5;

	/** 
	 * Index of column IDPACIENTE
	 */
	protected static final int COLUMN_IDPACIENTE = 6;

	/** 
	 * Index of column CODIGOPACIENTE
	 */
	protected static final int COLUMN_CODIGOPACIENTE = 7;

	/** 
	 * Index of column IDENTIFICADOR
	 */
	protected static final int COLUMN_IDENTIFICADOR = 8;

	/** 
	 * Index of column UNIDADFUNCIONAL
	 */
	protected static final int COLUMN_UNIDADFUNCIONAL = 9;

	/** 
	 * Index of column ESTADO
	 */
	protected static final int COLUMN_ESTADO = 10;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 10;

	/** 
	 * Index of primary-key column IDEPISODIO
	 */
	protected static final int PK_COLUMN_IDEPISODIO = 1;

	/** 
	 * Inserts a new row in the episodio table.
	 */
	public EpisodioPk insert(Episodio dto) throws EpisodioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdepisodio() != null) {
				stmt.setInt( index++, dto.getIdepisodio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdevento() != null) {
				stmt.setInt( index++, dto.getIdevento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTipo() != null) {
				stmt.setInt( index++, dto.getTipo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFechaini()==null ? null : new java.sql.Date( dto.getFechaini().getTime() ) );
			stmt.setDate(index++, dto.getFechafin()==null ? null : new java.sql.Date( dto.getFechafin().getTime() ) );
			stmt.setString( index++, dto.getIdpaciente() );
			if (dto.getCodigopaciente() != null) {
				stmt.setInt( index++, dto.getCodigopaciente().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getIdentificador() );
			stmt.setString( index++, dto.getUnidadfuncional() );
			if (dto.getEstado() != null) {
				stmt.setInt( index++, dto.getEstado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdepisodio( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EpisodioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the episodio table.
	 */
	public void update(EpisodioPk pk, Episodio dto) throws EpisodioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdepisodio() != null) {
				stmt.setInt( index++, dto.getIdepisodio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdevento() != null) {
				stmt.setInt( index++, dto.getIdevento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTipo() != null) {
				stmt.setInt( index++, dto.getTipo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFechaini()==null ? null : new java.sql.Date( dto.getFechaini().getTime() ) );
			stmt.setDate(index++, dto.getFechafin()==null ? null : new java.sql.Date( dto.getFechafin().getTime() ) );
			stmt.setString( index++, dto.getIdpaciente() );
			if (dto.getCodigopaciente() != null) {
				stmt.setInt( index++, dto.getCodigopaciente().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getIdentificador() );
			stmt.setString( index++, dto.getUnidadfuncional() );
			if (dto.getEstado() != null) {
				stmt.setInt( index++, dto.getEstado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (pk.getIdepisodio() != null) {
				stmt.setInt( 11, pk.getIdepisodio().intValue() );
			} else {
				stmt.setNull(11, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EpisodioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the episodio table.
	 */
	public void delete(EpisodioPk pk) throws EpisodioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdepisodio() != null) {
				stmt.setInt( 1, pk.getIdepisodio().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EpisodioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the episodio table that matches the specified primary-key value.
	 */
	public Episodio findByPrimaryKey(EpisodioPk pk) throws EpisodioDaoException
	{
		return findByPrimaryKey( pk.getIdepisodio() );
	}

	/** 
	 * Returns all rows from the episodio table that match the criteria 'IDEPISODIO = :idepisodio'.
	 */
	public Episodio findByPrimaryKey(Integer idepisodio) throws EpisodioDaoException
	{
		Episodio ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDEPISODIO = ?", new Object[] { idepisodio } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the episodio table that match the criteria ''.
	 */
	public Episodio[] findAll() throws EpisodioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDEPISODIO", null );
	}

	/** 
	 * Returns all rows from the episodio table that match the criteria 'IDEPISODIO = :idepisodio'.
	 */
	public Episodio[] findWhereIdepisodioEquals(int idepisodio) throws EpisodioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDEPISODIO = ? ORDER BY IDEPISODIO", new Object[] {  new Integer(idepisodio) } );
	}

	/** 
	 * Returns all rows from the episodio table that match the criteria 'IDEVENTO = :idevento'.
	 */
	public Episodio[] findWhereIdeventoEquals(int idevento) throws EpisodioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDEVENTO = ? ORDER BY IDEVENTO", new Object[] {  new Integer(idevento) } );
	}

	/** 
	 * Returns all rows from the episodio table that match the criteria 'TIPO = :tipo'.
	 */
	public Episodio[] findWhereTipoEquals(int tipo) throws EpisodioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO = ? ORDER BY TIPO", new Object[] {  new Integer(tipo) } );
	}

	/** 
	 * Returns all rows from the episodio table that match the criteria 'FECHAINI = :fechaini'.
	 */
	public Episodio[] findWhereFechainiEquals(Date fechaini) throws EpisodioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAINI = ? ORDER BY FECHAINI", new Object[] { fechaini==null ? null : new java.sql.Date( fechaini.getTime() ) } );
	}

	/** 
	 * Returns all rows from the episodio table that match the criteria 'FECHAFIN = :fechafin'.
	 */
	public Episodio[] findWhereFechafinEquals(Date fechafin) throws EpisodioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAFIN = ? ORDER BY FECHAFIN", new Object[] { fechafin==null ? null : new java.sql.Date( fechafin.getTime() ) } );
	}

	/** 
	 * Returns all rows from the episodio table that match the criteria 'IDPACIENTE = :idpaciente'.
	 */
	public Episodio[] findWhereIdpacienteEquals(String idpaciente) throws EpisodioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPACIENTE = ? ORDER BY IDPACIENTE", new Object[] { idpaciente } );
	}

	/** 
	 * Returns all rows from the episodio table that match the criteria 'CODIGOPACIENTE = :codigopaciente'.
	 */
	public Episodio[] findWhereCodigopacienteEquals(int codigopaciente) throws EpisodioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CODIGOPACIENTE = ? ORDER BY CODIGOPACIENTE", new Object[] {  new Integer(codigopaciente) } );
	}

	/** 
	 * Returns all rows from the episodio table that match the criteria 'IDENTIFICADOR = :identificador'.
	 */
	public Episodio[] findWhereIdentificadorEquals(String identificador) throws EpisodioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDENTIFICADOR = ? ORDER BY IDENTIFICADOR", new Object[] { identificador } );
	}

	/** 
	 * Returns all rows from the episodio table that match the criteria 'UNIDADFUNCIONAL = :unidadfuncional'.
	 */
	public Episodio[] findWhereUnidadfuncionalEquals(String unidadfuncional) throws EpisodioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UNIDADFUNCIONAL = ? ORDER BY UNIDADFUNCIONAL", new Object[] { unidadfuncional } );
	}

	/** 
	 * Returns all rows from the episodio table that match the criteria 'ESTADO = :estado'.
	 */
	public Episodio[] findWhereEstadoEquals(int estado) throws EpisodioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTADO = ? ORDER BY ESTADO", new Object[] {  new Integer(estado) } );
	}

	/**
	 * Method 'EpisodioDaoImpl'
	 * 
	 */
	public EpisodioDaoImpl()
	{
	}
	public EpisodioDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public EpisodioDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'EpisodioDaoImpl'
	 * 
	 * @param userConn
	 */
	public EpisodioDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.episodio";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Episodio fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Episodio dto = new Episodio();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Episodio[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Episodio dto = new Episodio();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Episodio ret[] = new Episodio[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Episodio dto, ResultSet rs) throws SQLException
	{
		dto.setIdepisodio( new Integer( rs.getInt(COLUMN_IDEPISODIO) ) );
		dto.setIdevento( new Integer( rs.getInt(COLUMN_IDEVENTO) ) );
		if (rs.wasNull()) {
			dto.setIdevento( null );
		}
		
		dto.setTipo( new Integer( rs.getInt(COLUMN_TIPO) ) );
		if (rs.wasNull()) {
			dto.setTipo( null );
		}
		
		dto.setFechaini( rs.getDate(COLUMN_FECHAINI ) );
		dto.setFechafin( rs.getDate(COLUMN_FECHAFIN ) );
		dto.setIdpaciente( rs.getString( COLUMN_IDPACIENTE ) );
		dto.setCodigopaciente( new Integer( rs.getInt(COLUMN_CODIGOPACIENTE) ) );
		if (rs.wasNull()) {
			dto.setCodigopaciente( null );
		}
		
		dto.setIdentificador( rs.getString( COLUMN_IDENTIFICADOR ) );
		dto.setUnidadfuncional( rs.getString( COLUMN_UNIDADFUNCIONAL ) );
		dto.setEstado( new Integer( rs.getInt(COLUMN_ESTADO) ) );
		if (rs.wasNull()) {
			dto.setEstado( null );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Episodio dto)
	{
	}

	/** 
	 * Returns all rows from the episodio table that match the specified arbitrary SQL statement
	 */
	public Episodio[] findByDynamicSelect(String sql, Object[] sqlParams) throws EpisodioDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EpisodioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the episodio table that match the specified arbitrary SQL statement
	 */
	public Episodio[] findByDynamicWhere(String sql, Object[] sqlParams) throws EpisodioDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EpisodioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	public Episodio[] findByDynamicSelect(String sql) throws EpisodioDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			/*for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}*/
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EpisodioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	public Episodio[] getEpisodiosPaciente(String identificador) throws EpisodioDaoException{
		
		StringBuffer sql = new StringBuffer();
		sql.append("select ep.idepisodio,ep.idevento,");
		sql.append("  ep.tipo,ep.fechaini,ep.fechafin,");
		sql.append("  ep.idpaciente,ep.codigopaciente,ep.identificador,ep.unidadfuncional,ep.estado");
		sql.append(" from episodio ep ");
		sql.append(" WHERE ep.idpaciente ='"+identificador+"'");
		
		return findByDynamicSelect(sql.toString());
		
	}

}
