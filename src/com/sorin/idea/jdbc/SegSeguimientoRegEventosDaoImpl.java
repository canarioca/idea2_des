/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SegSeguimientoRegEventosDaoImpl extends AbstractDAO implements SegSeguimientoRegEventosDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDSEG, IDREGEVENTOS, FECHA, OPERADOR_MEDICO, OPERADOR_ENFERMERIA, MOTIVO, REMOTO, TIPOSEGUIMIENTO, ACTIVACION, ESTADOBATERIA, EV_RITMOSINUSAL, EV_PAUSA, EV_BAV, EV_TPSV, EV_TV, EV_FV, EV_OTROS, TIEMPO_FA, OBSERVACIONES, COMENTARIOS_INTERNOS, DESCRIPCIONOTROS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDSEG, IDREGEVENTOS, FECHA, OPERADOR_MEDICO, OPERADOR_ENFERMERIA, MOTIVO, REMOTO, TIPOSEGUIMIENTO, ACTIVACION, ESTADOBATERIA, EV_RITMOSINUSAL, EV_PAUSA, EV_BAV, EV_TPSV, EV_TV, EV_FV, EV_OTROS, TIEMPO_FA, OBSERVACIONES, COMENTARIOS_INTERNOS, DESCRIPCIONOTROS ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDSEG = ?, IDREGEVENTOS = ?, FECHA = ?, OPERADOR_MEDICO = ?, OPERADOR_ENFERMERIA = ?, MOTIVO = ?, REMOTO = ?, TIPOSEGUIMIENTO = ?, ACTIVACION = ?, ESTADOBATERIA = ?, EV_RITMOSINUSAL = ?, EV_PAUSA = ?, EV_BAV = ?, EV_TPSV = ?, EV_TV = ?, EV_FV = ?, EV_OTROS = ?, TIEMPO_FA = ?, OBSERVACIONES = ?, COMENTARIOS_INTERNOS = ?, DESCRIPCIONOTROS = ? WHERE IDSEG = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDSEG = ?";

	/** 
	 * Index of column IDSEG
	 */
	protected static final int COLUMN_IDSEG = 1;

	/** 
	 * Index of column IDREGEVENTOS
	 */
	protected static final int COLUMN_IDREGEVENTOS = 2;

	/** 
	 * Index of column FECHA
	 */
	protected static final int COLUMN_FECHA = 3;

	/** 
	 * Index of column OPERADOR_MEDICO
	 */
	protected static final int COLUMN_OPERADOR_MEDICO = 4;

	/** 
	 * Index of column OPERADOR_ENFERMERIA
	 */
	protected static final int COLUMN_OPERADOR_ENFERMERIA = 5;

	/** 
	 * Index of column MOTIVO
	 */
	protected static final int COLUMN_MOTIVO = 6;

	/** 
	 * Index of column REMOTO
	 */
	protected static final int COLUMN_REMOTO = 7;

	/** 
	 * Index of column TIPOSEGUIMIENTO
	 */
	protected static final int COLUMN_TIPOSEGUIMIENTO = 8;

	/** 
	 * Index of column ACTIVACION
	 */
	protected static final int COLUMN_ACTIVACION = 9;

	/** 
	 * Index of column ESTADOBATERIA
	 */
	protected static final int COLUMN_ESTADOBATERIA = 10;

	/** 
	 * Index of column EV_RITMOSINUSAL
	 */
	protected static final int COLUMN_EV_RITMOSINUSAL = 11;

	/** 
	 * Index of column EV_PAUSA
	 */
	protected static final int COLUMN_EV_PAUSA = 12;

	/** 
	 * Index of column EV_BAV
	 */
	protected static final int COLUMN_EV_BAV = 13;

	/** 
	 * Index of column EV_TPSV
	 */
	protected static final int COLUMN_EV_TPSV = 14;

	/** 
	 * Index of column EV_TV
	 */
	protected static final int COLUMN_EV_TV = 15;

	/** 
	 * Index of column EV_FV
	 */
	protected static final int COLUMN_EV_FV = 16;

	/** 
	 * Index of column EV_OTROS
	 */
	protected static final int COLUMN_EV_OTROS = 17;

	/** 
	 * Index of column TIEMPO_FA
	 */
	protected static final int COLUMN_TIEMPO_FA = 18;

	/** 
	 * Index of column OBSERVACIONES
	 */
	protected static final int COLUMN_OBSERVACIONES = 19;

	/** 
	 * Index of column COMENTARIOS_INTERNOS
	 */
	protected static final int COLUMN_COMENTARIOS_INTERNOS = 20;

	/** 
	 * Index of column DESCRIPCIONOTROS
	 */
	protected static final int COLUMN_DESCRIPCIONOTROS = 21;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 21;

	/** 
	 * Index of primary-key column IDSEG
	 */
	protected static final int PK_COLUMN_IDSEG = 1;

	/** 
	 * Inserts a new row in the seg_seguimiento_reg_eventos table.
	 */
	public SegSeguimientoRegEventosPk insert(SegSeguimientoRegEventos dto) throws SegSeguimientoRegEventosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdseg() != null) {
				stmt.setInt( index++, dto.getIdseg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdregeventos() != null) {
				stmt.setInt( index++, dto.getIdregeventos().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			stmt.setString( index++, dto.getOperadorMedico() );
			stmt.setString( index++, dto.getOperadorEnfermeria() );
			if (dto.getMotivo() != null) {
				stmt.setInt( index++, dto.getMotivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getRemoto() != null) {
				stmt.setInt( index++, dto.getRemoto().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTiposeguimiento() != null) {
				stmt.setInt( index++, dto.getTiposeguimiento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getActivacion() != null) {
				stmt.setInt( index++, dto.getActivacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEstadobateria() != null) {
				stmt.setInt( index++, dto.getEstadobateria().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEvRitmosinusal() != null) {
				stmt.setInt( index++, dto.getEvRitmosinusal().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEvPausa() != null) {
				stmt.setInt( index++, dto.getEvPausa().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEvBav() != null) {
				stmt.setInt( index++, dto.getEvBav().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEvTpsv() != null) {
				stmt.setInt( index++, dto.getEvTpsv().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEvTv() != null) {
				stmt.setInt( index++, dto.getEvTv().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEvFv() != null) {
				stmt.setInt( index++, dto.getEvFv().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEvOtros() != null) {
				stmt.setInt( index++, dto.getEvOtros().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getTiempoFa() );
			stmt.setString( index++, dto.getObservaciones() );
			stmt.setString( index++, dto.getComentariosInternos() );
			stmt.setString( index++, dto.getDescripcionotros() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdseg( new Integer( rs.getInt(1) ) );
			}
		
			auditoriaDto.setAccion(AuditoriaDto.insercion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSeguimientoRegEventosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the seg_seguimiento_reg_eventos table.
	 */
	public void update(SegSeguimientoRegEventosPk pk, SegSeguimientoRegEventos dto) throws SegSeguimientoRegEventosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdseg() != null) {
				stmt.setInt( index++, dto.getIdseg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdregeventos() != null) {
				stmt.setInt( index++, dto.getIdregeventos().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			stmt.setString( index++, dto.getOperadorMedico() );
			stmt.setString( index++, dto.getOperadorEnfermeria() );
			if (dto.getMotivo() != null) {
				stmt.setInt( index++, dto.getMotivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getRemoto() != null) {
				stmt.setInt( index++, dto.getRemoto().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTiposeguimiento() != null) {
				stmt.setInt( index++, dto.getTiposeguimiento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getActivacion() != null) {
				stmt.setInt( index++, dto.getActivacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEstadobateria() != null) {
				stmt.setInt( index++, dto.getEstadobateria().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEvRitmosinusal() != null) {
				stmt.setInt( index++, dto.getEvRitmosinusal().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEvPausa() != null) {
				stmt.setInt( index++, dto.getEvPausa().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEvBav() != null) {
				stmt.setInt( index++, dto.getEvBav().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEvTpsv() != null) {
				stmt.setInt( index++, dto.getEvTpsv().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEvTv() != null) {
				stmt.setInt( index++, dto.getEvTv().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEvFv() != null) {
				stmt.setInt( index++, dto.getEvFv().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEvOtros() != null) {
				stmt.setInt( index++, dto.getEvOtros().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getTiempoFa() );
			stmt.setString( index++, dto.getObservaciones() );
			stmt.setString( index++, dto.getComentariosInternos() );
			stmt.setString( index++, dto.getDescripcionotros() );
			if (pk.getIdseg() != null) {
				stmt.setInt( 22, pk.getIdseg().intValue() );
			} else {
				stmt.setNull(22, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSeguimientoRegEventosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the seg_seguimiento_reg_eventos table.
	 */
	public void delete(SegSeguimientoRegEventosPk pk) throws SegSeguimientoRegEventosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdseg() != null) {
				stmt.setInt( 1, pk.getIdseg().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(pk.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSeguimientoRegEventosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the seg_seguimiento_reg_eventos table that matches the specified primary-key value.
	 */
	public SegSeguimientoRegEventos findByPrimaryKey(SegSeguimientoRegEventosPk pk) throws SegSeguimientoRegEventosDaoException
	{
		return findByPrimaryKey( pk.getIdseg() );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'IDSEG = :idseg'.
	 */
	public SegSeguimientoRegEventos findByPrimaryKey(Integer idseg) throws SegSeguimientoRegEventosDaoException
	{
		SegSeguimientoRegEventos ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDSEG = ?", new Object[] { idseg } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria ''.
	 */
	public SegSeguimientoRegEventos[] findAll() throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDSEG", null );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'IDSEG = :idseg'.
	 */
	public SegSeguimientoRegEventos[] findWhereIdsegEquals(int idseg) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDSEG = ? ORDER BY IDSEG", new Object[] {  new Integer(idseg) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'IDREGEVENTOS = :idregeventos'.
	 */
	public SegSeguimientoRegEventos[] findWhereIdregeventosEquals(int idregeventos) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDREGEVENTOS = ? ORDER BY IDREGEVENTOS", new Object[] {  new Integer(idregeventos) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'FECHA = :fecha'.
	 */
	public SegSeguimientoRegEventos[] findWhereFechaEquals(Date fecha) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA = ? ORDER BY FECHA", new Object[] { fecha==null ? null : new java.sql.Date( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'OPERADOR_MEDICO = :operadorMedico'.
	 */
	public SegSeguimientoRegEventos[] findWhereOperadorMedicoEquals(String operadorMedico) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OPERADOR_MEDICO = ? ORDER BY OPERADOR_MEDICO", new Object[] { operadorMedico } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'OPERADOR_ENFERMERIA = :operadorEnfermeria'.
	 */
	public SegSeguimientoRegEventos[] findWhereOperadorEnfermeriaEquals(String operadorEnfermeria) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OPERADOR_ENFERMERIA = ? ORDER BY OPERADOR_ENFERMERIA", new Object[] { operadorEnfermeria } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'MOTIVO = :motivo'.
	 */
	public SegSeguimientoRegEventos[] findWhereMotivoEquals(int motivo) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOTIVO = ? ORDER BY MOTIVO", new Object[] {  new Integer(motivo) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'REMOTO = :remoto'.
	 */
	public SegSeguimientoRegEventos[] findWhereRemotoEquals(int remoto) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REMOTO = ? ORDER BY REMOTO", new Object[] {  new Integer(remoto) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'TIPOSEGUIMIENTO = :tiposeguimiento'.
	 */
	public SegSeguimientoRegEventos[] findWhereTiposeguimientoEquals(int tiposeguimiento) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPOSEGUIMIENTO = ? ORDER BY TIPOSEGUIMIENTO", new Object[] {  new Integer(tiposeguimiento) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'ACTIVACION = :activacion'.
	 */
	public SegSeguimientoRegEventos[] findWhereActivacionEquals(int activacion) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTIVACION = ? ORDER BY ACTIVACION", new Object[] {  new Integer(activacion) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'ESTADOBATERIA = :estadobateria'.
	 */
	public SegSeguimientoRegEventos[] findWhereEstadobateriaEquals(int estadobateria) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTADOBATERIA = ? ORDER BY ESTADOBATERIA", new Object[] {  new Integer(estadobateria) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'EV_RITMOSINUSAL = :evRitmosinusal'.
	 */
	public SegSeguimientoRegEventos[] findWhereEvRitmosinusalEquals(int evRitmosinusal) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EV_RITMOSINUSAL = ? ORDER BY EV_RITMOSINUSAL", new Object[] {  new Integer(evRitmosinusal) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'EV_PAUSA = :evPausa'.
	 */
	public SegSeguimientoRegEventos[] findWhereEvPausaEquals(int evPausa) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EV_PAUSA = ? ORDER BY EV_PAUSA", new Object[] {  new Integer(evPausa) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'EV_BAV = :evBav'.
	 */
	public SegSeguimientoRegEventos[] findWhereEvBavEquals(int evBav) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EV_BAV = ? ORDER BY EV_BAV", new Object[] {  new Integer(evBav) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'EV_TPSV = :evTpsv'.
	 */
	public SegSeguimientoRegEventos[] findWhereEvTpsvEquals(int evTpsv) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EV_TPSV = ? ORDER BY EV_TPSV", new Object[] {  new Integer(evTpsv) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'EV_TV = :evTv'.
	 */
	public SegSeguimientoRegEventos[] findWhereEvTvEquals(int evTv) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EV_TV = ? ORDER BY EV_TV", new Object[] {  new Integer(evTv) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'EV_FV = :evFv'.
	 */
	public SegSeguimientoRegEventos[] findWhereEvFvEquals(int evFv) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EV_FV = ? ORDER BY EV_FV", new Object[] {  new Integer(evFv) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'EV_OTROS = :evOtros'.
	 */
	public SegSeguimientoRegEventos[] findWhereEvOtrosEquals(int evOtros) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EV_OTROS = ? ORDER BY EV_OTROS", new Object[] {  new Integer(evOtros) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'TIEMPO_FA = :tiempoFa'.
	 */
	public SegSeguimientoRegEventos[] findWhereTiempoFaEquals(String tiempoFa) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIEMPO_FA = ? ORDER BY TIEMPO_FA", new Object[] { tiempoFa } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'OBSERVACIONES = :observaciones'.
	 */
	public SegSeguimientoRegEventos[] findWhereObservacionesEquals(String observaciones) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OBSERVACIONES = ? ORDER BY OBSERVACIONES", new Object[] { observaciones } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'COMENTARIOS_INTERNOS = :comentariosInternos'.
	 */
	public SegSeguimientoRegEventos[] findWhereComentariosInternosEquals(String comentariosInternos) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS_INTERNOS = ? ORDER BY COMENTARIOS_INTERNOS", new Object[] { comentariosInternos } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'DESCRIPCIONOTROS = :descripcionotros'.
	 */
	public SegSeguimientoRegEventos[] findWhereDescripcionotrosEquals(String descripcionotros) throws SegSeguimientoRegEventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPCIONOTROS = ? ORDER BY DESCRIPCIONOTROS", new Object[] { descripcionotros } );
	}

	/**
	 * Method 'SegSeguimientoRegEventosDaoImpl'
	 * 
	 */
	public SegSeguimientoRegEventosDaoImpl()
	{
	}

	public SegSeguimientoRegEventosDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	
	public SegSeguimientoRegEventosDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	/**
	 * Method 'SegSeguimientoRegEventosDaoImpl'
	 * 
	 * @param userConn
	 */
	public SegSeguimientoRegEventosDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.seg_seguimiento_reg_eventos";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SegSeguimientoRegEventos fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SegSeguimientoRegEventos dto = new SegSeguimientoRegEventos();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SegSeguimientoRegEventos[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SegSeguimientoRegEventos dto = new SegSeguimientoRegEventos();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SegSeguimientoRegEventos ret[] = new SegSeguimientoRegEventos[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SegSeguimientoRegEventos dto, ResultSet rs) throws SQLException
	{
		dto.setIdseg( new Integer( rs.getInt(COLUMN_IDSEG) ) );
		dto.setIdregeventos( new Integer( rs.getInt(COLUMN_IDREGEVENTOS) ) );
		if (rs.wasNull()) {
			dto.setIdregeventos( null );
		}
		
		dto.setFecha( rs.getDate(COLUMN_FECHA ) );
		dto.setOperadorMedico( rs.getString( COLUMN_OPERADOR_MEDICO ) );
		dto.setOperadorEnfermeria( rs.getString( COLUMN_OPERADOR_ENFERMERIA ) );
		dto.setMotivo( new Integer( rs.getInt(COLUMN_MOTIVO) ) );
		if (rs.wasNull()) {
			dto.setMotivo( null );
		}
		
		dto.setRemoto( new Integer( rs.getInt(COLUMN_REMOTO) ) );
		if (rs.wasNull()) {
			dto.setRemoto( null );
		}
		
		dto.setTiposeguimiento( new Integer( rs.getInt(COLUMN_TIPOSEGUIMIENTO) ) );
		if (rs.wasNull()) {
			dto.setTiposeguimiento( null );
		}
		
		dto.setActivacion( new Integer( rs.getInt(COLUMN_ACTIVACION) ) );
		if (rs.wasNull()) {
			dto.setActivacion( null );
		}
		
		dto.setEstadobateria( new Integer( rs.getInt(COLUMN_ESTADOBATERIA) ) );
		if (rs.wasNull()) {
			dto.setEstadobateria( null );
		}
		
		dto.setEvRitmosinusal( new Integer( rs.getInt(COLUMN_EV_RITMOSINUSAL) ) );
		if (rs.wasNull()) {
			dto.setEvRitmosinusal( null );
		}
		
		dto.setEvPausa( new Integer( rs.getInt(COLUMN_EV_PAUSA) ) );
		if (rs.wasNull()) {
			dto.setEvPausa( null );
		}
		
		dto.setEvBav( new Integer( rs.getInt(COLUMN_EV_BAV) ) );
		if (rs.wasNull()) {
			dto.setEvBav( null );
		}
		
		dto.setEvTpsv( new Integer( rs.getInt(COLUMN_EV_TPSV) ) );
		if (rs.wasNull()) {
			dto.setEvTpsv( null );
		}
		
		dto.setEvTv( new Integer( rs.getInt(COLUMN_EV_TV) ) );
		if (rs.wasNull()) {
			dto.setEvTv( null );
		}
		
		dto.setEvFv( new Integer( rs.getInt(COLUMN_EV_FV) ) );
		if (rs.wasNull()) {
			dto.setEvFv( null );
		}
		
		dto.setEvOtros( new Integer( rs.getInt(COLUMN_EV_OTROS) ) );
		if (rs.wasNull()) {
			dto.setEvOtros( null );
		}
		
		dto.setTiempoFa( rs.getString( COLUMN_TIEMPO_FA ) );
		dto.setObservaciones( rs.getString( COLUMN_OBSERVACIONES ) );
		dto.setComentariosInternos( rs.getString( COLUMN_COMENTARIOS_INTERNOS ) );
		dto.setDescripcionotros( rs.getString( COLUMN_DESCRIPCIONOTROS ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SegSeguimientoRegEventos dto)
	{
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the specified arbitrary SQL statement
	 */
	public SegSeguimientoRegEventos[] findByDynamicSelect(String sql, Object[] sqlParams) throws SegSeguimientoRegEventosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSeguimientoRegEventosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the specified arbitrary SQL statement
	 */
	public SegSeguimientoRegEventos[] findByDynamicWhere(String sql, Object[] sqlParams) throws SegSeguimientoRegEventosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSeguimientoRegEventosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
