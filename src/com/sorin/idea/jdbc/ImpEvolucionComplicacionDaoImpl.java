/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;

public class ImpEvolucionComplicacionDaoImpl extends AbstractDAO implements ImpEvolucionComplicacionDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDCOMPL, IDEV, ACTITUD, RESULTADO, OTRA FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDCOMPL, IDEV, ACTITUD, RESULTADO, OTRA ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDCOMPL = ?, IDEV = ?, ACTITUD = ?, RESULTADO = ?, OTRA = ? WHERE IDEV = ? ";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDEV = ? ";

	/** 
	 * Index of column IDCOMPL
	 */
	protected static final int COLUMN_IDCOMPL = 1;

	/** 
	 * Index of column IDEV
	 */
	protected static final int COLUMN_IDEV = 2;

	/** 
	 * Index of column ACTITUD
	 */
	protected static final int COLUMN_ACTITUD = 3;

	/** 
	 * Index of column RESULTADO
	 */
	protected static final int COLUMN_RESULTADO = 4;

	/** 
	 * Index of column OTRA
	 */
	protected static final int COLUMN_OTRA = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Index of primary-key column IDCOMPL
	 */
	protected static final int PK_COLUMN_IDCOMPL = 1;

	/** 
	 * Index of primary-key column IDEV
	 */
	protected static final int PK_COLUMN_IDEV = 2;

	/** 
	 * Inserts a new row in the imp_evolucion_complicacion table.
	 */
	public ImpEvolucionComplicacionPk insert(ImpEvolucionComplicacion dto) throws ImpEvolucionComplicacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.getIdcompl() != null) {
				stmt.setInt( index++, dto.getIdcompl().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdev() != null) {
				stmt.setInt( index++, dto.getIdev().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getActitud() );
			stmt.setString( index++, dto.getResultado() );
			stmt.setString( index++, dto.getOtra() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpEvolucionComplicacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the imp_evolucion_complicacion table.
	 */
	public void update(ImpEvolucionComplicacionPk pk, ImpEvolucionComplicacion dto) throws ImpEvolucionComplicacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdcompl() != null) {
				stmt.setInt( index++, dto.getIdcompl().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdev() != null) {
				stmt.setInt( index++, dto.getIdev().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getActitud() );
			stmt.setString( index++, dto.getResultado() );
			stmt.setString( index++, dto.getOtra() );
			if (pk.getIdcompl() != null) {
				stmt.setInt( 6, pk.getIdcompl().intValue() );
			} else {
				stmt.setNull(6, java.sql.Types.INTEGER);
			}
		
			if (pk.getIdev() != null) {
				stmt.setInt( 7, pk.getIdev().intValue() );
			} else {
				stmt.setNull(7, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpEvolucionComplicacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the imp_evolucion_complicacion table.
	 */
	public void delete(ImpEvolucionComplicacionPk pk) throws ImpEvolucionComplicacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			/*if (pk.getIdcompl() != null) {
				stmt.setInt( 1, pk.getIdcompl().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}*/
		
			if (pk.getIdev() != null) {
				stmt.setInt( 1, pk.getIdev().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpEvolucionComplicacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the imp_evolucion_complicacion table that matches the specified primary-key value.
	 */
	public ImpEvolucionComplicacion findByPrimaryKey(ImpEvolucionComplicacionPk pk) throws ImpEvolucionComplicacionDaoException
	{
		return findByPrimaryKey( pk.getIdcompl(), pk.getIdev() );
	}

	/** 
	 * Returns all rows from the imp_evolucion_complicacion table that match the criteria 'IDCOMPL = :idcompl AND IDEV = :idev'.
	 */
	public ImpEvolucionComplicacion findByPrimaryKey(Integer idcompl, Integer idev) throws ImpEvolucionComplicacionDaoException
	{
		ImpEvolucionComplicacion ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDCOMPL = ? AND IDEV = ?", new Object[] { idcompl, idev } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the imp_evolucion_complicacion table that match the criteria ''.
	 */
	public ImpEvolucionComplicacion[] findAll() throws ImpEvolucionComplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDCOMPL, IDEV", null );
	}

	/** 
	 * Returns all rows from the imp_evolucion_complicacion table that match the criteria 'IDCOMPL = :idcompl'.
	 */
	public ImpEvolucionComplicacion[] findWhereIdcomplEquals(int idcompl) throws ImpEvolucionComplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDCOMPL = ? ORDER BY IDCOMPL", new Object[] {  new Integer(idcompl) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion_complicacion table that match the criteria 'IDEV = :idev'.
	 */
	public ImpEvolucionComplicacion[] findWhereIdevEquals(int idev) throws ImpEvolucionComplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDEV = ? ORDER BY IDEV", new Object[] {  new Integer(idev) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion_complicacion table that match the criteria 'ACTITUD = :actitud'.
	 */
	public ImpEvolucionComplicacion[] findWhereActitudEquals(String actitud) throws ImpEvolucionComplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTITUD = ? ORDER BY ACTITUD", new Object[] { actitud } );
	}

	/** 
	 * Returns all rows from the imp_evolucion_complicacion table that match the criteria 'RESULTADO = :resultado'.
	 */
	public ImpEvolucionComplicacion[] findWhereResultadoEquals(String resultado) throws ImpEvolucionComplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RESULTADO = ? ORDER BY RESULTADO", new Object[] { resultado } );
	}

	/** 
	 * Returns all rows from the imp_evolucion_complicacion table that match the criteria 'OTRA = :otra'.
	 */
	public ImpEvolucionComplicacion[] findWhereOtraEquals(String otra) throws ImpEvolucionComplicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OTRA = ? ORDER BY OTRA", new Object[] { otra } );
	}

	/**
	 * Method 'ImpEvolucionComplicacionDaoImpl'
	 * 
	 */
	public ImpEvolucionComplicacionDaoImpl()
	{
	}
	/**
	 * Method 'ImpEvolucionComplicacionDaoImpl'
	 * 
	 */
	public ImpEvolucionComplicacionDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ImpEvolucionComplicacionDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ImpEvolucionComplicacionDaoImpl'
	 * 
	 * @param userConn
	 */
	public ImpEvolucionComplicacionDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.imp_evolucion_complicacion";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ImpEvolucionComplicacion fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ImpEvolucionComplicacion dto = new ImpEvolucionComplicacion();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ImpEvolucionComplicacion[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ImpEvolucionComplicacion dto = new ImpEvolucionComplicacion();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ImpEvolucionComplicacion ret[] = new ImpEvolucionComplicacion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ImpEvolucionComplicacion dto, ResultSet rs) throws SQLException
	{
		dto.setIdcompl( new Integer( rs.getInt(COLUMN_IDCOMPL) ) );
		dto.setIdev( new Integer( rs.getInt(COLUMN_IDEV) ) );
		dto.setActitud( rs.getString( COLUMN_ACTITUD ) );
		dto.setResultado( rs.getString( COLUMN_RESULTADO ) );
		dto.setOtra( rs.getString( COLUMN_OTRA ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ImpEvolucionComplicacion dto)
	{
	}

	/** 
	 * Returns all rows from the imp_evolucion_complicacion table that match the specified arbitrary SQL statement
	 */
	public ImpEvolucionComplicacion[] findByDynamicSelect(String sql, Object[] sqlParams) throws ImpEvolucionComplicacionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpEvolucionComplicacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the imp_evolucion_complicacion table that match the specified arbitrary SQL statement
	 */
	public ImpEvolucionComplicacion[] findByDynamicWhere(String sql, Object[] sqlParams) throws ImpEvolucionComplicacionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpEvolucionComplicacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
