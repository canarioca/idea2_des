/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ArrEstudioCatUsoDaoImpl extends AbstractDAO implements ArrEstudioCatUsoDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDCATUSO, IDCATETER, IDEEF, IDVIA, IDLOCALIZACION, IDABLACION, TIEMPO, REUTILIZADO, DEFECTUOSO, LOTE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDCATUSO, IDCATETER, IDEEF, IDVIA, IDLOCALIZACION, IDABLACION, TIEMPO, REUTILIZADO, DEFECTUOSO, LOTE ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDCATUSO = ?, IDCATETER = ?, IDEEF = ?, IDVIA = ?, IDLOCALIZACION = ?, IDABLACION = ?, TIEMPO = ?, REUTILIZADO = ?, DEFECTUOSO = ?, LOTE = ? WHERE IDCATUSO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDCATUSO = ?";
	protected final String SQL_DELETE_2 = "DELETE FROM " + getTableName() + " WHERE IDEEF = ?";
	/** 
	 * Index of column IDCATUSO
	 */
	protected static final int COLUMN_IDCATUSO = 1;

	/** 
	 * Index of column IDCATETER
	 */
	protected static final int COLUMN_IDCATETER = 2;

	/** 
	 * Index of column IDEEF
	 */
	protected static final int COLUMN_IDEEF = 3;

	/** 
	 * Index of column IDVIA
	 */
	protected static final int COLUMN_IDVIA = 4;

	/** 
	 * Index of column IDLOCALIZACION
	 */
	protected static final int COLUMN_IDLOCALIZACION = 5;

	/** 
	 * Index of column IDABLACION
	 */
	protected static final int COLUMN_IDABLACION = 6;

	/** 
	 * Index of column TIEMPO
	 */
	protected static final int COLUMN_TIEMPO = 7;

	/** 
	 * Index of column REUTILIZADO
	 */
	protected static final int COLUMN_REUTILIZADO = 8;

	/** 
	 * Index of column DEFECTUOSO
	 */
	protected static final int COLUMN_DEFECTUOSO = 9;

	/** 
	 * Index of column LOTE
	 */
	protected static final int COLUMN_LOTE = 10;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 10;

	/** 
	 * Index of primary-key column IDCATUSO
	 */
	protected static final int PK_COLUMN_IDCATUSO = 1;

	/** 
	 * Inserts a new row in the arr_estudio_cat_uso table.
	 */
	public ArrEstudioCatUsoPk insert(ArrEstudioCatUso dto) throws ArrEstudioCatUsoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT,Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdcatuso() != null) {
				stmt.setInt( index++, dto.getIdcatuso().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdcateter() != null) {
				stmt.setInt( index++, dto.getIdcateter().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdeef() != null) {
				stmt.setInt( index++, dto.getIdeef().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdvia() != null) {
				stmt.setInt( index++, dto.getIdvia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdlocalizacion() != null) {
				stmt.setInt( index++, dto.getIdlocalizacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdablacion() != null) {
				stmt.setInt( index++, dto.getIdablacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getTiempo() );
			if (dto.getReutilizado() != null) {
				stmt.setInt( index++, dto.getReutilizado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getDefectuoso() != null) {
				stmt.setInt( index++, dto.getDefectuoso().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getLote() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			// retrieve values from auto-increment columns
			// FRR - MEJORA AUTOINCREMENTO - REVISAR EN ORACLE
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdcatuso( new Integer( rs.getInt(1) ) );
			}
			
			auditoriaDto.setAccion(AuditoriaDto.insercion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrEstudioCatUsoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the arr_estudio_cat_uso table.
	 */
	public void update(ArrEstudioCatUsoPk pk, ArrEstudioCatUso dto) throws ArrEstudioCatUsoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdcatuso() != null) {
				stmt.setInt( index++, dto.getIdcatuso().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdcateter() != null) {
				stmt.setInt( index++, dto.getIdcateter().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdeef() != null) {
				stmt.setInt( index++, dto.getIdeef().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdvia() != null) {
				stmt.setInt( index++, dto.getIdvia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdlocalizacion() != null) {
				stmt.setInt( index++, dto.getIdlocalizacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdablacion() != null) {
				stmt.setInt( index++, dto.getIdablacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getTiempo() );
			if (dto.getReutilizado() != null) {
				stmt.setInt( index++, dto.getReutilizado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getDefectuoso() != null) {
				stmt.setInt( index++, dto.getDefectuoso().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getLote() );
			if (pk.getIdcatuso() != null) {
				stmt.setInt( 11, pk.getIdcatuso().intValue() );
			} else {
				stmt.setNull(11, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrEstudioCatUsoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the arr_estudio_cat_uso table.
	 */
	public void delete(ArrEstudioCatUsoPk pk) throws ArrEstudioCatUsoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdcatuso() != null) {
				stmt.setInt( 1, pk.getIdcatuso().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(pk.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrEstudioCatUsoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	public void delete(Integer idestudio) throws ArrEstudioCatUsoDaoException{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE_2 );
					
			if (idestudio != null) {
				stmt.setInt( 1, idestudio.intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
				
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(idestudio.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrEstudioCatUsoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
	}

	/** 
	 * Returns the rows from the arr_estudio_cat_uso table that matches the specified primary-key value.
	 */
	public ArrEstudioCatUso findByPrimaryKey(ArrEstudioCatUsoPk pk) throws ArrEstudioCatUsoDaoException
	{
		return findByPrimaryKey( pk.getIdcatuso() );
	}

	/** 
	 * Returns all rows from the arr_estudio_cat_uso table that match the criteria 'IDCATUSO = :idcatuso'.
	 */
	public ArrEstudioCatUso findByPrimaryKey(Integer idcatuso) throws ArrEstudioCatUsoDaoException
	{
		ArrEstudioCatUso ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDCATUSO = ?", new Object[] { idcatuso } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the arr_estudio_cat_uso table that match the criteria ''.
	 */
	public ArrEstudioCatUso[] findAll() throws ArrEstudioCatUsoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDCATUSO", null );
	}

	/** 
	 * Returns all rows from the arr_estudio_cat_uso table that match the criteria 'IDCATUSO = :idcatuso'.
	 */
	public ArrEstudioCatUso[] findWhereIdcatusoEquals(int idcatuso) throws ArrEstudioCatUsoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDCATUSO = ? ORDER BY IDCATUSO", new Object[] {  new Integer(idcatuso) } );
	}

	/** 
	 * Returns all rows from the arr_estudio_cat_uso table that match the criteria 'IDCATETER = :idcateter'.
	 */
	public ArrEstudioCatUso[] findWhereIdcateterEquals(int idcateter) throws ArrEstudioCatUsoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDCATETER = ? ORDER BY IDCATETER", new Object[] {  new Integer(idcateter) } );
	}

	/** 
	 * Returns all rows from the arr_estudio_cat_uso table that match the criteria 'IDEEF = :ideef'.
	 */
	public ArrEstudioCatUso[] findWhereIdeefEquals(int ideef) throws ArrEstudioCatUsoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDEEF = ? ORDER BY IDEEF", new Object[] {  new Integer(ideef) } );
	}

	/** 
	 * Returns all rows from the arr_estudio_cat_uso table that match the criteria 'IDVIA = :idvia'.
	 */
	public ArrEstudioCatUso[] findWhereIdviaEquals(int idvia) throws ArrEstudioCatUsoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDVIA = ? ORDER BY IDVIA", new Object[] {  new Integer(idvia) } );
	}

	/** 
	 * Returns all rows from the arr_estudio_cat_uso table that match the criteria 'IDLOCALIZACION = :idlocalizacion'.
	 */
	public ArrEstudioCatUso[] findWhereIdlocalizacionEquals(int idlocalizacion) throws ArrEstudioCatUsoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDLOCALIZACION = ? ORDER BY IDLOCALIZACION", new Object[] {  new Integer(idlocalizacion) } );
	}

	/** 
	 * Returns all rows from the arr_estudio_cat_uso table that match the criteria 'IDABLACION = :idablacion'.
	 */
	public ArrEstudioCatUso[] findWhereIdablacionEquals(int idablacion) throws ArrEstudioCatUsoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDABLACION = ? ORDER BY IDABLACION", new Object[] {  new Integer(idablacion) } );
	}

	/** 
	 * Returns all rows from the arr_estudio_cat_uso table that match the criteria 'TIEMPO = :tiempo'.
	 */
	public ArrEstudioCatUso[] findWhereTiempoEquals(String tiempo) throws ArrEstudioCatUsoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIEMPO = ? ORDER BY TIEMPO", new Object[] { tiempo } );
	}

	/** 
	 * Returns all rows from the arr_estudio_cat_uso table that match the criteria 'REUTILIZADO = :reutilizado'.
	 */
	public ArrEstudioCatUso[] findWhereReutilizadoEquals(int reutilizado) throws ArrEstudioCatUsoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REUTILIZADO = ? ORDER BY REUTILIZADO", new Object[] {  new Integer(reutilizado) } );
	}

	/** 
	 * Returns all rows from the arr_estudio_cat_uso table that match the criteria 'DEFECTUOSO = :defectuoso'.
	 */
	public ArrEstudioCatUso[] findWhereDefectuosoEquals(int defectuoso) throws ArrEstudioCatUsoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DEFECTUOSO = ? ORDER BY DEFECTUOSO", new Object[] {  new Integer(defectuoso) } );
	}

	/** 
	 * Returns all rows from the arr_estudio_cat_uso table that match the criteria 'LOTE = :lote'.
	 */
	public ArrEstudioCatUso[] findWhereLoteEquals(String lote) throws ArrEstudioCatUsoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOTE = ? ORDER BY LOTE", new Object[] { lote } );
	}

	/**
	 * Method 'ArrEstudioCatUsoDaoImpl'
	 * 
	 */
	public ArrEstudioCatUsoDaoImpl()
	{
	}
	public ArrEstudioCatUsoDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ArrEstudioCatUsoDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ArrEstudioCatUsoDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrEstudioCatUsoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.arr_estudio_cat_uso";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrEstudioCatUso fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrEstudioCatUso dto = new ArrEstudioCatUso();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrEstudioCatUso[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrEstudioCatUso dto = new ArrEstudioCatUso();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrEstudioCatUso ret[] = new ArrEstudioCatUso[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrEstudioCatUso dto, ResultSet rs) throws SQLException
	{
		dto.setIdcatuso( new Integer( rs.getInt(COLUMN_IDCATUSO) ) );
		dto.setIdcateter( new Integer( rs.getInt(COLUMN_IDCATETER) ) );
		dto.setIdeef( new Integer( rs.getInt(COLUMN_IDEEF) ) );
		if (rs.wasNull()) {
			dto.setIdeef( null );
		}
		
		dto.setIdvia( new Integer( rs.getInt(COLUMN_IDVIA) ) );
		if (rs.wasNull()) {
			dto.setIdvia( null );
		}
		
		dto.setIdlocalizacion( new Integer( rs.getInt(COLUMN_IDLOCALIZACION) ) );
		if (rs.wasNull()) {
			dto.setIdlocalizacion( null );
		}
		
		dto.setIdablacion( new Integer( rs.getInt(COLUMN_IDABLACION) ) );
		if (rs.wasNull()) {
			dto.setIdablacion( null );
		}
		
		dto.setTiempo( rs.getString( COLUMN_TIEMPO ) );
		dto.setReutilizado( new Integer( rs.getInt(COLUMN_REUTILIZADO) ) );
		if (rs.wasNull()) {
			dto.setReutilizado( null );
		}
		
		dto.setDefectuoso( new Integer( rs.getInt(COLUMN_DEFECTUOSO) ) );
		if (rs.wasNull()) {
			dto.setDefectuoso( null );
		}
		
		dto.setLote( rs.getString( COLUMN_LOTE ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrEstudioCatUso dto)
	{
	}

	/** 
	 * Returns all rows from the arr_estudio_cat_uso table that match the specified arbitrary SQL statement
	 */
	public ArrEstudioCatUso[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrEstudioCatUsoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrEstudioCatUsoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the arr_estudio_cat_uso table that match the specified arbitrary SQL statement
	 */
	public ArrEstudioCatUso[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrEstudioCatUsoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrEstudioCatUsoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
