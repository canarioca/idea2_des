/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class GenvaloresfabricaDaoImpl extends AbstractDAO implements GenvaloresfabricaDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDGENERADOR, VOLTAJEAD, DURIMPAD, SENSIBAD, VOLTAJEVD, DURIMPVD, SENSIBVD, VOLTAJEVI, DURIMPVI, SENSIBVI, FRECUENCIA, MODOEST, IAVEST, IAVDET FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDGENERADOR, VOLTAJEAD, DURIMPAD, SENSIBAD, VOLTAJEVD, DURIMPVD, SENSIBVD, VOLTAJEVI, DURIMPVI, SENSIBVI, FRECUENCIA, MODOEST, IAVEST, IAVDET ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDGENERADOR = ?, VOLTAJEAD = ?, DURIMPAD = ?, SENSIBAD = ?, VOLTAJEVD = ?, DURIMPVD = ?, SENSIBVD = ?, VOLTAJEVI = ?, DURIMPVI = ?, SENSIBVI = ?, FRECUENCIA = ?, MODOEST = ?, IAVEST = ?, IAVDET = ? WHERE IDGENERADOR = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDGENERADOR = ?";

	/** 
	 * Index of column IDGENERADOR
	 */
	protected static final int COLUMN_IDGENERADOR = 1;

	/** 
	 * Index of column VOLTAJEAD
	 */
	protected static final int COLUMN_VOLTAJEAD = 2;

	/** 
	 * Index of column DURIMPAD
	 */
	protected static final int COLUMN_DURIMPAD = 3;

	/** 
	 * Index of column SENSIBAD
	 */
	protected static final int COLUMN_SENSIBAD = 4;

	/** 
	 * Index of column VOLTAJEVD
	 */
	protected static final int COLUMN_VOLTAJEVD = 5;

	/** 
	 * Index of column DURIMPVD
	 */
	protected static final int COLUMN_DURIMPVD = 6;

	/** 
	 * Index of column SENSIBVD
	 */
	protected static final int COLUMN_SENSIBVD = 7;

	/** 
	 * Index of column VOLTAJEVI
	 */
	protected static final int COLUMN_VOLTAJEVI = 8;

	/** 
	 * Index of column DURIMPVI
	 */
	protected static final int COLUMN_DURIMPVI = 9;

	/** 
	 * Index of column SENSIBVI
	 */
	protected static final int COLUMN_SENSIBVI = 10;

	/** 
	 * Index of column FRECUENCIA
	 */
	protected static final int COLUMN_FRECUENCIA = 11;

	/** 
	 * Index of column MODOEST
	 */
	protected static final int COLUMN_MODOEST = 12;

	/** 
	 * Index of column IAVEST
	 */
	protected static final int COLUMN_IAVEST = 13;

	/** 
	 * Index of column IAVDET
	 */
	protected static final int COLUMN_IAVDET = 14;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 14;

	/** 
	 * Index of primary-key column IDGENERADOR
	 */
	protected static final int PK_COLUMN_IDGENERADOR = 1;

	/** 
	 * Inserts a new row in the genvaloresfabrica table.
	 */
	public GenvaloresfabricaPk insert(Genvaloresfabrica dto) throws GenvaloresfabricaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.getIdgenerador() != null) {
				stmt.setInt( index++, dto.getIdgenerador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getVoltajead() );
			stmt.setString( index++, dto.getDurimpad() );
			stmt.setString( index++, dto.getSensibad() );
			stmt.setString( index++, dto.getVoltajevd() );
			stmt.setString( index++, dto.getDurimpvd() );
			stmt.setString( index++, dto.getSensibvd() );
			stmt.setString( index++, dto.getVoltajevi() );
			stmt.setString( index++, dto.getDurimpvi() );
			stmt.setString( index++, dto.getSensibvi() );
			stmt.setString( index++, dto.getFrecuencia() );
			stmt.setString( index++, dto.getModoest() );
			stmt.setString( index++, dto.getIavest() );
			stmt.setString( index++, dto.getIavdet() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GenvaloresfabricaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the genvaloresfabrica table.
	 */
	public void update(GenvaloresfabricaPk pk, Genvaloresfabrica dto) throws GenvaloresfabricaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdgenerador() != null) {
				stmt.setInt( index++, dto.getIdgenerador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getVoltajead() );
			stmt.setString( index++, dto.getDurimpad() );
			stmt.setString( index++, dto.getSensibad() );
			stmt.setString( index++, dto.getVoltajevd() );
			stmt.setString( index++, dto.getDurimpvd() );
			stmt.setString( index++, dto.getSensibvd() );
			stmt.setString( index++, dto.getVoltajevi() );
			stmt.setString( index++, dto.getDurimpvi() );
			stmt.setString( index++, dto.getSensibvi() );
			stmt.setString( index++, dto.getFrecuencia() );
			stmt.setString( index++, dto.getModoest() );
			stmt.setString( index++, dto.getIavest() );
			stmt.setString( index++, dto.getIavdet() );
			if (pk.getIdgenerador() != null) {
				stmt.setInt( 15, pk.getIdgenerador().intValue() );
			} else {
				stmt.setNull(15, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GenvaloresfabricaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the genvaloresfabrica table.
	 */
	public void delete(GenvaloresfabricaPk pk) throws GenvaloresfabricaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdgenerador() != null) {
				stmt.setInt( 1, pk.getIdgenerador().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GenvaloresfabricaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the genvaloresfabrica table that matches the specified primary-key value.
	 */
	public Genvaloresfabrica findByPrimaryKey(GenvaloresfabricaPk pk) throws GenvaloresfabricaDaoException
	{
		return findByPrimaryKey( pk.getIdgenerador() );
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'IDGENERADOR = :idgenerador'.
	 */
	public Genvaloresfabrica findByPrimaryKey(Integer idgenerador) throws GenvaloresfabricaDaoException
	{
		Genvaloresfabrica ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDGENERADOR = ?", new Object[] { idgenerador } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria ''.
	 */
	public Genvaloresfabrica[] findAll() throws GenvaloresfabricaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDGENERADOR", null );
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'IDGENERADOR = :idgenerador'.
	 */
	public Genvaloresfabrica[] findWhereIdgeneradorEquals(int idgenerador) throws GenvaloresfabricaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDGENERADOR = ? ORDER BY IDGENERADOR", new Object[] {  new Integer(idgenerador) } );
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'VOLTAJEAD = :voltajead'.
	 */
	public Genvaloresfabrica[] findWhereVoltajeadEquals(String voltajead) throws GenvaloresfabricaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VOLTAJEAD = ? ORDER BY VOLTAJEAD", new Object[] { voltajead } );
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'DURIMPAD = :durimpad'.
	 */
	public Genvaloresfabrica[] findWhereDurimpadEquals(String durimpad) throws GenvaloresfabricaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DURIMPAD = ? ORDER BY DURIMPAD", new Object[] { durimpad } );
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'SENSIBAD = :sensibad'.
	 */
	public Genvaloresfabrica[] findWhereSensibadEquals(String sensibad) throws GenvaloresfabricaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SENSIBAD = ? ORDER BY SENSIBAD", new Object[] { sensibad } );
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'VOLTAJEVD = :voltajevd'.
	 */
	public Genvaloresfabrica[] findWhereVoltajevdEquals(String voltajevd) throws GenvaloresfabricaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VOLTAJEVD = ? ORDER BY VOLTAJEVD", new Object[] { voltajevd } );
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'DURIMPVD = :durimpvd'.
	 */
	public Genvaloresfabrica[] findWhereDurimpvdEquals(String durimpvd) throws GenvaloresfabricaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DURIMPVD = ? ORDER BY DURIMPVD", new Object[] { durimpvd } );
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'SENSIBVD = :sensibvd'.
	 */
	public Genvaloresfabrica[] findWhereSensibvdEquals(String sensibvd) throws GenvaloresfabricaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SENSIBVD = ? ORDER BY SENSIBVD", new Object[] { sensibvd } );
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'VOLTAJEVI = :voltajevi'.
	 */
	public Genvaloresfabrica[] findWhereVoltajeviEquals(String voltajevi) throws GenvaloresfabricaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VOLTAJEVI = ? ORDER BY VOLTAJEVI", new Object[] { voltajevi } );
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'DURIMPVI = :durimpvi'.
	 */
	public Genvaloresfabrica[] findWhereDurimpviEquals(String durimpvi) throws GenvaloresfabricaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DURIMPVI = ? ORDER BY DURIMPVI", new Object[] { durimpvi } );
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'SENSIBVI = :sensibvi'.
	 */
	public Genvaloresfabrica[] findWhereSensibviEquals(String sensibvi) throws GenvaloresfabricaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SENSIBVI = ? ORDER BY SENSIBVI", new Object[] { sensibvi } );
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'FRECUENCIA = :frecuencia'.
	 */
	public Genvaloresfabrica[] findWhereFrecuenciaEquals(String frecuencia) throws GenvaloresfabricaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FRECUENCIA = ? ORDER BY FRECUENCIA", new Object[] { frecuencia } );
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'MODOEST = :modoest'.
	 */
	public Genvaloresfabrica[] findWhereModoestEquals(String modoest) throws GenvaloresfabricaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MODOEST = ? ORDER BY MODOEST", new Object[] { modoest } );
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'IAVEST = :iavest'.
	 */
	public Genvaloresfabrica[] findWhereIavestEquals(String iavest) throws GenvaloresfabricaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IAVEST = ? ORDER BY IAVEST", new Object[] { iavest } );
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'IAVDET = :iavdet'.
	 */
	public Genvaloresfabrica[] findWhereIavdetEquals(String iavdet) throws GenvaloresfabricaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IAVDET = ? ORDER BY IAVDET", new Object[] { iavdet } );
	}

	/**
	 * Method 'GenvaloresfabricaDaoImpl'
	 * 
	 */
	public GenvaloresfabricaDaoImpl()
	{
	}

	public GenvaloresfabricaDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public GenvaloresfabricaDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	/**
	 * Method 'GenvaloresfabricaDaoImpl'
	 * 
	 * @param userConn
	 */
	public GenvaloresfabricaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.genvaloresfabrica";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Genvaloresfabrica fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Genvaloresfabrica dto = new Genvaloresfabrica();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Genvaloresfabrica[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Genvaloresfabrica dto = new Genvaloresfabrica();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Genvaloresfabrica ret[] = new Genvaloresfabrica[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Genvaloresfabrica dto, ResultSet rs) throws SQLException
	{
		dto.setIdgenerador( new Integer( rs.getInt(COLUMN_IDGENERADOR) ) );
		dto.setVoltajead( rs.getString( COLUMN_VOLTAJEAD ) );
		dto.setDurimpad( rs.getString( COLUMN_DURIMPAD ) );
		dto.setSensibad( rs.getString( COLUMN_SENSIBAD ) );
		dto.setVoltajevd( rs.getString( COLUMN_VOLTAJEVD ) );
		dto.setDurimpvd( rs.getString( COLUMN_DURIMPVD ) );
		dto.setSensibvd( rs.getString( COLUMN_SENSIBVD ) );
		dto.setVoltajevi( rs.getString( COLUMN_VOLTAJEVI ) );
		dto.setDurimpvi( rs.getString( COLUMN_DURIMPVI ) );
		dto.setSensibvi( rs.getString( COLUMN_SENSIBVI ) );
		dto.setFrecuencia( rs.getString( COLUMN_FRECUENCIA ) );
		dto.setModoest( rs.getString( COLUMN_MODOEST ) );
		dto.setIavest( rs.getString( COLUMN_IAVEST ) );
		dto.setIavdet( rs.getString( COLUMN_IAVDET ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Genvaloresfabrica dto)
	{
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the specified arbitrary SQL statement
	 */
	public Genvaloresfabrica[] findByDynamicSelect(String sql, Object[] sqlParams) throws GenvaloresfabricaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GenvaloresfabricaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the specified arbitrary SQL statement
	 */
	public Genvaloresfabrica[] findByDynamicWhere(String sql, Object[] sqlParams) throws GenvaloresfabricaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GenvaloresfabricaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
