/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class IntegracionesInformesDaoImpl extends AbstractDAO implements IntegracionesInformesDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDINTEGRACIONES, IDINTEGRACION, FECHARX, FECHAREGISTRO, IDSISTEMA, MODELO, NSERIE, NOMBRE_APS, NHC, NOMBREFICHERO, ESTADO, ERROR, COMENTARIOS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDINTEGRACIONES, IDINTEGRACION, FECHARX, FECHAREGISTRO, IDSISTEMA, MODELO, NSERIE, NOMBRE_APS, NHC, NOMBREFICHERO, ESTADO, ERROR, COMENTARIOS ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDINTEGRACIONES = ?, IDINTEGRACION = ?, FECHARX = ?, FECHAREGISTRO = ?, IDSISTEMA = ?, MODELO = ?, NSERIE = ?, NOMBRE_APS = ?, NHC = ?, NOMBREFICHERO = ?, ESTADO = ?, ERROR = ?, COMENTARIOS = ? WHERE IDINTEGRACIONES = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDINTEGRACIONES = ?";

	/** 
	 * Index of column IDINTEGRACIONES
	 */
	protected static final int COLUMN_IDINTEGRACIONES = 1;

	/** 
	 * Index of column IDINTEGRACION
	 */
	protected static final int COLUMN_IDINTEGRACION = 2;

	/** 
	 * Index of column FECHARX
	 */
	protected static final int COLUMN_FECHARX = 3;

	/** 
	 * Index of column FECHAREGISTRO
	 */
	protected static final int COLUMN_FECHAREGISTRO = 4;

	/** 
	 * Index of column IDSISTEMA
	 */
	protected static final int COLUMN_IDSISTEMA = 5;

	/** 
	 * Index of column MODELO
	 */
	protected static final int COLUMN_MODELO = 6;

	/** 
	 * Index of column NSERIE
	 */
	protected static final int COLUMN_NSERIE = 7;

	/** 
	 * Index of column NOMBRE_APS
	 */
	protected static final int COLUMN_NOMBRE_APS = 8;

	/** 
	 * Index of column NHC
	 */
	protected static final int COLUMN_NHC = 9;

	/** 
	 * Index of column NOMBREFICHERO
	 */
	protected static final int COLUMN_NOMBREFICHERO = 10;

	/** 
	 * Index of column ESTADO
	 */
	protected static final int COLUMN_ESTADO = 11;

	/** 
	 * Index of column ERROR
	 */
	protected static final int COLUMN_ERROR = 12;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 13;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column IDINTEGRACIONES
	 */
	protected static final int PK_COLUMN_IDINTEGRACIONES = 1;

	/** 
	 * Inserts a new row in the integraciones_informes table.
	 */
	public IntegracionesInformesPk insert(IntegracionesInformes dto) throws IntegracionesInformesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdintegraciones() != null) {
				stmt.setInt( index++, dto.getIdintegraciones().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdintegracion() != null) {
				stmt.setInt( index++, dto.getIdintegracion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setTimestamp(index++, dto.getFecharx()==null ? null : new java.sql.Timestamp( dto.getFecharx().getTime() ) );
			stmt.setDate(index++, dto.getFecharegistro()==null ? null : new java.sql.Date( dto.getFecharegistro().getTime() ) );
			if (dto.getIdsistema() != null) {
				stmt.setInt( index++, dto.getIdsistema().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getModelo() );
			stmt.setString( index++, dto.getNserie() );
			stmt.setString( index++, dto.getNombreAps() );
			stmt.setString( index++, dto.getNhc() );
			stmt.setString( index++, dto.getNombrefichero() );
			if (dto.getEstado() != null) {
				stmt.setInt( index++, dto.getEstado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getError() );
			stmt.setString( index++, dto.getComentarios() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdintegraciones( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new IntegracionesInformesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the integraciones_informes table.
	 */
	public void update(IntegracionesInformesPk pk, IntegracionesInformes dto) throws IntegracionesInformesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdintegraciones() != null) {
				stmt.setInt( index++, dto.getIdintegraciones().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdintegracion() != null) {
				stmt.setInt( index++, dto.getIdintegracion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setTimestamp(index++, dto.getFecharx()==null ? null : new java.sql.Timestamp( dto.getFecharx().getTime() ) );
			stmt.setDate(index++, dto.getFecharegistro()==null ? null : new java.sql.Date( dto.getFecharegistro().getTime() ) );
			if (dto.getIdsistema() != null) {
				stmt.setInt( index++, dto.getIdsistema().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getModelo() );
			stmt.setString( index++, dto.getNserie() );
			stmt.setString( index++, dto.getNombreAps() );
			stmt.setString( index++, dto.getNhc() );
			stmt.setString( index++, dto.getNombrefichero() );
			if (dto.getEstado() != null) {
				stmt.setInt( index++, dto.getEstado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getError() );
			stmt.setString( index++, dto.getComentarios() );
			if (pk.getIdintegraciones() != null) {
				stmt.setInt( 14, pk.getIdintegraciones().intValue() );
			} else {
				stmt.setNull(14, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new IntegracionesInformesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the integraciones_informes table.
	 */
	public void delete(IntegracionesInformesPk pk) throws IntegracionesInformesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdintegraciones() != null) {
				stmt.setInt( 1, pk.getIdintegraciones().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(pk.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new IntegracionesInformesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the integraciones_informes table that matches the specified primary-key value.
	 */
	public IntegracionesInformes findByPrimaryKey(IntegracionesInformesPk pk) throws IntegracionesInformesDaoException
	{
		return findByPrimaryKey( pk.getIdintegraciones() );
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the criteria 'IDINTEGRACIONES = :idintegraciones'.
	 */
	public IntegracionesInformes findByPrimaryKey(Integer idintegraciones) throws IntegracionesInformesDaoException
	{
		IntegracionesInformes ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDINTEGRACIONES = ?", new Object[] { idintegraciones } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the criteria ''.
	 */
	public IntegracionesInformes[] findAll() throws IntegracionesInformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDINTEGRACIONES", null );
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the criteria 'IDINTEGRACIONES = :idintegraciones'.
	 */
	public IntegracionesInformes[] findWhereIdintegracionesEquals(int idintegraciones) throws IntegracionesInformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDINTEGRACIONES = ? ORDER BY IDINTEGRACIONES", new Object[] {  new Integer(idintegraciones) } );
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the criteria 'IDINTEGRACION = :idintegracion'.
	 */
	public IntegracionesInformes[] findWhereIdintegracionEquals(int idintegracion) throws IntegracionesInformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDINTEGRACION = ? ORDER BY IDINTEGRACION", new Object[] {  new Integer(idintegracion) } );
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the criteria 'FECHARX = :fecharx'.
	 */
	public IntegracionesInformes[] findWhereFecharxEquals(Date fecharx) throws IntegracionesInformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHARX = ? ORDER BY FECHARX", new Object[] { fecharx==null ? null : new java.sql.Timestamp( fecharx.getTime() ) } );
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the criteria 'FECHAREGISTRO = :fecharegistro'.
	 */
	public IntegracionesInformes[] findWhereFecharegistroEquals(Date fecharegistro) throws IntegracionesInformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAREGISTRO = ? ORDER BY FECHAREGISTRO", new Object[] { fecharegistro==null ? null : new java.sql.Date( fecharegistro.getTime() ) } );
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the criteria 'IDSISTEMA = :idsistema'.
	 */
	public IntegracionesInformes[] findWhereIdsistemaEquals(int idsistema) throws IntegracionesInformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDSISTEMA = ? ORDER BY IDSISTEMA", new Object[] {  new Integer(idsistema) } );
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the criteria 'MODELO = :modelo'.
	 */
	public IntegracionesInformes[] findWhereModeloEquals(String modelo) throws IntegracionesInformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MODELO = ? ORDER BY MODELO", new Object[] { modelo } );
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the criteria 'NSERIE = :nserie'.
	 */
	public IntegracionesInformes[] findWhereNserieEquals(String nserie) throws IntegracionesInformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NSERIE = ? ORDER BY NSERIE", new Object[] { nserie } );
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the criteria 'NOMBRE_APS = :nombreAps'.
	 */
	public IntegracionesInformes[] findWhereNombreApsEquals(String nombreAps) throws IntegracionesInformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_APS = ? ORDER BY NOMBRE_APS", new Object[] { nombreAps } );
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the criteria 'NHC = :nhc'.
	 */
	public IntegracionesInformes[] findWhereNhcEquals(String nhc) throws IntegracionesInformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NHC = ? ORDER BY NHC", new Object[] { nhc } );
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the criteria 'NOMBREFICHERO = :nombrefichero'.
	 */
	public IntegracionesInformes[] findWhereNombreficheroEquals(String nombrefichero) throws IntegracionesInformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBREFICHERO = ? ORDER BY NOMBREFICHERO", new Object[] { nombrefichero } );
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the criteria 'ESTADO = :estado'.
	 */
	public IntegracionesInformes[] findWhereEstadoEquals(int estado) throws IntegracionesInformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTADO = ? ORDER BY ESTADO", new Object[] {  new Integer(estado) } );
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the criteria 'ERROR = :error'.
	 */
	public IntegracionesInformes[] findWhereErrorEquals(String error) throws IntegracionesInformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ERROR = ? ORDER BY ERROR", new Object[] { error } );
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public IntegracionesInformes[] findWhereComentariosEquals(String comentarios) throws IntegracionesInformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/**
	 * Method 'IntegracionesInformesDaoImpl'
	 * 
	 */
	public IntegracionesInformesDaoImpl()
	{
	}
	public IntegracionesInformesDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public IntegracionesInformesDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'IntegracionesInformesDaoImpl'
	 * 
	 * @param userConn
	 */
	public IntegracionesInformesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.integraciones_informes";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected IntegracionesInformes fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			IntegracionesInformes dto = new IntegracionesInformes();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected IntegracionesInformes[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			IntegracionesInformes dto = new IntegracionesInformes();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		IntegracionesInformes ret[] = new IntegracionesInformes[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(IntegracionesInformes dto, ResultSet rs) throws SQLException
	{
		dto.setIdintegraciones( new Integer( rs.getInt(COLUMN_IDINTEGRACIONES) ) );
		dto.setIdintegracion( new Integer( rs.getInt(COLUMN_IDINTEGRACION) ) );
		if (rs.wasNull()) {
			dto.setIdintegracion( null );
		}
		
		dto.setFecharx( rs.getTimestamp(COLUMN_FECHARX ) );
		dto.setFecharegistro( rs.getDate(COLUMN_FECHAREGISTRO ) );
		dto.setIdsistema( new Integer( rs.getInt(COLUMN_IDSISTEMA) ) );
		if (rs.wasNull()) {
			dto.setIdsistema( null );
		}
		
		dto.setModelo( rs.getString( COLUMN_MODELO ) );
		dto.setNserie( rs.getString( COLUMN_NSERIE ) );
		dto.setNombreAps( rs.getString( COLUMN_NOMBRE_APS ) );
		dto.setNhc( rs.getString( COLUMN_NHC ) );
		dto.setNombrefichero( rs.getString( COLUMN_NOMBREFICHERO ) );
		dto.setEstado( new Integer( rs.getInt(COLUMN_ESTADO) ) );
		if (rs.wasNull()) {
			dto.setEstado( null );
		}
		
		dto.setError( rs.getString( COLUMN_ERROR ) );
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(IntegracionesInformes dto)
	{
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the specified arbitrary SQL statement
	 */
	public IntegracionesInformes[] findByDynamicSelect(String sql, Object[] sqlParams) throws IntegracionesInformesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new IntegracionesInformesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the integraciones_informes table that match the specified arbitrary SQL statement
	 */
	public IntegracionesInformes[] findByDynamicWhere(String sql, Object[] sqlParams) throws IntegracionesInformesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new IntegracionesInformesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
