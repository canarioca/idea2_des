/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;

public class ImpIndicacionDaoImpl extends AbstractDAO implements ImpIndicacionDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDINDICACION, RITMOBASAL, CONDUCAV, QRS, ANCHURAQRS, FEYECCION, NYHA, CARDIOPATIA, AEVOLUCION, REVASC, INFPREV, ANIO, LOCALIZACION, INSRENAL, ANTFA, DIABETES, HIPERTENSION, MUERTESUBITA, FUMADOR, HIPERCOLEST, ACV, ARRITMIAS, EEF, ETIOLOGIA, OTRA FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDINDICACION, RITMOBASAL, CONDUCAV, QRS, ANCHURAQRS, FEYECCION, NYHA, CARDIOPATIA, AEVOLUCION, REVASC, INFPREV, ANIO, LOCALIZACION, INSRENAL, ANTFA, DIABETES, HIPERTENSION, MUERTESUBITA, FUMADOR, HIPERCOLEST, ACV, ARRITMIAS, EEF, ETIOLOGIA, OTRA ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDINDICACION = ?, RITMOBASAL = ?, CONDUCAV = ?, QRS = ?, ANCHURAQRS = ?, FEYECCION = ?, NYHA = ?, CARDIOPATIA = ?, AEVOLUCION = ?, REVASC = ?, INFPREV = ?, ANIO = ?, LOCALIZACION = ?, INSRENAL = ?, ANTFA = ?, DIABETES = ?, HIPERTENSION = ?, MUERTESUBITA = ?, FUMADOR = ?, HIPERCOLEST = ?, ACV = ?, ARRITMIAS = ?, EEF = ?, ETIOLOGIA = ?, OTRA = ? WHERE IDINDICACION = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDINDICACION = ?";

	/** 
	 * Index of column IDINDICACION
	 */
	protected static final int COLUMN_IDINDICACION = 1;

	/** 
	 * Index of column RITMOBASAL
	 */
	protected static final int COLUMN_RITMOBASAL = 2;

	/** 
	 * Index of column CONDUCAV
	 */
	protected static final int COLUMN_CONDUCAV = 3;

	/** 
	 * Index of column QRS
	 */
	protected static final int COLUMN_QRS = 4;

	/** 
	 * Index of column ANCHURAQRS
	 */
	protected static final int COLUMN_ANCHURAQRS = 5;

	/** 
	 * Index of column FEYECCION
	 */
	protected static final int COLUMN_FEYECCION = 6;

	/** 
	 * Index of column NYHA
	 */
	protected static final int COLUMN_NYHA = 7;

	/** 
	 * Index of column CARDIOPATIA
	 */
	protected static final int COLUMN_CARDIOPATIA = 8;

	/** 
	 * Index of column AEVOLUCION
	 */
	protected static final int COLUMN_AEVOLUCION = 9;

	/** 
	 * Index of column REVASC
	 */
	protected static final int COLUMN_REVASC = 10;

	/** 
	 * Index of column INFPREV
	 */
	protected static final int COLUMN_INFPREV = 11;

	/** 
	 * Index of column ANIO
	 */
	protected static final int COLUMN_ANIO = 12;

	/** 
	 * Index of column LOCALIZACION
	 */
	protected static final int COLUMN_LOCALIZACION = 13;

	/** 
	 * Index of column INSRENAL
	 */
	protected static final int COLUMN_INSRENAL = 14;

	/** 
	 * Index of column ANTFA
	 */
	protected static final int COLUMN_ANTFA = 15;

	/** 
	 * Index of column DIABETES
	 */
	protected static final int COLUMN_DIABETES = 16;

	/** 
	 * Index of column HIPERTENSION
	 */
	protected static final int COLUMN_HIPERTENSION = 17;

	/** 
	 * Index of column MUERTESUBITA
	 */
	protected static final int COLUMN_MUERTESUBITA = 18;

	/** 
	 * Index of column FUMADOR
	 */
	protected static final int COLUMN_FUMADOR = 19;

	/** 
	 * Index of column HIPERCOLEST
	 */
	protected static final int COLUMN_HIPERCOLEST = 20;

	/** 
	 * Index of column ACV
	 */
	protected static final int COLUMN_ACV = 21;

	/** 
	 * Index of column ARRITMIAS
	 */
	protected static final int COLUMN_ARRITMIAS = 22;

	/** 
	 * Index of column EEF
	 */
	protected static final int COLUMN_EEF = 23;

	/** 
	 * Index of column ETIOLOGIA
	 */
	protected static final int COLUMN_ETIOLOGIA = 24;

	/** 
	 * Index of column OTRA
	 */
	protected static final int COLUMN_OTRA = 25;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 25;

	/** 
	 * Index of primary-key column IDINDICACION
	 */
	protected static final int PK_COLUMN_IDINDICACION = 1;

	/** 
	 * Inserts a new row in the imp_indicacion table.
	 */
	public ImpIndicacionPk insert(ImpIndicacion dto) throws ImpIndicacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdindicacion() != null) {
				stmt.setInt( index++, dto.getIdindicacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getRitmobasal() != null) {
				stmt.setInt( index++, dto.getRitmobasal().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getConducav() != null) {
				stmt.setInt( index++, dto.getConducav().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getQrs() != null) {
				stmt.setInt( index++, dto.getQrs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAnchuraqrs() );
			if (dto.getFeyeccion() != null) {
				stmt.setInt( index++, dto.getFeyeccion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNyha() != null) {
				stmt.setInt( index++, dto.getNyha().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCardiopatia() != null) {
				stmt.setInt( index++, dto.getCardiopatia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAevolucion() );
			if (dto.getRevasc() != null) {
				stmt.setShort( index++, dto.getRevasc().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getInfprev() != null) {
				stmt.setShort( index++, dto.getInfprev().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getAnio() );
			if (dto.getLocalizacion() != null) {
				stmt.setInt( index++, dto.getLocalizacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getInsrenal() != null) {
				stmt.setShort( index++, dto.getInsrenal().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getAntfa() != null) {
				stmt.setShort( index++, dto.getAntfa().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getDiabetes() != null) {
				stmt.setShort( index++, dto.getDiabetes().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getHipertension() != null) {
				stmt.setShort( index++, dto.getHipertension().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getMuertesubita() != null) {
				stmt.setShort( index++, dto.getMuertesubita().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getFumador() != null) {
				stmt.setShort( index++, dto.getFumador().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getHipercolest() != null) {
				stmt.setShort( index++, dto.getHipercolest().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getAcv() != null) {
				stmt.setShort( index++, dto.getAcv().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getArritmias() != null) {
				stmt.setInt( index++, dto.getArritmias().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEef() != null) {
				stmt.setInt( index++, dto.getEef().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEtiologia() != null) {
				stmt.setInt( index++, dto.getEtiologia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getOtra() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdindicacion( new Integer( rs.getInt(1) ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpIndicacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the imp_indicacion table.
	 */
	public void update(ImpIndicacionPk pk, ImpIndicacion dto) throws ImpIndicacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdindicacion() != null) {
				stmt.setInt( index++, dto.getIdindicacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getRitmobasal() != null) {
				stmt.setInt( index++, dto.getRitmobasal().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getConducav() != null) {
				stmt.setInt( index++, dto.getConducav().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getQrs() != null) {
				stmt.setInt( index++, dto.getQrs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAnchuraqrs() );
			if (dto.getFeyeccion() != null) {
				stmt.setInt( index++, dto.getFeyeccion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNyha() != null) {
				stmt.setInt( index++, dto.getNyha().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCardiopatia() != null) {
				stmt.setInt( index++, dto.getCardiopatia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAevolucion() );
			if (dto.getRevasc() != null) {
				stmt.setShort( index++, dto.getRevasc().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getInfprev() != null) {
				stmt.setShort( index++, dto.getInfprev().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getAnio() );
			if (dto.getLocalizacion() != null) {
				stmt.setInt( index++, dto.getLocalizacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getInsrenal() != null) {
				stmt.setShort( index++, dto.getInsrenal().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getAntfa() != null) {
				stmt.setShort( index++, dto.getAntfa().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getDiabetes() != null) {
				stmt.setShort( index++, dto.getDiabetes().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getHipertension() != null) {
				stmt.setShort( index++, dto.getHipertension().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getMuertesubita() != null) {
				stmt.setShort( index++, dto.getMuertesubita().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getFumador() != null) {
				stmt.setShort( index++, dto.getFumador().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getHipercolest() != null) {
				stmt.setShort( index++, dto.getHipercolest().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getAcv() != null) {
				stmt.setShort( index++, dto.getAcv().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getArritmias() != null) {
				stmt.setInt( index++, dto.getArritmias().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEef() != null) {
				stmt.setInt( index++, dto.getEef().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEtiologia() != null) {
				stmt.setInt( index++, dto.getEtiologia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getOtra() );
			if (pk.getIdindicacion() != null) {
				stmt.setInt( 26, pk.getIdindicacion().intValue() );
			} else {
				stmt.setNull(26, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpIndicacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the imp_indicacion table.
	 */
	public void delete(ImpIndicacionPk pk) throws ImpIndicacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdindicacion() != null) {
				stmt.setInt( 1, pk.getIdindicacion().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpIndicacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the imp_indicacion table that matches the specified primary-key value.
	 */
	public ImpIndicacion findByPrimaryKey(ImpIndicacionPk pk) throws ImpIndicacionDaoException
	{
		return findByPrimaryKey( pk.getIdindicacion() );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'IDINDICACION = :idindicacion'.
	 */
	public ImpIndicacion findByPrimaryKey(Integer idindicacion) throws ImpIndicacionDaoException
	{
		ImpIndicacion ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDINDICACION = ?", new Object[] { idindicacion } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria ''.
	 */
	public ImpIndicacion[] findAll() throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDINDICACION", null );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'IDINDICACION = :idindicacion'.
	 */
	public ImpIndicacion[] findWhereIdindicacionEquals(int idindicacion) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDINDICACION = ? ORDER BY IDINDICACION", new Object[] {  new Integer(idindicacion) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'RITMOBASAL = :ritmobasal'.
	 */
	public ImpIndicacion[] findWhereRitmobasalEquals(int ritmobasal) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RITMOBASAL = ? ORDER BY RITMOBASAL", new Object[] {  new Integer(ritmobasal) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'CONDUCAV = :conducav'.
	 */
	public ImpIndicacion[] findWhereConducavEquals(int conducav) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONDUCAV = ? ORDER BY CONDUCAV", new Object[] {  new Integer(conducav) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'QRS = :qrs'.
	 */
	public ImpIndicacion[] findWhereQrsEquals(int qrs) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE QRS = ? ORDER BY QRS", new Object[] {  new Integer(qrs) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'ANCHURAQRS = :anchuraqrs'.
	 */
	public ImpIndicacion[] findWhereAnchuraqrsEquals(String anchuraqrs) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANCHURAQRS = ? ORDER BY ANCHURAQRS", new Object[] { anchuraqrs } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'FEYECCION = :feyeccion'.
	 */
	public ImpIndicacion[] findWhereFeyeccionEquals(int feyeccion) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FEYECCION = ? ORDER BY FEYECCION", new Object[] {  new Integer(feyeccion) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'NYHA = :nyha'.
	 */
	public ImpIndicacion[] findWhereNyhaEquals(int nyha) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NYHA = ? ORDER BY NYHA", new Object[] {  new Integer(nyha) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'CARDIOPATIA = :cardiopatia'.
	 */
	public ImpIndicacion[] findWhereCardiopatiaEquals(int cardiopatia) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CARDIOPATIA = ? ORDER BY CARDIOPATIA", new Object[] {  new Integer(cardiopatia) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'AEVOLUCION = :aevolucion'.
	 */
	public ImpIndicacion[] findWhereAevolucionEquals(String aevolucion) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AEVOLUCION = ? ORDER BY AEVOLUCION", new Object[] { aevolucion } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'REVASC = :revasc'.
	 */
	public ImpIndicacion[] findWhereRevascEquals(short revasc) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REVASC = ? ORDER BY REVASC", new Object[] {  new Short(revasc) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'INFPREV = :infprev'.
	 */
	public ImpIndicacion[] findWhereInfprevEquals(short infprev) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INFPREV = ? ORDER BY INFPREV", new Object[] {  new Short(infprev) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'ANIO = :anio'.
	 */
	public ImpIndicacion[] findWhereAnioEquals(String anio) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANIO = ? ORDER BY ANIO", new Object[] { anio } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'LOCALIZACION = :localizacion'.
	 */
	public ImpIndicacion[] findWhereLocalizacionEquals(int localizacion) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOCALIZACION = ? ORDER BY LOCALIZACION", new Object[] {  new Integer(localizacion) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'INSRENAL = :insrenal'.
	 */
	public ImpIndicacion[] findWhereInsrenalEquals(short insrenal) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INSRENAL = ? ORDER BY INSRENAL", new Object[] {  new Short(insrenal) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'ANTFA = :antfa'.
	 */
	public ImpIndicacion[] findWhereAntfaEquals(short antfa) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANTFA = ? ORDER BY ANTFA", new Object[] {  new Short(antfa) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'DIABETES = :diabetes'.
	 */
	public ImpIndicacion[] findWhereDiabetesEquals(short diabetes) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DIABETES = ? ORDER BY DIABETES", new Object[] {  new Short(diabetes) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'HIPERTENSION = :hipertension'.
	 */
	public ImpIndicacion[] findWhereHipertensionEquals(short hipertension) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HIPERTENSION = ? ORDER BY HIPERTENSION", new Object[] {  new Short(hipertension) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'MUERTESUBITA = :muertesubita'.
	 */
	public ImpIndicacion[] findWhereMuertesubitaEquals(short muertesubita) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MUERTESUBITA = ? ORDER BY MUERTESUBITA", new Object[] {  new Short(muertesubita) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'FUMADOR = :fumador'.
	 */
	public ImpIndicacion[] findWhereFumadorEquals(short fumador) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FUMADOR = ? ORDER BY FUMADOR", new Object[] {  new Short(fumador) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'HIPERCOLEST = :hipercolest'.
	 */
	public ImpIndicacion[] findWhereHipercolestEquals(short hipercolest) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HIPERCOLEST = ? ORDER BY HIPERCOLEST", new Object[] {  new Short(hipercolest) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'ACV = :acv'.
	 */
	public ImpIndicacion[] findWhereAcvEquals(short acv) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACV = ? ORDER BY ACV", new Object[] {  new Short(acv) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'ARRITMIAS = :arritmias'.
	 */
	public ImpIndicacion[] findWhereArritmiasEquals(int arritmias) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ARRITMIAS = ? ORDER BY ARRITMIAS", new Object[] {  new Integer(arritmias) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'EEF = :eef'.
	 */
	public ImpIndicacion[] findWhereEefEquals(int eef) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EEF = ? ORDER BY EEF", new Object[] {  new Integer(eef) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'ETIOLOGIA = :etiologia'.
	 */
	public ImpIndicacion[] findWhereEtiologiaEquals(int etiologia) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ETIOLOGIA = ? ORDER BY ETIOLOGIA", new Object[] {  new Integer(etiologia) } );
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the criteria 'OTRA = :otra'.
	 */
	public ImpIndicacion[] findWhereOtraEquals(String otra) throws ImpIndicacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OTRA = ? ORDER BY OTRA", new Object[] { otra } );
	}

	/**
	 * Method 'ImpIndicacionDaoImpl'
	 * 
	 */
	public ImpIndicacionDaoImpl()
	{
	}

	/**
	 * Method 'ImpIndicacionDaoImpl'
	 * 
	 * @param userConn
	 */
	public ImpIndicacionDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.imp_indicacion";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ImpIndicacion fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ImpIndicacion dto = new ImpIndicacion();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ImpIndicacion[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ImpIndicacion dto = new ImpIndicacion();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ImpIndicacion ret[] = new ImpIndicacion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ImpIndicacion dto, ResultSet rs) throws SQLException
	{
		dto.setIdindicacion( new Integer( rs.getInt(COLUMN_IDINDICACION) ) );
		dto.setRitmobasal( new Integer( rs.getInt(COLUMN_RITMOBASAL) ) );
		if (rs.wasNull()) {
			dto.setRitmobasal( null );
		}
		
		dto.setConducav( new Integer( rs.getInt(COLUMN_CONDUCAV) ) );
		if (rs.wasNull()) {
			dto.setConducav( null );
		}
		
		dto.setQrs( new Integer( rs.getInt(COLUMN_QRS) ) );
		if (rs.wasNull()) {
			dto.setQrs( null );
		}
		
		dto.setAnchuraqrs( rs.getString( COLUMN_ANCHURAQRS ) );
		dto.setFeyeccion( new Integer( rs.getInt(COLUMN_FEYECCION) ) );
		if (rs.wasNull()) {
			dto.setFeyeccion( null );
		}
		
		dto.setNyha( new Integer( rs.getInt(COLUMN_NYHA) ) );
		if (rs.wasNull()) {
			dto.setNyha( null );
		}
		
		dto.setCardiopatia( new Integer( rs.getInt(COLUMN_CARDIOPATIA) ) );
		if (rs.wasNull()) {
			dto.setCardiopatia( null );
		}
		
		dto.setAevolucion( rs.getString( COLUMN_AEVOLUCION ) );
		dto.setRevasc( new Short( rs.getShort(COLUMN_REVASC) ) );
		if (rs.wasNull()) {
			dto.setRevasc( null );
		}
		
		dto.setInfprev( new Short( rs.getShort(COLUMN_INFPREV) ) );
		if (rs.wasNull()) {
			dto.setInfprev( null );
		}
		
		dto.setAnio( rs.getString( COLUMN_ANIO ) );
		dto.setLocalizacion( new Integer( rs.getInt(COLUMN_LOCALIZACION) ) );
		if (rs.wasNull()) {
			dto.setLocalizacion( null );
		}
		
		dto.setInsrenal( new Short( rs.getShort(COLUMN_INSRENAL) ) );
		if (rs.wasNull()) {
			dto.setInsrenal( null );
		}
		
		dto.setAntfa( new Short( rs.getShort(COLUMN_ANTFA) ) );
		if (rs.wasNull()) {
			dto.setAntfa( null );
		}
		
		dto.setDiabetes( new Short( rs.getShort(COLUMN_DIABETES) ) );
		if (rs.wasNull()) {
			dto.setDiabetes( null );
		}
		
		dto.setHipertension( new Short( rs.getShort(COLUMN_HIPERTENSION) ) );
		if (rs.wasNull()) {
			dto.setHipertension( null );
		}
		
		dto.setMuertesubita( new Short( rs.getShort(COLUMN_MUERTESUBITA) ) );
		if (rs.wasNull()) {
			dto.setMuertesubita( null );
		}
		
		dto.setFumador( new Short( rs.getShort(COLUMN_FUMADOR) ) );
		if (rs.wasNull()) {
			dto.setFumador( null );
		}
		
		dto.setHipercolest( new Short( rs.getShort(COLUMN_HIPERCOLEST) ) );
		if (rs.wasNull()) {
			dto.setHipercolest( null );
		}
		
		dto.setAcv( new Short( rs.getShort(COLUMN_ACV) ) );
		if (rs.wasNull()) {
			dto.setAcv( null );
		}
		
		dto.setArritmias( new Integer( rs.getInt(COLUMN_ARRITMIAS) ) );
		if (rs.wasNull()) {
			dto.setArritmias( null );
		}
		
		dto.setEef( new Integer( rs.getInt(COLUMN_EEF) ) );
		if (rs.wasNull()) {
			dto.setEef( null );
		}
		
		dto.setEtiologia( new Integer( rs.getInt(COLUMN_ETIOLOGIA) ) );
		if (rs.wasNull()) {
			dto.setEtiologia( null );
		}
		
		dto.setOtra( rs.getString( COLUMN_OTRA ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ImpIndicacion dto)
	{
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the specified arbitrary SQL statement
	 */
	public ImpIndicacion[] findByDynamicSelect(String sql, Object[] sqlParams) throws ImpIndicacionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpIndicacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the imp_indicacion table that match the specified arbitrary SQL statement
	 */
	public ImpIndicacion[] findByDynamicWhere(String sql, Object[] sqlParams) throws ImpIndicacionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpIndicacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
