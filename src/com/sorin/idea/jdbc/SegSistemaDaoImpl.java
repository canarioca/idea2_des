/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SegSistemaDaoImpl extends AbstractDAO implements SegSistemaDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDSISTEMA, VOLTAJE, IMPEDANCIA, FMAGNETICA, ESTVIDAREST, ULTCHQENERGIA, ULTCHQTCARGA, ULTCHQIMPEDANCIA, ULTCHQFECHA, ERI, EOL, COMENTARIOS, TIEMPOERI FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDSISTEMA, VOLTAJE, IMPEDANCIA, FMAGNETICA, ESTVIDAREST, ULTCHQENERGIA, ULTCHQTCARGA, ULTCHQIMPEDANCIA, ULTCHQFECHA, ERI, EOL, COMENTARIOS, TIEMPOERI ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDSISTEMA = ?, VOLTAJE = ?, IMPEDANCIA = ?, FMAGNETICA = ?, ESTVIDAREST = ?, ULTCHQENERGIA = ?, ULTCHQTCARGA = ?, ULTCHQIMPEDANCIA = ?, ULTCHQFECHA = ?, ERI = ?, EOL = ?, COMENTARIOS = ?, TIEMPOERI = ? WHERE IDSISTEMA = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDSISTEMA = ?";

	/** 
	 * Index of column IDSISTEMA
	 */
	protected static final int COLUMN_IDSISTEMA = 1;

	/** 
	 * Index of column VOLTAJE
	 */
	protected static final int COLUMN_VOLTAJE = 2;

	/** 
	 * Index of column IMPEDANCIA
	 */
	protected static final int COLUMN_IMPEDANCIA = 3;

	/** 
	 * Index of column FMAGNETICA
	 */
	protected static final int COLUMN_FMAGNETICA = 4;

	/** 
	 * Index of column ESTVIDAREST
	 */
	protected static final int COLUMN_ESTVIDAREST = 5;

	/** 
	 * Index of column ULTCHQENERGIA
	 */
	protected static final int COLUMN_ULTCHQENERGIA = 6;

	/** 
	 * Index of column ULTCHQTCARGA
	 */
	protected static final int COLUMN_ULTCHQTCARGA = 7;

	/** 
	 * Index of column ULTCHQIMPEDANCIA
	 */
	protected static final int COLUMN_ULTCHQIMPEDANCIA = 8;

	/** 
	 * Index of column ULTCHQFECHA
	 */
	protected static final int COLUMN_ULTCHQFECHA = 9;

	/** 
	 * Index of column ERI
	 */
	protected static final int COLUMN_ERI = 10;

	/** 
	 * Index of column EOL
	 */
	protected static final int COLUMN_EOL = 11;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 12;

	/** 
	 * Index of column TIEMPOERI
	 */
	protected static final int COLUMN_TIEMPOERI = 13;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column IDSISTEMA
	 */
	protected static final int PK_COLUMN_IDSISTEMA = 1;

	/** 
	 * Inserts a new row in the seg_sistema table.
	 */
	public SegSistemaPk insert(SegSistema dto) throws SegSistemaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdsistema() != null) {
				stmt.setInt( index++, dto.getIdsistema().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getVoltaje() );
			stmt.setString( index++, dto.getImpedancia() );
			stmt.setString( index++, dto.getFmagnetica() );
			stmt.setString( index++, dto.getEstvidarest() );
			stmt.setString( index++, dto.getUltchqenergia() );
			stmt.setString( index++, dto.getUltchqtcarga() );
			stmt.setString( index++, dto.getUltchqimpedancia() );
			stmt.setDate(index++, dto.getUltchqfecha()==null ? null : new java.sql.Date( dto.getUltchqfecha().getTime() ) );
			if (dto.getEri() != null) {
				stmt.setShort( index++, dto.getEri().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getEol() != null) {
				stmt.setShort( index++, dto.getEol().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getComentarios() );
			stmt.setString( index++, dto.getTiempoeri() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdsistema( new Integer( rs.getInt(1) ) );
			}
		
			reset(dto);
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSistemaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the seg_sistema table.
	 */
	public void update(SegSistemaPk pk, SegSistema dto) throws SegSistemaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdsistema() != null) {
				stmt.setInt( index++, dto.getIdsistema().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getVoltaje() );
			stmt.setString( index++, dto.getImpedancia() );
			stmt.setString( index++, dto.getFmagnetica() );
			stmt.setString( index++, dto.getEstvidarest() );
			stmt.setString( index++, dto.getUltchqenergia() );
			stmt.setString( index++, dto.getUltchqtcarga() );
			stmt.setString( index++, dto.getUltchqimpedancia() );
			stmt.setDate(index++, dto.getUltchqfecha()==null ? null : new java.sql.Date( dto.getUltchqfecha().getTime() ) );
			if (dto.getEri() != null) {
				stmt.setShort( index++, dto.getEri().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getEol() != null) {
				stmt.setShort( index++, dto.getEol().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getComentarios() );
			stmt.setString( index++, dto.getTiempoeri() );
			if (pk.getIdsistema() != null) {
				stmt.setInt( 14, pk.getIdsistema().intValue() );
			} else {
				stmt.setNull(14, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSistemaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the seg_sistema table.
	 */
	public void delete(SegSistemaPk pk) throws SegSistemaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdsistema() != null) {
				stmt.setInt( 1, pk.getIdsistema().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSistemaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the seg_sistema table that matches the specified primary-key value.
	 */
	public SegSistema findByPrimaryKey(SegSistemaPk pk) throws SegSistemaDaoException
	{
		return findByPrimaryKey( pk.getIdsistema() );
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'IDSISTEMA = :idsistema'.
	 */
	public SegSistema findByPrimaryKey(Integer idsistema) throws SegSistemaDaoException
	{
		SegSistema ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDSISTEMA = ?", new Object[] { idsistema } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria ''.
	 */
	public SegSistema[] findAll() throws SegSistemaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDSISTEMA", null );
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'IDSISTEMA = :idsistema'.
	 */
	public SegSistema[] findWhereIdsistemaEquals(int idsistema) throws SegSistemaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDSISTEMA = ? ORDER BY IDSISTEMA", new Object[] {  new Integer(idsistema) } );
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'VOLTAJE = :voltaje'.
	 */
	public SegSistema[] findWhereVoltajeEquals(String voltaje) throws SegSistemaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VOLTAJE = ? ORDER BY VOLTAJE", new Object[] { voltaje } );
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'IMPEDANCIA = :impedancia'.
	 */
	public SegSistema[] findWhereImpedanciaEquals(String impedancia) throws SegSistemaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPEDANCIA = ? ORDER BY IMPEDANCIA", new Object[] { impedancia } );
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'FMAGNETICA = :fmagnetica'.
	 */
	public SegSistema[] findWhereFmagneticaEquals(String fmagnetica) throws SegSistemaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FMAGNETICA = ? ORDER BY FMAGNETICA", new Object[] { fmagnetica } );
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'ESTVIDAREST = :estvidarest'.
	 */
	public SegSistema[] findWhereEstvidarestEquals(String estvidarest) throws SegSistemaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTVIDAREST = ? ORDER BY ESTVIDAREST", new Object[] { estvidarest } );
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'ULTCHQENERGIA = :ultchqenergia'.
	 */
	public SegSistema[] findWhereUltchqenergiaEquals(String ultchqenergia) throws SegSistemaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ULTCHQENERGIA = ? ORDER BY ULTCHQENERGIA", new Object[] { ultchqenergia } );
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'ULTCHQTCARGA = :ultchqtcarga'.
	 */
	public SegSistema[] findWhereUltchqtcargaEquals(String ultchqtcarga) throws SegSistemaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ULTCHQTCARGA = ? ORDER BY ULTCHQTCARGA", new Object[] { ultchqtcarga } );
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'ULTCHQIMPEDANCIA = :ultchqimpedancia'.
	 */
	public SegSistema[] findWhereUltchqimpedanciaEquals(String ultchqimpedancia) throws SegSistemaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ULTCHQIMPEDANCIA = ? ORDER BY ULTCHQIMPEDANCIA", new Object[] { ultchqimpedancia } );
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'ULTCHQFECHA = :ultchqfecha'.
	 */
	public SegSistema[] findWhereUltchqfechaEquals(Date ultchqfecha) throws SegSistemaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ULTCHQFECHA = ? ORDER BY ULTCHQFECHA", new Object[] { ultchqfecha==null ? null : new java.sql.Date( ultchqfecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'ERI = :eri'.
	 */
	public SegSistema[] findWhereEriEquals(short eri) throws SegSistemaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ERI = ? ORDER BY ERI", new Object[] {  new Short(eri) } );
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'EOL = :eol'.
	 */
	public SegSistema[] findWhereEolEquals(short eol) throws SegSistemaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EOL = ? ORDER BY EOL", new Object[] {  new Short(eol) } );
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public SegSistema[] findWhereComentariosEquals(String comentarios) throws SegSistemaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the criteria 'TIEMPOERI = :tiempoeri'.
	 */
	public SegSistema[] findWhereTiempoeriEquals(String tiempoeri) throws SegSistemaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIEMPOERI = ? ORDER BY TIEMPOERI", new Object[] { tiempoeri } );
	}

	/**
	 * Method 'SegSistemaDaoImpl'
	 * 
	 */
	public SegSistemaDaoImpl()
	{
	}
	
	public SegSistemaDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public SegSistemaDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'SegSistemaDaoImpl'
	 * 
	 * @param userConn
	 */
	public SegSistemaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.seg_sistema";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SegSistema fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SegSistema dto = new SegSistema();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SegSistema[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SegSistema dto = new SegSistema();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SegSistema ret[] = new SegSistema[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SegSistema dto, ResultSet rs) throws SQLException
	{
		dto.setIdsistema( new Integer( rs.getInt(COLUMN_IDSISTEMA) ) );
		dto.setVoltaje( rs.getString( COLUMN_VOLTAJE ) );
		dto.setImpedancia( rs.getString( COLUMN_IMPEDANCIA ) );
		dto.setFmagnetica( rs.getString( COLUMN_FMAGNETICA ) );
		dto.setEstvidarest( rs.getString( COLUMN_ESTVIDAREST ) );
		dto.setUltchqenergia( rs.getString( COLUMN_ULTCHQENERGIA ) );
		dto.setUltchqtcarga( rs.getString( COLUMN_ULTCHQTCARGA ) );
		dto.setUltchqimpedancia( rs.getString( COLUMN_ULTCHQIMPEDANCIA ) );
		dto.setUltchqfecha( rs.getDate(COLUMN_ULTCHQFECHA ) );
		dto.setEri( new Short( rs.getShort(COLUMN_ERI) ) );
		if (rs.wasNull()) {
			dto.setEri( null );
		}
		
		dto.setEol( new Short( rs.getShort(COLUMN_EOL) ) );
		if (rs.wasNull()) {
			dto.setEol( null );
		}
		
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setTiempoeri( rs.getString( COLUMN_TIEMPOERI ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SegSistema dto)
	{
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the specified arbitrary SQL statement
	 */
	public SegSistema[] findByDynamicSelect(String sql, Object[] sqlParams) throws SegSistemaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSistemaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the seg_sistema table that match the specified arbitrary SQL statement
	 */
	public SegSistema[] findByDynamicWhere(String sql, Object[] sqlParams) throws SegSistemaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSistemaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
