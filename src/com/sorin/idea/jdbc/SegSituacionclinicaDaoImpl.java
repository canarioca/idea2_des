/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;

public class SegSituacionclinicaDaoImpl extends AbstractDAO implements SegSituacionclinicaDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDSITCLIN, RITMO, CONDUCAV, QRS, ANCHURAQRS, FEVI, FUNCIONVENTRICULAR, NYHA, CARDIOPATIA, OTRA, AEVOLUCION, REVASC, INFPREVIO, ANIO, LOCALIZACION, HTA, DISLIPEMIA, DIABETES, TABAQUISMO, INGALCOHOLICA, ACV, AIT, EPOC, SAHS, TIPOSAHS, AHI, CPAP, INSRENAL, TIPOINSRENAL, NEOPLASIA, TIPONEOPLASIA, AFECTIROIDEA, COMENTARIOS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDSITCLIN, RITMO, CONDUCAV, QRS, ANCHURAQRS, FEVI, FUNCIONVENTRICULAR, NYHA, CARDIOPATIA, OTRA, AEVOLUCION, REVASC, INFPREVIO, ANIO, LOCALIZACION, HTA, DISLIPEMIA, DIABETES, TABAQUISMO, INGALCOHOLICA, ACV, AIT, EPOC, SAHS, TIPOSAHS, AHI, CPAP, INSRENAL, TIPOINSRENAL, NEOPLASIA, TIPONEOPLASIA, AFECTIROIDEA, COMENTARIOS ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDSITCLIN = ?, RITMO = ?, CONDUCAV = ?, QRS = ?, ANCHURAQRS = ?, FEVI = ?, FUNCIONVENTRICULAR = ?, NYHA = ?, CARDIOPATIA = ?, OTRA = ?, AEVOLUCION = ?, REVASC = ?, INFPREVIO = ?, ANIO = ?, LOCALIZACION = ?, HTA = ?, DISLIPEMIA = ?, DIABETES = ?, TABAQUISMO = ?, INGALCOHOLICA = ?, ACV = ?, AIT = ?, EPOC = ?, SAHS = ?, TIPOSAHS = ?, AHI = ?, CPAP = ?, INSRENAL = ?, TIPOINSRENAL = ?, NEOPLASIA = ?, TIPONEOPLASIA = ?, AFECTIROIDEA = ?, COMENTARIOS = ? WHERE IDSITCLIN = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDSITCLIN = ?";

	/** 
	 * Index of column IDSITCLIN
	 */
	protected static final int COLUMN_IDSITCLIN = 1;

	/** 
	 * Index of column RITMO
	 */
	protected static final int COLUMN_RITMO = 2;

	/** 
	 * Index of column CONDUCAV
	 */
	protected static final int COLUMN_CONDUCAV = 3;

	/** 
	 * Index of column QRS
	 */
	protected static final int COLUMN_QRS = 4;

	/** 
	 * Index of column ANCHURAQRS
	 */
	protected static final int COLUMN_ANCHURAQRS = 5;

	/** 
	 * Index of column FEVI
	 */
	protected static final int COLUMN_FEVI = 6;

	/** 
	 * Index of column FUNCIONVENTRICULAR
	 */
	protected static final int COLUMN_FUNCIONVENTRICULAR = 7;

	/** 
	 * Index of column NYHA
	 */
	protected static final int COLUMN_NYHA = 8;

	/** 
	 * Index of column CARDIOPATIA
	 */
	protected static final int COLUMN_CARDIOPATIA = 9;

	/** 
	 * Index of column OTRA
	 */
	protected static final int COLUMN_OTRA = 10;

	/** 
	 * Index of column AEVOLUCION
	 */
	protected static final int COLUMN_AEVOLUCION = 11;

	/** 
	 * Index of column REVASC
	 */
	protected static final int COLUMN_REVASC = 12;

	/** 
	 * Index of column INFPREVIO
	 */
	protected static final int COLUMN_INFPREVIO = 13;

	/** 
	 * Index of column ANIO
	 */
	protected static final int COLUMN_ANIO = 14;

	/** 
	 * Index of column LOCALIZACION
	 */
	protected static final int COLUMN_LOCALIZACION = 15;

	/** 
	 * Index of column HTA
	 */
	protected static final int COLUMN_HTA = 16;

	/** 
	 * Index of column DISLIPEMIA
	 */
	protected static final int COLUMN_DISLIPEMIA = 17;

	/** 
	 * Index of column DIABETES
	 */
	protected static final int COLUMN_DIABETES = 18;

	/** 
	 * Index of column TABAQUISMO
	 */
	protected static final int COLUMN_TABAQUISMO = 19;

	/** 
	 * Index of column INGALCOHOLICA
	 */
	protected static final int COLUMN_INGALCOHOLICA = 20;

	/** 
	 * Index of column ACV
	 */
	protected static final int COLUMN_ACV = 21;

	/** 
	 * Index of column AIT
	 */
	protected static final int COLUMN_AIT = 22;

	/** 
	 * Index of column EPOC
	 */
	protected static final int COLUMN_EPOC = 23;

	/** 
	 * Index of column SAHS
	 */
	protected static final int COLUMN_SAHS = 24;

	/** 
	 * Index of column TIPOSAHS
	 */
	protected static final int COLUMN_TIPOSAHS = 25;

	/** 
	 * Index of column AHI
	 */
	protected static final int COLUMN_AHI = 26;

	/** 
	 * Index of column CPAP
	 */
	protected static final int COLUMN_CPAP = 27;

	/** 
	 * Index of column INSRENAL
	 */
	protected static final int COLUMN_INSRENAL = 28;

	/** 
	 * Index of column TIPOINSRENAL
	 */
	protected static final int COLUMN_TIPOINSRENAL = 29;

	/** 
	 * Index of column NEOPLASIA
	 */
	protected static final int COLUMN_NEOPLASIA = 30;

	/** 
	 * Index of column TIPONEOPLASIA
	 */
	protected static final int COLUMN_TIPONEOPLASIA = 31;

	/** 
	 * Index of column AFECTIROIDEA
	 */
	protected static final int COLUMN_AFECTIROIDEA = 32;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 33;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 33;

	/** 
	 * Index of primary-key column IDSITCLIN
	 */
	protected static final int PK_COLUMN_IDSITCLIN = 1;

	/** 
	 * Inserts a new row in the seg_situacionclinica table.
	 */
	public SegSituacionclinicaPk insert(SegSituacionclinica dto) throws SegSituacionclinicaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdsitclin() != null) {
				stmt.setInt( index++, dto.getIdsitclin().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getRitmo() != null) {
				stmt.setInt( index++, dto.getRitmo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getConducav() != null) {
				stmt.setInt( index++, dto.getConducav().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getQrs() != null) {
				stmt.setInt( index++, dto.getQrs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAnchuraqrs() );
			stmt.setString( index++, dto.getFevi() );
			if (dto.getFuncionventricular() != null) {
				stmt.setInt( index++, dto.getFuncionventricular().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNyha() != null) {
				stmt.setInt( index++, dto.getNyha().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCardiopatia() != null) {
				stmt.setInt( index++, dto.getCardiopatia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getOtra() );
			stmt.setString( index++, dto.getAevolucion() );
			if (dto.getRevasc() != null) {
				stmt.setShort( index++, dto.getRevasc().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getInfprevio() != null) {
				stmt.setShort( index++, dto.getInfprevio().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getAnio() );
			if (dto.getLocalizacion() != null) {
				stmt.setInt( index++, dto.getLocalizacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHta() != null) {
				stmt.setShort( index++, dto.getHta().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getDislipemia() != null) {
				stmt.setShort( index++, dto.getDislipemia().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getDiabetes() != null) {
				stmt.setShort( index++, dto.getDiabetes().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTabaquismo() != null) {
				stmt.setShort( index++, dto.getTabaquismo().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getIngalcoholica() != null) {
				stmt.setShort( index++, dto.getIngalcoholica().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getAcv() != null) {
				stmt.setShort( index++, dto.getAcv().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getAit() != null) {
				stmt.setShort( index++, dto.getAit().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getEpoc() != null) {
				stmt.setShort( index++, dto.getEpoc().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getSahs() != null) {
				stmt.setShort( index++, dto.getSahs().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTiposahs() != null) {
				stmt.setInt( index++, dto.getTiposahs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAhi() );
			if (dto.getCpap() != null) {
				stmt.setShort( index++, dto.getCpap().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getInsrenal() != null) {
				stmt.setShort( index++, dto.getInsrenal().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTipoinsrenal() != null) {
				stmt.setInt( index++, dto.getTipoinsrenal().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNeoplasia() != null) {
				stmt.setShort( index++, dto.getNeoplasia().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getTiponeoplasia() );
			if (dto.getAfectiroidea() != null) {
				stmt.setInt( index++, dto.getAfectiroidea().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getComentarios() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdsitclin( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSituacionclinicaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the seg_situacionclinica table.
	 */
	public void update(SegSituacionclinicaPk pk, SegSituacionclinica dto) throws SegSituacionclinicaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdsitclin() != null) {
				stmt.setInt( index++, dto.getIdsitclin().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getRitmo() != null) {
				stmt.setInt( index++, dto.getRitmo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getConducav() != null) {
				stmt.setInt( index++, dto.getConducav().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getQrs() != null) {
				stmt.setInt( index++, dto.getQrs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAnchuraqrs() );
			stmt.setString( index++, dto.getFevi() );
			if (dto.getFuncionventricular() != null) {
				stmt.setInt( index++, dto.getFuncionventricular().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNyha() != null) {
				stmt.setInt( index++, dto.getNyha().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCardiopatia() != null) {
				stmt.setInt( index++, dto.getCardiopatia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getOtra() );
			stmt.setString( index++, dto.getAevolucion() );
			if (dto.getRevasc() != null) {
				stmt.setShort( index++, dto.getRevasc().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getInfprevio() != null) {
				stmt.setShort( index++, dto.getInfprevio().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getAnio() );
			if (dto.getLocalizacion() != null) {
				stmt.setInt( index++, dto.getLocalizacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHta() != null) {
				stmt.setShort( index++, dto.getHta().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getDislipemia() != null) {
				stmt.setShort( index++, dto.getDislipemia().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getDiabetes() != null) {
				stmt.setShort( index++, dto.getDiabetes().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTabaquismo() != null) {
				stmt.setShort( index++, dto.getTabaquismo().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getIngalcoholica() != null) {
				stmt.setShort( index++, dto.getIngalcoholica().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getAcv() != null) {
				stmt.setShort( index++, dto.getAcv().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getAit() != null) {
				stmt.setShort( index++, dto.getAit().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getEpoc() != null) {
				stmt.setShort( index++, dto.getEpoc().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getSahs() != null) {
				stmt.setShort( index++, dto.getSahs().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTiposahs() != null) {
				stmt.setInt( index++, dto.getTiposahs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getAhi() );
			if (dto.getCpap() != null) {
				stmt.setShort( index++, dto.getCpap().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getInsrenal() != null) {
				stmt.setShort( index++, dto.getInsrenal().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getTipoinsrenal() != null) {
				stmt.setInt( index++, dto.getTipoinsrenal().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getNeoplasia() != null) {
				stmt.setShort( index++, dto.getNeoplasia().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getTiponeoplasia() );
			if (dto.getAfectiroidea() != null) {
				stmt.setInt( index++, dto.getAfectiroidea().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getComentarios() );
			if (pk.getIdsitclin() != null) {
				stmt.setInt( 34, pk.getIdsitclin().intValue() );
			} else {
				stmt.setNull(34, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSituacionclinicaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the seg_situacionclinica table.
	 */
	public void delete(SegSituacionclinicaPk pk) throws SegSituacionclinicaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdsitclin() != null) {
				stmt.setInt( 1, pk.getIdsitclin().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSituacionclinicaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the seg_situacionclinica table that matches the specified primary-key value.
	 */
	public SegSituacionclinica findByPrimaryKey(SegSituacionclinicaPk pk) throws SegSituacionclinicaDaoException
	{
		return findByPrimaryKey( pk.getIdsitclin() );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'IDSITCLIN = :idsitclin'.
	 */
	public SegSituacionclinica findByPrimaryKey(Integer idsitclin) throws SegSituacionclinicaDaoException
	{
		SegSituacionclinica ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDSITCLIN = ?", new Object[] { idsitclin } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria ''.
	 */
	public SegSituacionclinica[] findAll() throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDSITCLIN", null );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'IDSITCLIN = :idsitclin'.
	 */
	public SegSituacionclinica[] findWhereIdsitclinEquals(int idsitclin) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDSITCLIN = ? ORDER BY IDSITCLIN", new Object[] {  new Integer(idsitclin) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'RITMO = :ritmo'.
	 */
	public SegSituacionclinica[] findWhereRitmoEquals(int ritmo) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RITMO = ? ORDER BY RITMO", new Object[] {  new Integer(ritmo) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'CONDUCAV = :conducav'.
	 */
	public SegSituacionclinica[] findWhereConducavEquals(int conducav) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONDUCAV = ? ORDER BY CONDUCAV", new Object[] {  new Integer(conducav) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'QRS = :qrs'.
	 */
	public SegSituacionclinica[] findWhereQrsEquals(int qrs) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE QRS = ? ORDER BY QRS", new Object[] {  new Integer(qrs) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'ANCHURAQRS = :anchuraqrs'.
	 */
	public SegSituacionclinica[] findWhereAnchuraqrsEquals(String anchuraqrs) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANCHURAQRS = ? ORDER BY ANCHURAQRS", new Object[] { anchuraqrs } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'FEVI = :fevi'.
	 */
	public SegSituacionclinica[] findWhereFeviEquals(String fevi) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FEVI = ? ORDER BY FEVI", new Object[] { fevi } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'FUNCIONVENTRICULAR = :funcionventricular'.
	 */
	public SegSituacionclinica[] findWhereFuncionventricularEquals(int funcionventricular) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FUNCIONVENTRICULAR = ? ORDER BY FUNCIONVENTRICULAR", new Object[] {  new Integer(funcionventricular) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'NYHA = :nyha'.
	 */
	public SegSituacionclinica[] findWhereNyhaEquals(int nyha) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NYHA = ? ORDER BY NYHA", new Object[] {  new Integer(nyha) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'CARDIOPATIA = :cardiopatia'.
	 */
	public SegSituacionclinica[] findWhereCardiopatiaEquals(int cardiopatia) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CARDIOPATIA = ? ORDER BY CARDIOPATIA", new Object[] {  new Integer(cardiopatia) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'OTRA = :otra'.
	 */
	public SegSituacionclinica[] findWhereOtraEquals(String otra) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OTRA = ? ORDER BY OTRA", new Object[] { otra } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'AEVOLUCION = :aevolucion'.
	 */
	public SegSituacionclinica[] findWhereAevolucionEquals(String aevolucion) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AEVOLUCION = ? ORDER BY AEVOLUCION", new Object[] { aevolucion } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'REVASC = :revasc'.
	 */
	public SegSituacionclinica[] findWhereRevascEquals(short revasc) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REVASC = ? ORDER BY REVASC", new Object[] {  new Short(revasc) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'INFPREVIO = :infprevio'.
	 */
	public SegSituacionclinica[] findWhereInfprevioEquals(short infprevio) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INFPREVIO = ? ORDER BY INFPREVIO", new Object[] {  new Short(infprevio) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'ANIO = :anio'.
	 */
	public SegSituacionclinica[] findWhereAnioEquals(String anio) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANIO = ? ORDER BY ANIO", new Object[] { anio } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'LOCALIZACION = :localizacion'.
	 */
	public SegSituacionclinica[] findWhereLocalizacionEquals(int localizacion) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOCALIZACION = ? ORDER BY LOCALIZACION", new Object[] {  new Integer(localizacion) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'HTA = :hta'.
	 */
	public SegSituacionclinica[] findWhereHtaEquals(short hta) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HTA = ? ORDER BY HTA", new Object[] {  new Short(hta) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'DISLIPEMIA = :dislipemia'.
	 */
	public SegSituacionclinica[] findWhereDislipemiaEquals(short dislipemia) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DISLIPEMIA = ? ORDER BY DISLIPEMIA", new Object[] {  new Short(dislipemia) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'DIABETES = :diabetes'.
	 */
	public SegSituacionclinica[] findWhereDiabetesEquals(short diabetes) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DIABETES = ? ORDER BY DIABETES", new Object[] {  new Short(diabetes) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'TABAQUISMO = :tabaquismo'.
	 */
	public SegSituacionclinica[] findWhereTabaquismoEquals(short tabaquismo) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TABAQUISMO = ? ORDER BY TABAQUISMO", new Object[] {  new Short(tabaquismo) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'INGALCOHOLICA = :ingalcoholica'.
	 */
	public SegSituacionclinica[] findWhereIngalcoholicaEquals(short ingalcoholica) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INGALCOHOLICA = ? ORDER BY INGALCOHOLICA", new Object[] {  new Short(ingalcoholica) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'ACV = :acv'.
	 */
	public SegSituacionclinica[] findWhereAcvEquals(short acv) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACV = ? ORDER BY ACV", new Object[] {  new Short(acv) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'AIT = :ait'.
	 */
	public SegSituacionclinica[] findWhereAitEquals(short ait) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AIT = ? ORDER BY AIT", new Object[] {  new Short(ait) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'EPOC = :epoc'.
	 */
	public SegSituacionclinica[] findWhereEpocEquals(short epoc) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EPOC = ? ORDER BY EPOC", new Object[] {  new Short(epoc) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'SAHS = :sahs'.
	 */
	public SegSituacionclinica[] findWhereSahsEquals(short sahs) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SAHS = ? ORDER BY SAHS", new Object[] {  new Short(sahs) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'TIPOSAHS = :tiposahs'.
	 */
	public SegSituacionclinica[] findWhereTiposahsEquals(int tiposahs) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPOSAHS = ? ORDER BY TIPOSAHS", new Object[] {  new Integer(tiposahs) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'AHI = :ahi'.
	 */
	public SegSituacionclinica[] findWhereAhiEquals(String ahi) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AHI = ? ORDER BY AHI", new Object[] { ahi } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'CPAP = :cpap'.
	 */
	public SegSituacionclinica[] findWhereCpapEquals(short cpap) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CPAP = ? ORDER BY CPAP", new Object[] {  new Short(cpap) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'INSRENAL = :insrenal'.
	 */
	public SegSituacionclinica[] findWhereInsrenalEquals(short insrenal) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INSRENAL = ? ORDER BY INSRENAL", new Object[] {  new Short(insrenal) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'TIPOINSRENAL = :tipoinsrenal'.
	 */
	public SegSituacionclinica[] findWhereTipoinsrenalEquals(int tipoinsrenal) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPOINSRENAL = ? ORDER BY TIPOINSRENAL", new Object[] {  new Integer(tipoinsrenal) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'NEOPLASIA = :neoplasia'.
	 */
	public SegSituacionclinica[] findWhereNeoplasiaEquals(short neoplasia) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NEOPLASIA = ? ORDER BY NEOPLASIA", new Object[] {  new Short(neoplasia) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'TIPONEOPLASIA = :tiponeoplasia'.
	 */
	public SegSituacionclinica[] findWhereTiponeoplasiaEquals(String tiponeoplasia) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPONEOPLASIA = ? ORDER BY TIPONEOPLASIA", new Object[] { tiponeoplasia } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'AFECTIROIDEA = :afectiroidea'.
	 */
	public SegSituacionclinica[] findWhereAfectiroideaEquals(int afectiroidea) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AFECTIROIDEA = ? ORDER BY AFECTIROIDEA", new Object[] {  new Integer(afectiroidea) } );
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public SegSituacionclinica[] findWhereComentariosEquals(String comentarios) throws SegSituacionclinicaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/**
	 * Method 'SegSituacionclinicaDaoImpl'
	 * 
	 */
	public SegSituacionclinicaDaoImpl()
	{
	}
	/**
	 * Method 'SegSituacionclinicaDaoImpl'
	 * 
	 */
	public SegSituacionclinicaDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public SegSituacionclinicaDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'SegSituacionclinicaDaoImpl'
	 * 
	 * @param userConn
	 */
	public SegSituacionclinicaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.seg_situacionclinica";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SegSituacionclinica fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SegSituacionclinica dto = new SegSituacionclinica();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SegSituacionclinica[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SegSituacionclinica dto = new SegSituacionclinica();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SegSituacionclinica ret[] = new SegSituacionclinica[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SegSituacionclinica dto, ResultSet rs) throws SQLException
	{
		dto.setIdsitclin( new Integer( rs.getInt(COLUMN_IDSITCLIN) ) );
		dto.setRitmo( new Integer( rs.getInt(COLUMN_RITMO) ) );
		if (rs.wasNull()) {
			dto.setRitmo( null );
		}
		
		dto.setConducav( new Integer( rs.getInt(COLUMN_CONDUCAV) ) );
		if (rs.wasNull()) {
			dto.setConducav( null );
		}
		
		dto.setQrs( new Integer( rs.getInt(COLUMN_QRS) ) );
		if (rs.wasNull()) {
			dto.setQrs( null );
		}
		
		dto.setAnchuraqrs( rs.getString( COLUMN_ANCHURAQRS ) );
		dto.setFevi( rs.getString( COLUMN_FEVI ) );
		dto.setFuncionventricular( new Integer( rs.getInt(COLUMN_FUNCIONVENTRICULAR) ) );
		if (rs.wasNull()) {
			dto.setFuncionventricular( null );
		}
		
		dto.setNyha( new Integer( rs.getInt(COLUMN_NYHA) ) );
		if (rs.wasNull()) {
			dto.setNyha( null );
		}
		
		dto.setCardiopatia( new Integer( rs.getInt(COLUMN_CARDIOPATIA) ) );
		if (rs.wasNull()) {
			dto.setCardiopatia( null );
		}
		
		dto.setOtra( rs.getString( COLUMN_OTRA ) );
		dto.setAevolucion( rs.getString( COLUMN_AEVOLUCION ) );
		dto.setRevasc( new Short( rs.getShort(COLUMN_REVASC) ) );
		if (rs.wasNull()) {
			dto.setRevasc( null );
		}
		
		dto.setInfprevio( new Short( rs.getShort(COLUMN_INFPREVIO) ) );
		if (rs.wasNull()) {
			dto.setInfprevio( null );
		}
		
		dto.setAnio( rs.getString( COLUMN_ANIO ) );
		dto.setLocalizacion( new Integer( rs.getInt(COLUMN_LOCALIZACION) ) );
		if (rs.wasNull()) {
			dto.setLocalizacion( null );
		}
		
		dto.setHta( new Short( rs.getShort(COLUMN_HTA) ) );
		if (rs.wasNull()) {
			dto.setHta( null );
		}
		
		dto.setDislipemia( new Short( rs.getShort(COLUMN_DISLIPEMIA) ) );
		if (rs.wasNull()) {
			dto.setDislipemia( null );
		}
		
		dto.setDiabetes( new Short( rs.getShort(COLUMN_DIABETES) ) );
		if (rs.wasNull()) {
			dto.setDiabetes( null );
		}
		
		dto.setTabaquismo( new Short( rs.getShort(COLUMN_TABAQUISMO) ) );
		if (rs.wasNull()) {
			dto.setTabaquismo( null );
		}
		
		dto.setIngalcoholica( new Short( rs.getShort(COLUMN_INGALCOHOLICA) ) );
		if (rs.wasNull()) {
			dto.setIngalcoholica( null );
		}
		
		dto.setAcv( new Short( rs.getShort(COLUMN_ACV) ) );
		if (rs.wasNull()) {
			dto.setAcv( null );
		}
		
		dto.setAit( new Short( rs.getShort(COLUMN_AIT) ) );
		if (rs.wasNull()) {
			dto.setAit( null );
		}
		
		dto.setEpoc( new Short( rs.getShort(COLUMN_EPOC) ) );
		if (rs.wasNull()) {
			dto.setEpoc( null );
		}
		
		dto.setSahs( new Short( rs.getShort(COLUMN_SAHS) ) );
		if (rs.wasNull()) {
			dto.setSahs( null );
		}
		
		dto.setTiposahs( new Integer( rs.getInt(COLUMN_TIPOSAHS) ) );
		if (rs.wasNull()) {
			dto.setTiposahs( null );
		}
		
		dto.setAhi( rs.getString( COLUMN_AHI ) );
		dto.setCpap( new Short( rs.getShort(COLUMN_CPAP) ) );
		if (rs.wasNull()) {
			dto.setCpap( null );
		}
		
		dto.setInsrenal( new Short( rs.getShort(COLUMN_INSRENAL) ) );
		if (rs.wasNull()) {
			dto.setInsrenal( null );
		}
		
		dto.setTipoinsrenal( new Integer( rs.getInt(COLUMN_TIPOINSRENAL) ) );
		if (rs.wasNull()) {
			dto.setTipoinsrenal( null );
		}
		
		dto.setNeoplasia( new Short( rs.getShort(COLUMN_NEOPLASIA) ) );
		if (rs.wasNull()) {
			dto.setNeoplasia( null );
		}
		
		dto.setTiponeoplasia( rs.getString( COLUMN_TIPONEOPLASIA ) );
		dto.setAfectiroidea( new Integer( rs.getInt(COLUMN_AFECTIROIDEA) ) );
		if (rs.wasNull()) {
			dto.setAfectiroidea( null );
		}
		
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SegSituacionclinica dto)
	{
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the specified arbitrary SQL statement
	 */
	public SegSituacionclinica[] findByDynamicSelect(String sql, Object[] sqlParams) throws SegSituacionclinicaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSituacionclinicaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the seg_situacionclinica table that match the specified arbitrary SQL statement
	 */
	public SegSituacionclinica[] findByDynamicWhere(String sql, Object[] sqlParams) throws SegSituacionclinicaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSituacionclinicaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
