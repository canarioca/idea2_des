/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ImpEvolucionDaoImpl extends AbstractDAO implements ImpEvolucionDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDEV, IDSEG, MODOGEN, FBASICA, SEGREMOTO, MEV, MPDEPENDIENTE, IAVDETEC, IAVESTIM, IAVMAX, IAVMIN, SACTIVACION, IVV, UMBRAL_ESTIMFREN, ATP, NUMTERATP, TEREFECATP, CHOQUES, ENERGIACHOQUE, TEREEFECCHOQ, TCARGACHOQUE, IMPCHOQUE, NUMCHOQUE, TODASEFEC, FMAX, FMIN, HISTERESIS, VALOR_HISTERESIS, ALGPREVFA, AMP_POSTCH, DURPULSO_POSTCH, FREC_POSTCH, DUR_POSTCH, CONFCH, FECHAALTA, MEDICOALTA, MOTIVOALTA, TIPOALTA, ESTADOALTA, COMENTARIOS, COMPATIBLEMRI, MOTIVOTERAPIAAPROPIADA, NUMEPISODIOS, NUMEPITSV, NUMEPITV, NUMEPIFV, NUMEPINOSOST, NUMEPIOTROS, RESPONDEDOR, TIPORESPONDEDOR, VECTOR_SICD, RECOMENDACIONES FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDEV, IDSEG, MODOGEN, FBASICA, SEGREMOTO, MEV, MPDEPENDIENTE, IAVDETEC, IAVESTIM, IAVMAX, IAVMIN, SACTIVACION, IVV, UMBRAL_ESTIMFREN, ATP, NUMTERATP, TEREFECATP, CHOQUES, ENERGIACHOQUE, TEREEFECCHOQ, TCARGACHOQUE, IMPCHOQUE, NUMCHOQUE, TODASEFEC, FMAX, FMIN, HISTERESIS, VALOR_HISTERESIS, ALGPREVFA, AMP_POSTCH, DURPULSO_POSTCH, FREC_POSTCH, DUR_POSTCH, CONFCH, FECHAALTA, MEDICOALTA, MOTIVOALTA, TIPOALTA, ESTADOALTA, COMENTARIOS, COMPATIBLEMRI, MOTIVOTERAPIAAPROPIADA, NUMEPISODIOS, NUMEPITSV, NUMEPITV, NUMEPIFV, NUMEPINOSOST, NUMEPIOTROS, RESPONDEDOR, TIPORESPONDEDOR, VECTOR_SICD, RECOMENDACIONES ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDEV = ?, IDSEG = ?, MODOGEN = ?, FBASICA = ?, SEGREMOTO = ?, MEV = ?, MPDEPENDIENTE = ?, IAVDETEC = ?, IAVESTIM = ?, IAVMAX = ?, IAVMIN = ?, SACTIVACION = ?, IVV = ?, UMBRAL_ESTIMFREN = ?, ATP = ?, NUMTERATP = ?, TEREFECATP = ?, CHOQUES = ?, ENERGIACHOQUE = ?, TEREEFECCHOQ = ?, TCARGACHOQUE = ?, IMPCHOQUE = ?, NUMCHOQUE = ?, TODASEFEC = ?, FMAX = ?, FMIN = ?, HISTERESIS = ?, VALOR_HISTERESIS = ?, ALGPREVFA = ?, AMP_POSTCH = ?, DURPULSO_POSTCH = ?, FREC_POSTCH = ?, DUR_POSTCH = ?, CONFCH = ?, FECHAALTA = ?, MEDICOALTA = ?, MOTIVOALTA = ?, TIPOALTA = ?, ESTADOALTA = ?, COMENTARIOS = ?, COMPATIBLEMRI = ?, MOTIVOTERAPIAAPROPIADA = ?, NUMEPISODIOS = ?, NUMEPITSV = ?, NUMEPITV = ?, NUMEPIFV = ?, NUMEPINOSOST = ?, NUMEPIOTROS = ?, RESPONDEDOR = ?, TIPORESPONDEDOR = ?, VECTOR_SICD = ?, RECOMENDACIONES = ? WHERE IDEV = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDEV = ?";

	/** 
	 * Index of column IDEV
	 */
	protected static final int COLUMN_IDEV = 1;

	/** 
	 * Index of column IDSEG
	 */
	protected static final int COLUMN_IDSEG = 2;

	/** 
	 * Index of column MODOGEN
	 */
	protected static final int COLUMN_MODOGEN = 3;

	/** 
	 * Index of column FBASICA
	 */
	protected static final int COLUMN_FBASICA = 4;

	/** 
	 * Index of column SEGREMOTO
	 */
	protected static final int COLUMN_SEGREMOTO = 5;

	/** 
	 * Index of column MEV
	 */
	protected static final int COLUMN_MEV = 6;

	/** 
	 * Index of column MPDEPENDIENTE
	 */
	protected static final int COLUMN_MPDEPENDIENTE = 7;

	/** 
	 * Index of column IAVDETEC
	 */
	protected static final int COLUMN_IAVDETEC = 8;

	/** 
	 * Index of column IAVESTIM
	 */
	protected static final int COLUMN_IAVESTIM = 9;

	/** 
	 * Index of column IAVMAX
	 */
	protected static final int COLUMN_IAVMAX = 10;

	/** 
	 * Index of column IAVMIN
	 */
	protected static final int COLUMN_IAVMIN = 11;

	/** 
	 * Index of column SACTIVACION
	 */
	protected static final int COLUMN_SACTIVACION = 12;

	/** 
	 * Index of column IVV
	 */
	protected static final int COLUMN_IVV = 13;

	/** 
	 * Index of column UMBRAL_ESTIMFREN
	 */
	protected static final int COLUMN_UMBRAL_ESTIMFREN = 14;

	/** 
	 * Index of column ATP
	 */
	protected static final int COLUMN_ATP = 15;

	/** 
	 * Index of column NUMTERATP
	 */
	protected static final int COLUMN_NUMTERATP = 16;

	/** 
	 * Index of column TEREFECATP
	 */
	protected static final int COLUMN_TEREFECATP = 17;

	/** 
	 * Index of column CHOQUES
	 */
	protected static final int COLUMN_CHOQUES = 18;

	/** 
	 * Index of column ENERGIACHOQUE
	 */
	protected static final int COLUMN_ENERGIACHOQUE = 19;

	/** 
	 * Index of column TEREEFECCHOQ
	 */
	protected static final int COLUMN_TEREEFECCHOQ = 20;

	/** 
	 * Index of column TCARGACHOQUE
	 */
	protected static final int COLUMN_TCARGACHOQUE = 21;

	/** 
	 * Index of column IMPCHOQUE
	 */
	protected static final int COLUMN_IMPCHOQUE = 22;

	/** 
	 * Index of column NUMCHOQUE
	 */
	protected static final int COLUMN_NUMCHOQUE = 23;

	/** 
	 * Index of column TODASEFEC
	 */
	protected static final int COLUMN_TODASEFEC = 24;

	/** 
	 * Index of column FMAX
	 */
	protected static final int COLUMN_FMAX = 25;

	/** 
	 * Index of column FMIN
	 */
	protected static final int COLUMN_FMIN = 26;

	/** 
	 * Index of column HISTERESIS
	 */
	protected static final int COLUMN_HISTERESIS = 27;

	/** 
	 * Index of column VALOR_HISTERESIS
	 */
	protected static final int COLUMN_VALOR_HISTERESIS = 28;

	/** 
	 * Index of column ALGPREVFA
	 */
	protected static final int COLUMN_ALGPREVFA = 29;

	/** 
	 * Index of column AMP_POSTCH
	 */
	protected static final int COLUMN_AMP_POSTCH = 30;

	/** 
	 * Index of column DURPULSO_POSTCH
	 */
	protected static final int COLUMN_DURPULSO_POSTCH = 31;

	/** 
	 * Index of column FREC_POSTCH
	 */
	protected static final int COLUMN_FREC_POSTCH = 32;

	/** 
	 * Index of column DUR_POSTCH
	 */
	protected static final int COLUMN_DUR_POSTCH = 33;

	/** 
	 * Index of column CONFCH
	 */
	protected static final int COLUMN_CONFCH = 34;

	/** 
	 * Index of column FECHAALTA
	 */
	protected static final int COLUMN_FECHAALTA = 35;

	/** 
	 * Index of column MEDICOALTA
	 */
	protected static final int COLUMN_MEDICOALTA = 36;

	/** 
	 * Index of column MOTIVOALTA
	 */
	protected static final int COLUMN_MOTIVOALTA = 37;

	/** 
	 * Index of column TIPOALTA
	 */
	protected static final int COLUMN_TIPOALTA = 38;

	/** 
	 * Index of column ESTADOALTA
	 */
	protected static final int COLUMN_ESTADOALTA = 39;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 40;

	/** 
	 * Index of column COMPATIBLEMRI
	 */
	protected static final int COLUMN_COMPATIBLEMRI = 41;

	/** 
	 * Index of column MOTIVOTERAPIAAPROPIADA
	 */
	protected static final int COLUMN_MOTIVOTERAPIAAPROPIADA = 42;

	/** 
	 * Index of column NUMEPISODIOS
	 */
	protected static final int COLUMN_NUMEPISODIOS = 43;

	/** 
	 * Index of column NUMEPITSV
	 */
	protected static final int COLUMN_NUMEPITSV = 44;

	/** 
	 * Index of column NUMEPITV
	 */
	protected static final int COLUMN_NUMEPITV = 45;

	/** 
	 * Index of column NUMEPIFV
	 */
	protected static final int COLUMN_NUMEPIFV = 46;

	/** 
	 * Index of column NUMEPINOSOST
	 */
	protected static final int COLUMN_NUMEPINOSOST = 47;

	/** 
	 * Index of column NUMEPIOTROS
	 */
	protected static final int COLUMN_NUMEPIOTROS = 48;

	/** 
	 * Index of column RESPONDEDOR
	 */
	protected static final int COLUMN_RESPONDEDOR = 49;

	/** 
	 * Index of column TIPORESPONDEDOR
	 */
	protected static final int COLUMN_TIPORESPONDEDOR = 50;

	/** 
	 * Index of column VECTOR_SICD
	 */
	protected static final int COLUMN_VECTOR_SICD = 51;

	/** 
	 * Index of column RECOMENDACIONES
	 */
	protected static final int COLUMN_RECOMENDACIONES = 52;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 52;

	/** 
	 * Index of primary-key column IDEV
	 */
	protected static final int PK_COLUMN_IDEV = 1;

	/** 
	 * Inserts a new row in the imp_evolucion table.
	 */
	public ImpEvolucionPk insert(ImpEvolucion dto) throws ImpEvolucionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdev() != null) {
				stmt.setInt( index++, dto.getIdev().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdseg() != null) {
				stmt.setInt( index++, dto.getIdseg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getModogen() != null) {
				stmt.setInt( index++, dto.getModogen().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getFbasica() );
			if (dto.getSegremoto() != null) {
				stmt.setShort( index++, dto.getSegremoto().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getMev() != null) {
				stmt.setShort( index++, dto.getMev().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getMpdependiente() != null) {
				stmt.setShort( index++, dto.getMpdependiente().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getIavdetec() );
			stmt.setString( index++, dto.getIavestim() );
			stmt.setString( index++, dto.getIavmax() );
			stmt.setString( index++, dto.getIavmin() );
			if (dto.getSactivacion() != null) {
				stmt.setInt( index++, dto.getSactivacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getIvv() );
			stmt.setString( index++, dto.getUmbralEstimfren() );
			if (dto.getAtp() != null) {
				stmt.setShort( index++, dto.getAtp().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getNumteratp() );
			if (dto.getTerefecatp() != null) {
				stmt.setShort( index++, dto.getTerefecatp().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getChoques() != null) {
				stmt.setShort( index++, dto.getChoques().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getEnergiachoque() );
			if (dto.getTereefecchoq() != null) {
				stmt.setShort( index++, dto.getTereefecchoq().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getTcargachoque() );
			stmt.setString( index++, dto.getImpchoque() );
			stmt.setString( index++, dto.getNumchoque() );
			if (dto.getTodasefec() != null) {
				stmt.setInt( index++, dto.getTodasefec().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getFmax() );
			stmt.setString( index++, dto.getFmin() );
			if (dto.getHisteresis() != null) {
				stmt.setShort( index++, dto.getHisteresis().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getValorHisteresis() );
			if (dto.getAlgprevfa() != null) {
				stmt.setShort( index++, dto.getAlgprevfa().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getAmpPostch() );
			stmt.setString( index++, dto.getDurpulsoPostch() );
			stmt.setString( index++, dto.getFrecPostch() );
			stmt.setString( index++, dto.getDurPostch() );
			if (dto.getConfch() != null) {
				stmt.setInt( index++, dto.getConfch().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFechaalta()==null ? null : new java.sql.Date( dto.getFechaalta().getTime() ) );
			stmt.setString( index++, dto.getMedicoalta() );
			if (dto.getMotivoalta() != null) {
				stmt.setInt( index++, dto.getMotivoalta().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTipoalta() != null) {
				stmt.setInt( index++, dto.getTipoalta().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEstadoalta() != null) {
				stmt.setInt( index++, dto.getEstadoalta().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getComentarios() );
			if (dto.getCompatiblemri() != null) {
				stmt.setInt( index++, dto.getCompatiblemri().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMotivoterapiaapropiada() != null) {
				stmt.setInt( index++, dto.getMotivoterapiaapropiada().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNumepisodios() );
			stmt.setString( index++, dto.getNumepitsv() );
			stmt.setString( index++, dto.getNumepitv() );
			stmt.setString( index++, dto.getNumepifv() );
			stmt.setString( index++, dto.getNumepinosost() );
			stmt.setString( index++, dto.getNumepiotros() );
			if (dto.getRespondedor() != null) {
				stmt.setInt( index++, dto.getRespondedor().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTiporespondedor() != null) {
				stmt.setInt( index++, dto.getTiporespondedor().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getVectorSicd() != null) {
				stmt.setInt( index++, dto.getVectorSicd().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getRecomendaciones() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdev( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpEvolucionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the imp_evolucion table.
	 */
	public void update(ImpEvolucionPk pk, ImpEvolucion dto) throws ImpEvolucionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdev() != null) {
				stmt.setInt( index++, dto.getIdev().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdseg() != null) {
				stmt.setInt( index++, dto.getIdseg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getModogen() != null) {
				stmt.setInt( index++, dto.getModogen().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getFbasica() );
			if (dto.getSegremoto() != null) {
				stmt.setShort( index++, dto.getSegremoto().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getMev() != null) {
				stmt.setShort( index++, dto.getMev().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getMpdependiente() != null) {
				stmt.setShort( index++, dto.getMpdependiente().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getIavdetec() );
			stmt.setString( index++, dto.getIavestim() );
			stmt.setString( index++, dto.getIavmax() );
			stmt.setString( index++, dto.getIavmin() );
			if (dto.getSactivacion() != null) {
				stmt.setInt( index++, dto.getSactivacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getIvv() );
			stmt.setString( index++, dto.getUmbralEstimfren() );
			if (dto.getAtp() != null) {
				stmt.setShort( index++, dto.getAtp().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getNumteratp() );
			if (dto.getTerefecatp() != null) {
				stmt.setShort( index++, dto.getTerefecatp().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getChoques() != null) {
				stmt.setShort( index++, dto.getChoques().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getEnergiachoque() );
			if (dto.getTereefecchoq() != null) {
				stmt.setShort( index++, dto.getTereefecchoq().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getTcargachoque() );
			stmt.setString( index++, dto.getImpchoque() );
			stmt.setString( index++, dto.getNumchoque() );
			if (dto.getTodasefec() != null) {
				stmt.setInt( index++, dto.getTodasefec().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getFmax() );
			stmt.setString( index++, dto.getFmin() );
			if (dto.getHisteresis() != null) {
				stmt.setShort( index++, dto.getHisteresis().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getValorHisteresis() );
			if (dto.getAlgprevfa() != null) {
				stmt.setShort( index++, dto.getAlgprevfa().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getAmpPostch() );
			stmt.setString( index++, dto.getDurpulsoPostch() );
			stmt.setString( index++, dto.getFrecPostch() );
			stmt.setString( index++, dto.getDurPostch() );
			if (dto.getConfch() != null) {
				stmt.setInt( index++, dto.getConfch().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFechaalta()==null ? null : new java.sql.Date( dto.getFechaalta().getTime() ) );
			stmt.setString( index++, dto.getMedicoalta() );
			if (dto.getMotivoalta() != null) {
				stmt.setInt( index++, dto.getMotivoalta().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTipoalta() != null) {
				stmt.setInt( index++, dto.getTipoalta().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEstadoalta() != null) {
				stmt.setInt( index++, dto.getEstadoalta().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getComentarios() );
			if (dto.getCompatiblemri() != null) {
				stmt.setInt( index++, dto.getCompatiblemri().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMotivoterapiaapropiada() != null) {
				stmt.setInt( index++, dto.getMotivoterapiaapropiada().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNumepisodios() );
			stmt.setString( index++, dto.getNumepitsv() );
			stmt.setString( index++, dto.getNumepitv() );
			stmt.setString( index++, dto.getNumepifv() );
			stmt.setString( index++, dto.getNumepinosost() );
			stmt.setString( index++, dto.getNumepiotros() );
			if (dto.getRespondedor() != null) {
				stmt.setInt( index++, dto.getRespondedor().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTiporespondedor() != null) {
				stmt.setInt( index++, dto.getTiporespondedor().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getVectorSicd() != null) {
				stmt.setInt( index++, dto.getVectorSicd().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getRecomendaciones() );
			if (pk.getIdev() != null) {
				stmt.setInt( 53, pk.getIdev().intValue() );
			} else {
				stmt.setNull(53, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpEvolucionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the imp_evolucion table.
	 */
	public void delete(ImpEvolucionPk pk) throws ImpEvolucionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdev() != null) {
				stmt.setInt( 1, pk.getIdev().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpEvolucionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the imp_evolucion table that matches the specified primary-key value.
	 */
	public ImpEvolucion findByPrimaryKey(ImpEvolucionPk pk) throws ImpEvolucionDaoException
	{
		return findByPrimaryKey( pk.getIdev() );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IDEV = :idev'.
	 */
	public ImpEvolucion findByPrimaryKey(Integer idev) throws ImpEvolucionDaoException
	{
		ImpEvolucion ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDEV = ?", new Object[] { idev } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria ''.
	 */
	public ImpEvolucion[] findAll() throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDEV", null );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IDEV = :idev'.
	 */
	public ImpEvolucion[] findWhereIdevEquals(int idev) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDEV = ? ORDER BY IDEV", new Object[] {  new Integer(idev) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IDSEG = :idseg'.
	 */
	public ImpEvolucion[] findWhereIdsegEquals(int idseg) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDSEG = ? ORDER BY IDSEG", new Object[] {  new Integer(idseg) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'MODOGEN = :modogen'.
	 */
	public ImpEvolucion[] findWhereModogenEquals(int modogen) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MODOGEN = ? ORDER BY MODOGEN", new Object[] {  new Integer(modogen) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'FBASICA = :fbasica'.
	 */
	public ImpEvolucion[] findWhereFbasicaEquals(String fbasica) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FBASICA = ? ORDER BY FBASICA", new Object[] { fbasica } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'SEGREMOTO = :segremoto'.
	 */
	public ImpEvolucion[] findWhereSegremotoEquals(short segremoto) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SEGREMOTO = ? ORDER BY SEGREMOTO", new Object[] {  new Short(segremoto) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'MEV = :mev'.
	 */
	public ImpEvolucion[] findWhereMevEquals(short mev) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MEV = ? ORDER BY MEV", new Object[] {  new Short(mev) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'MPDEPENDIENTE = :mpdependiente'.
	 */
	public ImpEvolucion[] findWhereMpdependienteEquals(short mpdependiente) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MPDEPENDIENTE = ? ORDER BY MPDEPENDIENTE", new Object[] {  new Short(mpdependiente) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IAVDETEC = :iavdetec'.
	 */
	public ImpEvolucion[] findWhereIavdetecEquals(String iavdetec) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IAVDETEC = ? ORDER BY IAVDETEC", new Object[] { iavdetec } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IAVESTIM = :iavestim'.
	 */
	public ImpEvolucion[] findWhereIavestimEquals(String iavestim) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IAVESTIM = ? ORDER BY IAVESTIM", new Object[] { iavestim } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IAVMAX = :iavmax'.
	 */
	public ImpEvolucion[] findWhereIavmaxEquals(String iavmax) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IAVMAX = ? ORDER BY IAVMAX", new Object[] { iavmax } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IAVMIN = :iavmin'.
	 */
	public ImpEvolucion[] findWhereIavminEquals(String iavmin) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IAVMIN = ? ORDER BY IAVMIN", new Object[] { iavmin } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'SACTIVACION = :sactivacion'.
	 */
	public ImpEvolucion[] findWhereSactivacionEquals(int sactivacion) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SACTIVACION = ? ORDER BY SACTIVACION", new Object[] {  new Integer(sactivacion) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IVV = :ivv'.
	 */
	public ImpEvolucion[] findWhereIvvEquals(String ivv) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IVV = ? ORDER BY IVV", new Object[] { ivv } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'UMBRAL_ESTIMFREN = :umbralEstimfren'.
	 */
	public ImpEvolucion[] findWhereUmbralEstimfrenEquals(String umbralEstimfren) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UMBRAL_ESTIMFREN = ? ORDER BY UMBRAL_ESTIMFREN", new Object[] { umbralEstimfren } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'ATP = :atp'.
	 */
	public ImpEvolucion[] findWhereAtpEquals(short atp) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ATP = ? ORDER BY ATP", new Object[] {  new Short(atp) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'NUMTERATP = :numteratp'.
	 */
	public ImpEvolucion[] findWhereNumteratpEquals(String numteratp) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMTERATP = ? ORDER BY NUMTERATP", new Object[] { numteratp } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'TEREFECATP = :terefecatp'.
	 */
	public ImpEvolucion[] findWhereTerefecatpEquals(short terefecatp) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TEREFECATP = ? ORDER BY TEREFECATP", new Object[] {  new Short(terefecatp) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'CHOQUES = :choques'.
	 */
	public ImpEvolucion[] findWhereChoquesEquals(short choques) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CHOQUES = ? ORDER BY CHOQUES", new Object[] {  new Short(choques) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'ENERGIACHOQUE = :energiachoque'.
	 */
	public ImpEvolucion[] findWhereEnergiachoqueEquals(String energiachoque) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ENERGIACHOQUE = ? ORDER BY ENERGIACHOQUE", new Object[] { energiachoque } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'TEREEFECCHOQ = :tereefecchoq'.
	 */
	public ImpEvolucion[] findWhereTereefecchoqEquals(short tereefecchoq) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TEREEFECCHOQ = ? ORDER BY TEREEFECCHOQ", new Object[] {  new Short(tereefecchoq) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'TCARGACHOQUE = :tcargachoque'.
	 */
	public ImpEvolucion[] findWhereTcargachoqueEquals(String tcargachoque) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TCARGACHOQUE = ? ORDER BY TCARGACHOQUE", new Object[] { tcargachoque } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IMPCHOQUE = :impchoque'.
	 */
	public ImpEvolucion[] findWhereImpchoqueEquals(String impchoque) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPCHOQUE = ? ORDER BY IMPCHOQUE", new Object[] { impchoque } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'NUMCHOQUE = :numchoque'.
	 */
	public ImpEvolucion[] findWhereNumchoqueEquals(String numchoque) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMCHOQUE = ? ORDER BY NUMCHOQUE", new Object[] { numchoque } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'TODASEFEC = :todasefec'.
	 */
	public ImpEvolucion[] findWhereTodasefecEquals(int todasefec) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TODASEFEC = ? ORDER BY TODASEFEC", new Object[] {  new Integer(todasefec) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'FMAX = :fmax'.
	 */
	public ImpEvolucion[] findWhereFmaxEquals(String fmax) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FMAX = ? ORDER BY FMAX", new Object[] { fmax } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'FMIN = :fmin'.
	 */
	public ImpEvolucion[] findWhereFminEquals(String fmin) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FMIN = ? ORDER BY FMIN", new Object[] { fmin } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'HISTERESIS = :histeresis'.
	 */
	public ImpEvolucion[] findWhereHisteresisEquals(short histeresis) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HISTERESIS = ? ORDER BY HISTERESIS", new Object[] {  new Short(histeresis) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'VALOR_HISTERESIS = :valorHisteresis'.
	 */
	public ImpEvolucion[] findWhereValorHisteresisEquals(String valorHisteresis) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VALOR_HISTERESIS = ? ORDER BY VALOR_HISTERESIS", new Object[] { valorHisteresis } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'ALGPREVFA = :algprevfa'.
	 */
	public ImpEvolucion[] findWhereAlgprevfaEquals(short algprevfa) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ALGPREVFA = ? ORDER BY ALGPREVFA", new Object[] {  new Short(algprevfa) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'AMP_POSTCH = :ampPostch'.
	 */
	public ImpEvolucion[] findWhereAmpPostchEquals(String ampPostch) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AMP_POSTCH = ? ORDER BY AMP_POSTCH", new Object[] { ampPostch } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'DURPULSO_POSTCH = :durpulsoPostch'.
	 */
	public ImpEvolucion[] findWhereDurpulsoPostchEquals(String durpulsoPostch) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DURPULSO_POSTCH = ? ORDER BY DURPULSO_POSTCH", new Object[] { durpulsoPostch } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'FREC_POSTCH = :frecPostch'.
	 */
	public ImpEvolucion[] findWhereFrecPostchEquals(String frecPostch) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FREC_POSTCH = ? ORDER BY FREC_POSTCH", new Object[] { frecPostch } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'DUR_POSTCH = :durPostch'.
	 */
	public ImpEvolucion[] findWhereDurPostchEquals(String durPostch) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DUR_POSTCH = ? ORDER BY DUR_POSTCH", new Object[] { durPostch } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'CONFCH = :confch'.
	 */
	public ImpEvolucion[] findWhereConfchEquals(int confch) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONFCH = ? ORDER BY CONFCH", new Object[] {  new Integer(confch) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'FECHAALTA = :fechaalta'.
	 */
	public ImpEvolucion[] findWhereFechaaltaEquals(Date fechaalta) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAALTA = ? ORDER BY FECHAALTA", new Object[] { fechaalta==null ? null : new java.sql.Date( fechaalta.getTime() ) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'MEDICOALTA = :medicoalta'.
	 */
	public ImpEvolucion[] findWhereMedicoaltaEquals(String medicoalta) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MEDICOALTA = ? ORDER BY MEDICOALTA", new Object[] { medicoalta } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'MOTIVOALTA = :motivoalta'.
	 */
	public ImpEvolucion[] findWhereMotivoaltaEquals(int motivoalta) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOTIVOALTA = ? ORDER BY MOTIVOALTA", new Object[] {  new Integer(motivoalta) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'TIPOALTA = :tipoalta'.
	 */
	public ImpEvolucion[] findWhereTipoaltaEquals(int tipoalta) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPOALTA = ? ORDER BY TIPOALTA", new Object[] {  new Integer(tipoalta) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'ESTADOALTA = :estadoalta'.
	 */
	public ImpEvolucion[] findWhereEstadoaltaEquals(int estadoalta) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTADOALTA = ? ORDER BY ESTADOALTA", new Object[] {  new Integer(estadoalta) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ImpEvolucion[] findWhereComentariosEquals(String comentarios) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'COMPATIBLEMRI = :compatiblemri'.
	 */
	public ImpEvolucion[] findWhereCompatiblemriEquals(int compatiblemri) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMPATIBLEMRI = ? ORDER BY COMPATIBLEMRI", new Object[] {  new Integer(compatiblemri) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'MOTIVOTERAPIAAPROPIADA = :motivoterapiaapropiada'.
	 */
	public ImpEvolucion[] findWhereMotivoterapiaapropiadaEquals(int motivoterapiaapropiada) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOTIVOTERAPIAAPROPIADA = ? ORDER BY MOTIVOTERAPIAAPROPIADA", new Object[] {  new Integer(motivoterapiaapropiada) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'NUMEPISODIOS = :numepisodios'.
	 */
	public ImpEvolucion[] findWhereNumepisodiosEquals(String numepisodios) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMEPISODIOS = ? ORDER BY NUMEPISODIOS", new Object[] { numepisodios } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'NUMEPITSV = :numepitsv'.
	 */
	public ImpEvolucion[] findWhereNumepitsvEquals(String numepitsv) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMEPITSV = ? ORDER BY NUMEPITSV", new Object[] { numepitsv } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'NUMEPITV = :numepitv'.
	 */
	public ImpEvolucion[] findWhereNumepitvEquals(String numepitv) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMEPITV = ? ORDER BY NUMEPITV", new Object[] { numepitv } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'NUMEPIFV = :numepifv'.
	 */
	public ImpEvolucion[] findWhereNumepifvEquals(String numepifv) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMEPIFV = ? ORDER BY NUMEPIFV", new Object[] { numepifv } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'NUMEPINOSOST = :numepinosost'.
	 */
	public ImpEvolucion[] findWhereNumepinosostEquals(String numepinosost) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMEPINOSOST = ? ORDER BY NUMEPINOSOST", new Object[] { numepinosost } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'NUMEPIOTROS = :numepiotros'.
	 */
	public ImpEvolucion[] findWhereNumepiotrosEquals(String numepiotros) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMEPIOTROS = ? ORDER BY NUMEPIOTROS", new Object[] { numepiotros } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'RESPONDEDOR = :respondedor'.
	 */
	public ImpEvolucion[] findWhereRespondedorEquals(int respondedor) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RESPONDEDOR = ? ORDER BY RESPONDEDOR", new Object[] {  new Integer(respondedor) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'TIPORESPONDEDOR = :tiporespondedor'.
	 */
	public ImpEvolucion[] findWhereTiporespondedorEquals(int tiporespondedor) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPORESPONDEDOR = ? ORDER BY TIPORESPONDEDOR", new Object[] {  new Integer(tiporespondedor) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'VECTOR_SICD = :vectorSicd'.
	 */
	public ImpEvolucion[] findWhereVectorSicdEquals(int vectorSicd) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VECTOR_SICD = ? ORDER BY VECTOR_SICD", new Object[] {  new Integer(vectorSicd) } );
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'RECOMENDACIONES = :recomendaciones'.
	 */
	public ImpEvolucion[] findWhereRecomendacionesEquals(String recomendaciones) throws ImpEvolucionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECOMENDACIONES = ? ORDER BY RECOMENDACIONES", new Object[] { recomendaciones } );
	}

	/**
	 * Method 'ImpEvolucionDaoImpl'
	 * 
	 */
	public ImpEvolucionDaoImpl()
	{
	}
	public ImpEvolucionDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ImpEvolucionDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ImpEvolucionDaoImpl'
	 * 
	 * @param userConn
	 */
	public ImpEvolucionDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.imp_evolucion";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ImpEvolucion fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ImpEvolucion dto = new ImpEvolucion();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ImpEvolucion[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ImpEvolucion dto = new ImpEvolucion();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ImpEvolucion ret[] = new ImpEvolucion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ImpEvolucion dto, ResultSet rs) throws SQLException
	{
		dto.setIdev( new Integer( rs.getInt(COLUMN_IDEV) ) );
		dto.setIdseg( new Integer( rs.getInt(COLUMN_IDSEG) ) );
		if (rs.wasNull()) {
			dto.setIdseg( null );
		}
		
		dto.setModogen( new Integer( rs.getInt(COLUMN_MODOGEN) ) );
		if (rs.wasNull()) {
			dto.setModogen( null );
		}
		
		dto.setFbasica( rs.getString( COLUMN_FBASICA ) );
		dto.setSegremoto( new Short( rs.getShort(COLUMN_SEGREMOTO) ) );
		if (rs.wasNull()) {
			dto.setSegremoto( null );
		}
		
		dto.setMev( new Short( rs.getShort(COLUMN_MEV) ) );
		if (rs.wasNull()) {
			dto.setMev( null );
		}
		
		dto.setMpdependiente( new Short( rs.getShort(COLUMN_MPDEPENDIENTE) ) );
		if (rs.wasNull()) {
			dto.setMpdependiente( null );
		}
		
		dto.setIavdetec( rs.getString( COLUMN_IAVDETEC ) );
		dto.setIavestim( rs.getString( COLUMN_IAVESTIM ) );
		dto.setIavmax( rs.getString( COLUMN_IAVMAX ) );
		dto.setIavmin( rs.getString( COLUMN_IAVMIN ) );
		dto.setSactivacion( new Integer( rs.getInt(COLUMN_SACTIVACION) ) );
		if (rs.wasNull()) {
			dto.setSactivacion( null );
		}
		
		dto.setIvv( rs.getString( COLUMN_IVV ) );
		dto.setUmbralEstimfren( rs.getString( COLUMN_UMBRAL_ESTIMFREN ) );
		dto.setAtp( new Short( rs.getShort(COLUMN_ATP) ) );
		if (rs.wasNull()) {
			dto.setAtp( null );
		}
		
		dto.setNumteratp( rs.getString( COLUMN_NUMTERATP ) );
		dto.setTerefecatp( new Short( rs.getShort(COLUMN_TEREFECATP) ) );
		if (rs.wasNull()) {
			dto.setTerefecatp( null );
		}
		
		dto.setChoques( new Short( rs.getShort(COLUMN_CHOQUES) ) );
		if (rs.wasNull()) {
			dto.setChoques( null );
		}
		
		dto.setEnergiachoque( rs.getString( COLUMN_ENERGIACHOQUE ) );
		dto.setTereefecchoq( new Short( rs.getShort(COLUMN_TEREEFECCHOQ) ) );
		if (rs.wasNull()) {
			dto.setTereefecchoq( null );
		}
		
		dto.setTcargachoque( rs.getString( COLUMN_TCARGACHOQUE ) );
		dto.setImpchoque( rs.getString( COLUMN_IMPCHOQUE ) );
		dto.setNumchoque( rs.getString( COLUMN_NUMCHOQUE ) );
		dto.setTodasefec( new Integer( rs.getInt(COLUMN_TODASEFEC) ) );
		if (rs.wasNull()) {
			dto.setTodasefec( null );
		}
		
		dto.setFmax( rs.getString( COLUMN_FMAX ) );
		dto.setFmin( rs.getString( COLUMN_FMIN ) );
		dto.setHisteresis( new Short( rs.getShort(COLUMN_HISTERESIS) ) );
		if (rs.wasNull()) {
			dto.setHisteresis( null );
		}
		
		dto.setValorHisteresis( rs.getString( COLUMN_VALOR_HISTERESIS ) );
		dto.setAlgprevfa( new Short( rs.getShort(COLUMN_ALGPREVFA) ) );
		if (rs.wasNull()) {
			dto.setAlgprevfa( null );
		}
		
		dto.setAmpPostch( rs.getString( COLUMN_AMP_POSTCH ) );
		dto.setDurpulsoPostch( rs.getString( COLUMN_DURPULSO_POSTCH ) );
		dto.setFrecPostch( rs.getString( COLUMN_FREC_POSTCH ) );
		dto.setDurPostch( rs.getString( COLUMN_DUR_POSTCH ) );
		dto.setConfch( new Integer( rs.getInt(COLUMN_CONFCH) ) );
		if (rs.wasNull()) {
			dto.setConfch( null );
		}
		
		dto.setFechaalta( rs.getDate(COLUMN_FECHAALTA ) );
		dto.setMedicoalta( rs.getString( COLUMN_MEDICOALTA ) );
		dto.setMotivoalta( new Integer( rs.getInt(COLUMN_MOTIVOALTA) ) );
		if (rs.wasNull()) {
			dto.setMotivoalta( null );
		}
		
		dto.setTipoalta( new Integer( rs.getInt(COLUMN_TIPOALTA) ) );
		if (rs.wasNull()) {
			dto.setTipoalta( null );
		}
		
		dto.setEstadoalta( new Integer( rs.getInt(COLUMN_ESTADOALTA) ) );
		if (rs.wasNull()) {
			dto.setEstadoalta( null );
		}
		
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setCompatiblemri( new Integer( rs.getInt(COLUMN_COMPATIBLEMRI) ) );
		if (rs.wasNull()) {
			dto.setCompatiblemri( null );
		}
		
		dto.setMotivoterapiaapropiada( new Integer( rs.getInt(COLUMN_MOTIVOTERAPIAAPROPIADA) ) );
		if (rs.wasNull()) {
			dto.setMotivoterapiaapropiada( null );
		}
		
		dto.setNumepisodios( rs.getString( COLUMN_NUMEPISODIOS ) );
		dto.setNumepitsv( rs.getString( COLUMN_NUMEPITSV ) );
		dto.setNumepitv( rs.getString( COLUMN_NUMEPITV ) );
		dto.setNumepifv( rs.getString( COLUMN_NUMEPIFV ) );
		dto.setNumepinosost( rs.getString( COLUMN_NUMEPINOSOST ) );
		dto.setNumepiotros( rs.getString( COLUMN_NUMEPIOTROS ) );
		dto.setRespondedor( new Integer( rs.getInt(COLUMN_RESPONDEDOR) ) );
		if (rs.wasNull()) {
			dto.setRespondedor( null );
		}
		
		dto.setTiporespondedor( new Integer( rs.getInt(COLUMN_TIPORESPONDEDOR) ) );
		if (rs.wasNull()) {
			dto.setTiporespondedor( null );
		}
		
		dto.setVectorSicd( new Integer( rs.getInt(COLUMN_VECTOR_SICD) ) );
		if (rs.wasNull()) {
			dto.setVectorSicd( null );
		}
		
		dto.setRecomendaciones( rs.getString( COLUMN_RECOMENDACIONES ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ImpEvolucion dto)
	{
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the specified arbitrary SQL statement
	 */
	public ImpEvolucion[] findByDynamicSelect(String sql, Object[] sqlParams) throws ImpEvolucionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpEvolucionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the imp_evolucion table that match the specified arbitrary SQL statement
	 */
	public ImpEvolucion[] findByDynamicWhere(String sql, Object[] sqlParams) throws ImpEvolucionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpEvolucionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
