/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;

public class ArrPacienteHclinDaoImpl extends AbstractDAO implements ArrPacienteHclinDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDPACIENTE, FEVI, FUNCION, HTA, DISLIPEMIA, DIABETES, TABAQUISMO, ACV, INSUF, SAOS, AFECTA, IDCARDIO, IDISQUEMICA, LOCALIZACION, CONGENITASTR, IDCIRCARDIA, OTRASSTR, TEXTO, TIPOCARDIO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDPACIENTE, FEVI, FUNCION, HTA, DISLIPEMIA, DIABETES, TABAQUISMO, ACV, INSUF, SAOS, AFECTA, IDCARDIO, IDISQUEMICA, LOCALIZACION, CONGENITASTR, IDCIRCARDIA, OTRASSTR, TEXTO, TIPOCARDIO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDPACIENTE = ?, FEVI = ?, FUNCION = ?, HTA = ?, DISLIPEMIA = ?, DIABETES = ?, TABAQUISMO = ?, ACV = ?, INSUF = ?, SAOS = ?, AFECTA = ?, IDCARDIO = ?, IDISQUEMICA = ?, LOCALIZACION = ?, CONGENITASTR = ?, IDCIRCARDIA = ?, OTRASSTR = ?, TEXTO = ?, TIPOCARDIO = ? WHERE IDPACIENTE = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDPACIENTE = ?";

	/** 
	 * Index of column IDPACIENTE
	 */
	protected static final int COLUMN_IDPACIENTE = 1;

	/** 
	 * Index of column FEVI
	 */
	protected static final int COLUMN_FEVI = 2;

	/** 
	 * Index of column FUNCION
	 */
	protected static final int COLUMN_FUNCION = 3;

	/** 
	 * Index of column HTA
	 */
	protected static final int COLUMN_HTA = 4;

	/** 
	 * Index of column DISLIPEMIA
	 */
	protected static final int COLUMN_DISLIPEMIA = 5;

	/** 
	 * Index of column DIABETES
	 */
	protected static final int COLUMN_DIABETES = 6;

	/** 
	 * Index of column TABAQUISMO
	 */
	protected static final int COLUMN_TABAQUISMO = 7;

	/** 
	 * Index of column ACV
	 */
	protected static final int COLUMN_ACV = 8;

	/** 
	 * Index of column INSUF
	 */
	protected static final int COLUMN_INSUF = 9;

	/** 
	 * Index of column SAOS
	 */
	protected static final int COLUMN_SAOS = 10;

	/** 
	 * Index of column AFECTA
	 */
	protected static final int COLUMN_AFECTA = 11;

	/** 
	 * Index of column IDCARDIO
	 */
	protected static final int COLUMN_IDCARDIO = 12;

	/** 
	 * Index of column IDISQUEMICA
	 */
	protected static final int COLUMN_IDISQUEMICA = 13;

	/** 
	 * Index of column LOCALIZACION
	 */
	protected static final int COLUMN_LOCALIZACION = 14;

	/** 
	 * Index of column CONGENITASTR
	 */
	protected static final int COLUMN_CONGENITASTR = 15;

	/** 
	 * Index of column IDCIRCARDIA
	 */
	protected static final int COLUMN_IDCIRCARDIA = 16;

	/** 
	 * Index of column OTRASSTR
	 */
	protected static final int COLUMN_OTRASSTR = 17;
	
	
	protected static final int COLUMN_TEXTO = 18;
	
	protected static final int COLUMN_TIPOCARDIO = 19;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 19;

	/** 
	 * Index of primary-key column IDPACIENTE
	 */
	protected static final int PK_COLUMN_IDPACIENTE = 1;

	/** 
	 * Inserts a new row in the ARR_PACIENTE_HCLIN table.
	 */
	public ArrPacienteHclinPk insert(ArrPacienteHclin dto) throws ArrPacienteHclinDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.getIdpaciente() != null) {
				stmt.setInt( index++, dto.getIdpaciente().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getFevi() );
			stmt.setString( index++, dto.getFuncion() );
			if (dto.getHta() != null) {
				stmt.setInt( index++, dto.getHta().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getDislipemia() != null) {
				stmt.setInt( index++, dto.getDislipemia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getDiabetes() != null) {
				stmt.setInt( index++, dto.getDiabetes().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTabaquismo() != null) {
				stmt.setInt( index++, dto.getTabaquismo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAcv() != null) {
				stmt.setInt( index++, dto.getAcv().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getInsuf() != null) {
				stmt.setInt( index++, dto.getInsuf().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSaos() != null) {
				stmt.setInt( index++, dto.getSaos().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAfecta() != null) {
				stmt.setInt( index++, dto.getAfecta().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdcardio() != null) {
				stmt.setInt( index++, dto.getIdcardio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdisquemica() != null) {
				stmt.setInt( index++, dto.getIdisquemica().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getLocalizacion() );
			stmt.setString( index++, dto.getCongenitastr() );
		
			if (dto.getIdcircardia() != null) {
				stmt.setInt( index++, dto.getIdcircardia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getOtrasstr() );
			stmt.setString( index++, dto.getTexto() );
			if (dto.getTipocardio() != null) {
				stmt.setInt( index++, dto.getTipocardio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			/*auditoriaDto.setAccion(AuditoriaDto.insercion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);*/
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			throw new ArrPacienteHclinDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the ARR_PACIENTE_HCLIN table.
	 */
	public void update(ArrPacienteHclinPk pk, ArrPacienteHclin dto) throws ArrPacienteHclinDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdpaciente() != null) {
				stmt.setInt( index++, dto.getIdpaciente().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getFevi() );
			stmt.setString( index++, dto.getFuncion() );
			if (dto.getHta() != null) {
				stmt.setInt( index++, dto.getHta().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getDislipemia() != null) {
				stmt.setInt( index++, dto.getDislipemia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getDiabetes() != null) {
				stmt.setInt( index++, dto.getDiabetes().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTabaquismo() != null) {
				stmt.setInt( index++, dto.getTabaquismo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAcv() != null) {
				stmt.setInt( index++, dto.getAcv().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getInsuf() != null) {
				stmt.setInt( index++, dto.getInsuf().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSaos() != null) {
				stmt.setInt( index++, dto.getSaos().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAfecta() != null) {
				stmt.setInt( index++, dto.getAfecta().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdcardio() != null) {
				stmt.setInt( index++, dto.getIdcardio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdisquemica() != null) {
				stmt.setInt( index++, dto.getIdisquemica().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getLocalizacion() );
			stmt.setString( index++, dto.getCongenitastr() );
		
			if (dto.getIdcircardia() != null) {
				stmt.setInt( index++, dto.getIdcircardia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getOtrasstr() );
			stmt.setString( index++, dto.getTexto() );
			if (dto.getTipocardio() != null) {
				stmt.setInt( index++, dto.getTipocardio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			
			if (pk.getIdpaciente() != null) {
				stmt.setInt( 20, pk.getIdpaciente().intValue() );
			} else {
				stmt.setNull(20, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrPacienteHclinDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the ARR_PACIENTE_HCLIN table.
	 */
	public void delete(ArrPacienteHclinPk pk) throws ArrPacienteHclinDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdpaciente() != null) {
				stmt.setInt( 1, pk.getIdpaciente().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(pk.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrPacienteHclinDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the ARR_PACIENTE_HCLIN table that matches the specified primary-key value.
	 */
	public ArrPacienteHclin findByPrimaryKey(ArrPacienteHclinPk pk) throws ArrPacienteHclinDaoException
	{
		return findByPrimaryKey( pk.getIdpaciente() );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'IDPACIENTE = :idpaciente'.
	 */
	public ArrPacienteHclin findByPrimaryKey(Integer idpaciente) throws ArrPacienteHclinDaoException
	{
		ArrPacienteHclin ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDPACIENTE = ?", new Object[] { idpaciente } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria ''.
	 */
	public ArrPacienteHclin[] findAll() throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDPACIENTE", null );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'IDPACIENTE = :idpaciente'.
	 */
	public ArrPacienteHclin[] findWhereIdpacienteEquals(long idpaciente) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPACIENTE = ? ORDER BY IDPACIENTE", new Object[] {  new Long(idpaciente) } );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'FEVI = :fevi'.
	 */
	public ArrPacienteHclin[] findWhereFeviEquals(String fevi) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FEVI = ? ORDER BY FEVI", new Object[] { fevi } );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'FUNCION = :funcion'.
	 */
	public ArrPacienteHclin[] findWhereFuncionEquals(String funcion) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FUNCION = ? ORDER BY FUNCION", new Object[] { funcion } );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'HTA = :hta'.
	 */
	public ArrPacienteHclin[] findWhereHtaEquals(long hta) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HTA = ? ORDER BY HTA", new Object[] {  new Long(hta) } );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'DISLIPEMIA = :dislipemia'.
	 */
	public ArrPacienteHclin[] findWhereDislipemiaEquals(long dislipemia) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DISLIPEMIA = ? ORDER BY DISLIPEMIA", new Object[] {  new Long(dislipemia) } );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'DIABETES = :diabetes'.
	 */
	public ArrPacienteHclin[] findWhereDiabetesEquals(long diabetes) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DIABETES = ? ORDER BY DIABETES", new Object[] {  new Long(diabetes) } );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'TABAQUISMO = :tabaquismo'.
	 */
	public ArrPacienteHclin[] findWhereTabaquismoEquals(long tabaquismo) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TABAQUISMO = ? ORDER BY TABAQUISMO", new Object[] {  new Long(tabaquismo) } );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'ACV = :acv'.
	 */
	public ArrPacienteHclin[] findWhereAcvEquals(long acv) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACV = ? ORDER BY ACV", new Object[] {  new Long(acv) } );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'INSUF = :insuf'.
	 */
	public ArrPacienteHclin[] findWhereInsufEquals(long insuf) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INSUF = ? ORDER BY INSUF", new Object[] {  new Long(insuf) } );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'SAOS = :saos'.
	 */
	public ArrPacienteHclin[] findWhereSaosEquals(long saos) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SAOS = ? ORDER BY SAOS", new Object[] {  new Long(saos) } );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'AFECTA = :afecta'.
	 */
	public ArrPacienteHclin[] findWhereAfectaEquals(long afecta) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AFECTA = ? ORDER BY AFECTA", new Object[] {  new Long(afecta) } );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'IDCARDIO = :idcardio'.
	 */
	public ArrPacienteHclin[] findWhereIdcardioEquals(long idcardio) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDCARDIO = ? ORDER BY IDCARDIO", new Object[] {  new Long(idcardio) } );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'IDISQUEMICA = :idisquemica'.
	 */
	public ArrPacienteHclin[] findWhereIdisquemicaEquals(long idisquemica) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDISQUEMICA = ? ORDER BY IDISQUEMICA", new Object[] {  new Long(idisquemica) } );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'LOCALIZACION = :localizacion'.
	 */
	public ArrPacienteHclin[] findWhereLocalizacionEquals(String localizacion) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOCALIZACION = ? ORDER BY LOCALIZACION", new Object[] { localizacion } );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'CONGENITASTR = :congenitastr'.
	 */
	public ArrPacienteHclin[] findWhereCongenitastrEquals(String congenitastr) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONGENITASTR = ? ORDER BY CONGENITASTR", new Object[] { congenitastr } );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'IDCIRCARDIA = :idcircardia'.
	 */
	public ArrPacienteHclin[] findWhereIdcircardiaEquals(long idcircardia) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDCIRCARDIA = ? ORDER BY IDCIRCARDIA", new Object[] {  new Long(idcircardia) } );
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the criteria 'OTRASSTR = :otrasstr'.
	 */
	public ArrPacienteHclin[] findWhereOtrasstrEquals(String otrasstr) throws ArrPacienteHclinDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OTRASSTR = ? ORDER BY OTRASSTR", new Object[] { otrasstr } );
	}

	/**
	 * Method 'ArrPacienteHclinDaoImpl'
	 * 
	 */
	public ArrPacienteHclinDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ArrPacienteHclinDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrPacienteHclinDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}
	public ArrPacienteHclinDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		//return "idea.ARR_PACIENTE_HCLIN";
		return "idea.arr_paciente_hclin";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrPacienteHclin fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrPacienteHclin dto = new ArrPacienteHclin();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrPacienteHclin[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrPacienteHclin dto = new ArrPacienteHclin();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrPacienteHclin ret[] = new ArrPacienteHclin[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrPacienteHclin dto, ResultSet rs) throws SQLException
	{
		dto.setIdpaciente( new Integer( rs.getInt(COLUMN_IDPACIENTE) ) );
		dto.setFevi( rs.getString( COLUMN_FEVI ) );
		dto.setFuncion( rs.getString( COLUMN_FUNCION ) );
		dto.setHta( new Integer( rs.getInt(COLUMN_HTA) ) );
		if (rs.wasNull()) {
			dto.setHta( null );
		}
		
		dto.setDislipemia( new Integer( rs.getInt(COLUMN_DISLIPEMIA) ) );
		if (rs.wasNull()) {
			dto.setDislipemia( null );
		}
		
		dto.setDiabetes( new Integer( rs.getInt(COLUMN_DIABETES) ) );
		if (rs.wasNull()) {
			dto.setDiabetes( null );
		}
		
		dto.setTabaquismo( new Integer( rs.getInt(COLUMN_TABAQUISMO) ) );
		if (rs.wasNull()) {
			dto.setTabaquismo( null );
		}
		
		dto.setAcv( new Integer( rs.getInt(COLUMN_ACV) ) );
		if (rs.wasNull()) {
			dto.setAcv( null );
		}
		
		dto.setInsuf( new Integer( rs.getInt(COLUMN_INSUF) ) );
		if (rs.wasNull()) {
			dto.setInsuf( null );
		}
		
		dto.setSaos( new Integer( rs.getInt(COLUMN_SAOS) ) );
		if (rs.wasNull()) {
			dto.setSaos( null );
		}
		
		dto.setAfecta( new Integer( rs.getInt(COLUMN_AFECTA) ) );
		if (rs.wasNull()) {
			dto.setAfecta( null );
		}
		
		dto.setIdcardio( new Integer( rs.getInt(COLUMN_IDCARDIO) ) );
		if (rs.wasNull()) {
			dto.setIdcardio( null );
		}
		
		dto.setIdisquemica( new Integer( rs.getInt(COLUMN_IDISQUEMICA) ) );
		if (rs.wasNull()) {
			dto.setIdisquemica( null );
		}
		
		dto.setLocalizacion( rs.getString( COLUMN_LOCALIZACION ) );
		dto.setCongenitastr( rs.getString( COLUMN_CONGENITASTR ) );
		dto.setIdcircardia( new Integer( rs.getInt(COLUMN_IDCIRCARDIA) ) );
		if (rs.wasNull()) {
			dto.setIdcircardia( null );
		}
		
		dto.setOtrasstr( rs.getString( COLUMN_OTRASSTR ) );
		dto.setTexto( rs.getString( COLUMN_TEXTO ) );
		
		dto.setTipocardio( new Integer( rs.getInt(COLUMN_TIPOCARDIO) ) );
		if (rs.wasNull()) {
			dto.setTipocardio( null );
		}
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrPacienteHclin dto)
	{
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the specified arbitrary SQL statement
	 */
	public ArrPacienteHclin[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrPacienteHclinDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrPacienteHclinDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the ARR_PACIENTE_HCLIN table that match the specified arbitrary SQL statement
	 */
	public ArrPacienteHclin[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrPacienteHclinDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrPacienteHclinDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
