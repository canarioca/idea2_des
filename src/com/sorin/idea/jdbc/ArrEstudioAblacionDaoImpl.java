/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;


import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import org.apache.tomcat.dbcp.dbcp.DelegatingPreparedStatement;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.util.UtilCodifi;

import oracle.jdbc.OracleTypes;


public class ArrEstudioAblacionDaoImpl extends AbstractDAO implements ArrEstudioAblacionDao
{
	public long getMAX_REGISTROS_SQL() {
		return 10000;
	}
	
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDESTUDIO, SUSTRATO, IDABORDAJE, IDENERGIA, TRADIO, TCRIO, IDNODO, IDDCHA, IDPARASEP, IDIZDA, IDEPI, IDFLUTER, IDFIBRI, IDSEGMEN, IDTV, IDIAM, IDCONVENC, IDNOIAM, IDDAVD, OTRO, OTRATV, IDABLACION, CATETER, COMENTARIOS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDESTUDIO, SUSTRATO, IDABORDAJE, IDENERGIA, TRADIO, TCRIO, IDNODO, IDDCHA, IDPARASEP, IDIZDA, IDEPI, IDFLUTER, IDFIBRI, IDSEGMEN, IDTV, IDIAM, IDCONVENC, IDNOIAM, IDDAVD, OTRO, OTRATV, IDABLACION, CATETER, COMENTARIOS ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, null, ?, ?) ";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDESTUDIO = ?, SUSTRATO = ?, IDABORDAJE = ?, IDENERGIA = ?, TRADIO = ?, TCRIO = ?, IDNODO = ?, IDDCHA = ?, IDPARASEP = ?, IDIZDA = ?, IDEPI = ?, IDFLUTER = ?, IDFIBRI = ?, IDSEGMEN = ?, IDTV = ?, IDIAM = ?, IDCONVENC = ?, IDNOIAM = ?, IDDAVD = ?, OTRO = ?, OTRATV = ?, IDABLACION = ?, CATETER = ?, COMENTARIOS= ? WHERE IDESTUDIO = ? AND IDABLACION = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDESTUDIO = ? AND IDABLACION = ?";
	protected final String SQL_DELETE_CHICO = "DELETE FROM " + getTableName() + " WHERE IDESTUDIO = ?";

	/** 
	 * Index of column IDESTUDIO
	 */
	protected static final int COLUMN_IDESTUDIO = 1;

	/** 
	 * Index of column SUSTRATO
	 */
	protected static final int COLUMN_SUSTRATO = 2;

	/** 
	 * Index of column IDABORDAJE
	 */
	protected static final int COLUMN_IDABORDAJE = 3;

	/** 
	 * Index of column IDENERGIA
	 */
	protected static final int COLUMN_IDENERGIA = 4;

	/** 
	 * Index of column TRADIO
	 */
	protected static final int COLUMN_TRADIO = 5;

	/** 
	 * Index of column TCRIO
	 */
	protected static final int COLUMN_TCRIO = 6;

	/** 
	 * Index of column IDNODO
	 */
	protected static final int COLUMN_IDNODO = 7;

	/** 
	 * Index of column IDDCHA
	 */
	protected static final int COLUMN_IDDCHA = 8;

	/** 
	 * Index of column IDPARASEP
	 */
	protected static final int COLUMN_IDPARASEP = 9;

	/** 
	 * Index of column IDIZDA
	 */
	protected static final int COLUMN_IDIZDA = 10;

	/** 
	 * Index of column IDEPI
	 */
	protected static final int COLUMN_IDEPI = 11;

	/** 
	 * Index of column IDFLUTER
	 */
	protected static final int COLUMN_IDFLUTER = 12;

	/** 
	 * Index of column IDFIBRI
	 */
	protected static final int COLUMN_IDFIBRI = 13;

	/** 
	 * Index of column IDSEGMEN
	 */
	protected static final int COLUMN_IDSEGMEN = 14;

	/** 
	 * Index of column IDTV
	 */
	protected static final int COLUMN_IDTV = 15;

	/** 
	 * Index of column IDIAM
	 */
	protected static final int COLUMN_IDIAM = 16;

	/** 
	 * Index of column IDCONVENC
	 */
	protected static final int COLUMN_IDCONVENC = 17;

	/** 
	 * Index of column IDNOIAM
	 */
	protected static final int COLUMN_IDNOIAM = 18;

	/** 
	 * Index of column IDDAVD
	 */
	protected static final int COLUMN_IDDAVD = 19;

	/** 
	 * Index of column OTRO
	 */
	protected static final int COLUMN_OTRO = 20;
	
	/** 
	 * Index of column OTRATV
	 */
	protected static final int COLUMN_OTRATV = 21;
	
	protected static final int COLUMN_IDABLACION = 22;
	
	protected static final int COLUMN_CATETER = 23;
	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 24;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 24;

	/** 
	 * Index of primary-key column IDABLACION
	 */
	protected static final int PK_COLUMN_IDESTUDIO = 1;
	
	/** 
	 * Index of primary-key column IDABLACION
	 */
	protected static final int PK_COLUMN_IDABLACION = 2;

	/** 
	 * Inserts a new row in the ARR_ESTUDIO_ABLACION table.
	 */
	public ArrEstudioAblacionPk insert(ArrEstudioAblacion dto) throws ArrEstudioAblacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			
			int index = 1;
			stmt.setLong( index++, dto.getIdestudio() );
			
			if (dto.getSustrato() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getSustrato() );
			}
		
			if (dto.getIdabordaje() == null) {
				stmt.setNull( index++, 0);
			} else {
				stmt.setLong( index++, dto.getIdabordaje() );
			}
		
			if (dto.getIdenergia() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdenergia() );
			}
		
			stmt.setString( index++, dto.getTradio() );
			stmt.setString( index++, dto.getTcrio() );
			if (dto.getIdnodo() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdnodo() );
			}
		
			if (dto.getIddcha() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIddcha() );
			}
		
			stmt.setString( index++, dto.getIdparasep() );
		
			if (dto.getIdizda() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdizda() );
			}
		
			if (dto.getIdepi() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdepi() );
			}
		
			if (dto.getIdfluter() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdfluter() );
			}
		
			if (dto.getIdfibri() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdfibri() );
			}
		
			if (dto.getIdsegmen() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdsegmen() );
			}
		
			if (dto.getIdtv() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdtv() );
			}
		
			if (dto.getIdiam() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdiam() );
			}
		
			if (dto.getIdconvenc() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdconvenc() );
			}
		
			if (dto.getIdnoiam() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdnoiam() );
			}
		
			if (dto.getIddavd() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIddavd() );
			}
		
			stmt.setString( index++, dto.getOtro() );
			stmt.setString( index++, dto.getOtratv() );
			stmt.setString( index++, dto.getCateter() );
			stmt.setString( index++, dto.getComentarios() );
			int rows = stmt.executeUpdate();
			stmt = null;
			stmt = conn.prepareStatement("SELECT LAST_INSERT_ID() id");
			ResultSet a = stmt.executeQuery();
			while (a.next()) {
				dto.setIdablacion((int) a.getLong(1));
			}
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.insercion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			throw new ArrEstudioAblacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the ARR_ESTUDIO_ABLACION table.
	 */
	public void update(ArrEstudioAblacionPk pk, ArrEstudioAblacion dto) throws ArrEstudioAblacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdestudio() == null) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setLong( index++, dto.getIdestudio() );
			}
		
			if (dto.getSustrato() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getSustrato() );
			}
		
			if (dto.getIdabordaje() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdabordaje() );
			}
		
			if (dto.getIdenergia() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdenergia() );
			}
		
			stmt.setString( index++, dto.getTradio() );
			stmt.setString( index++, dto.getTcrio() );
			if (dto.getIdnodo() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdnodo() );
			}
		
			if (dto.getIddcha() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIddcha() );
			}
		
			stmt.setString( index++, dto.getIdparasep() );
		
			if (dto.getIdizda() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdizda() );
			}
		
			if (dto.getIdepi() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdepi() );
			}
		
			if (dto.getIdfluter() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdfluter() );
			}
		
			if (dto.getIdfibri() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdfibri() );
			}
		
			if (dto.getIdsegmen() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdsegmen() );
			}
		
			if (dto.getIdtv() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdtv() );
			}
		
			if (dto.getIdiam() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdiam() );
			}
		
			if (dto.getIdconvenc() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdconvenc() );
			}
		
			if (dto.getIdnoiam() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdnoiam() );
			}
		
			if (dto.getIddavd() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIddavd() );
			}
		
			stmt.setString( index++, dto.getOtro() );
			stmt.setString( index++, dto.getOtratv() );
			if (dto.getIdablacion() == null) {
				stmt.setInt( index++, 0 );
			} else {
				stmt.setLong( index++, dto.getIdablacion() );
			}
			stmt.setString( index++, dto.getCateter() );
			stmt.setString( index++, dto.getComentarios() );
			if (pk.getIdestudio() != null) {
				stmt.setInt( 25, pk.getIdestudio().intValue() );
			} else {
				stmt.setNull(25, java.sql.Types.INTEGER);
			}
			
			if (pk.getIdablacion() != null) {
				stmt.setInt( 26, pk.getIdablacion().intValue() );
			} else {
				stmt.setNull(26, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrEstudioAblacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the ARR_ESTUDIO_ABLACION table.
	 */
	public void delete(ArrEstudioAblacionPk pk) throws ArrEstudioAblacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdestudio() != null) {
				stmt.setInt( 1, pk.getIdestudio().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
			
			if (pk.getIdablacion() != null) {
				stmt.setInt( 2, pk.getIdablacion().intValue() );
			} else {
				stmt.setNull(2, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(pk.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			throw new ArrEstudioAblacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	public void delete(Integer idestudio) throws ArrEstudioAblacionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE_CHICO );
			if (idestudio != null) {
				stmt.setInt( 1, idestudio.intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrEstudioAblacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the ARR_ESTUDIO_ABLACION table that matches the specified primary-key value.
	 */
	public ArrEstudioAblacion findByPrimaryKey(ArrEstudioAblacionPk pk) throws ArrEstudioAblacionDaoException
	{
		return findByPrimaryKey( pk.getIdestudio(), pk.getIdablacion() );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDABLACION = :idablacion'.
	 */
	public ArrEstudioAblacion findByPrimaryKey(Integer idestudio, Integer sustrato) throws ArrEstudioAblacionDaoException
	{
		ArrEstudioAblacion ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDESTUDIO = ? AND IDABLACION = ?", new Object[] { idestudio, sustrato } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria ''.
	 */
	public ArrEstudioAblacion[] findAll() throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDESTUDIO, IDABLACION", null );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDESTUDIO = :idestudio'.
	 */
	public ArrEstudioAblacion[] findWhereIdestudioEquals(long idestudio) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDESTUDIO = ? ORDER BY SUSTRATO DESC", new Object[] {  new Long(idestudio) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'SUSTRATO = :sustrato'.
	 */
	public ArrEstudioAblacion[] findWhereSustratoEquals(long sustrato) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUSTRATO = ? ORDER BY SUSTRATO", new Object[] {  new Long(sustrato) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDABORDAJE = :idabordaje'.
	 */
	public ArrEstudioAblacion[] findWhereIdabordajeEquals(long idabordaje) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDABORDAJE = ? ORDER BY IDABORDAJE", new Object[] {  new Long(idabordaje) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDENERGIA = :idenergia'.
	 */
	public ArrEstudioAblacion[] findWhereIdenergiaEquals(long idenergia) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDENERGIA = ? ORDER BY IDENERGIA", new Object[] {  new Long(idenergia) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'TRADIO = :tradio'.
	 */
	public ArrEstudioAblacion[] findWhereTradioEquals(String tradio) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TRADIO = ? ORDER BY TRADIO", new Object[] { tradio } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'TCRIO = :tcrio'.
	 */
	public ArrEstudioAblacion[] findWhereTcrioEquals(String tcrio) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TCRIO = ? ORDER BY TCRIO", new Object[] { tcrio } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDNODO = :idnodo'.
	 */
	public ArrEstudioAblacion[] findWhereIdnodoEquals(long idnodo) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDNODO = ? ORDER BY IDNODO", new Object[] {  new Long(idnodo) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDDCHA = :iddcha'.
	 */
	public ArrEstudioAblacion[] findWhereIddchaEquals(long iddcha) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDDCHA = ? ORDER BY IDDCHA", new Object[] {  new Long(iddcha) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDPARASEP = :idparasep'.
	 */
	public ArrEstudioAblacion[] findWhereIdparasepEquals(long idparasep) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPARASEP = ? ORDER BY IDPARASEP", new Object[] {  new Long(idparasep) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDIZDA = :idizda'.
	 */
	public ArrEstudioAblacion[] findWhereIdizdaEquals(long idizda) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDIZDA = ? ORDER BY IDIZDA", new Object[] {  new Long(idizda) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDEPI = :idepi'.
	 */
	public ArrEstudioAblacion[] findWhereIdepiEquals(long idepi) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDEPI = ? ORDER BY IDEPI", new Object[] {  new Long(idepi) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDFLUTER = :idfluter'.
	 */
	public ArrEstudioAblacion[] findWhereIdfluterEquals(long idfluter) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDFLUTER = ? ORDER BY IDFLUTER", new Object[] {  new Long(idfluter) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDFIBRI = :idfibri'.
	 */
	public ArrEstudioAblacion[] findWhereIdfibriEquals(long idfibri) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDFIBRI = ? ORDER BY IDFIBRI", new Object[] {  new Long(idfibri) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDSEGMEN = :idsegmen'.
	 */
	public ArrEstudioAblacion[] findWhereIdsegmenEquals(long idsegmen) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDSEGMEN = ? ORDER BY IDSEGMEN", new Object[] {  new Long(idsegmen) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDTV = :idtv'.
	 */
	public ArrEstudioAblacion[] findWhereIdtvEquals(long idtv) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDTV = ? ORDER BY IDTV", new Object[] {  new Long(idtv) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDIAM = :idiam'.
	 */
	public ArrEstudioAblacion[] findWhereIdiamEquals(long idiam) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDIAM = ? ORDER BY IDIAM", new Object[] {  new Long(idiam) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDCONVENC = :idconvenc'.
	 */
	public ArrEstudioAblacion[] findWhereIdconvencEquals(long idconvenc) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDCONVENC = ? ORDER BY IDCONVENC", new Object[] {  new Long(idconvenc) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDNOIAM = :idnoiam'.
	 */
	public ArrEstudioAblacion[] findWhereIdnoiamEquals(long idnoiam) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDNOIAM = ? ORDER BY IDNOIAM", new Object[] {  new Long(idnoiam) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDDAVD = :iddavd'.
	 */
	public ArrEstudioAblacion[] findWhereIddavdEquals(long iddavd) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDDAVD = ? ORDER BY IDDAVD", new Object[] {  new Long(iddavd) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'OTRO = :otro'.
	 */
	public ArrEstudioAblacion[] findWhereOtroEquals(String otro) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OTRO = ? ORDER BY OTRO", new Object[] { otro } );
	}
	/** 
	 * Returns all rows from the arr_estudio_ablacion table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ArrEstudioAblacion[] findWhereComentariosEquals(String comentarios) throws ArrEstudioAblacionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/**
	 * Method 'ArrEstudioAblacionDaoImpl'
	 * 
	 */
	public ArrEstudioAblacionDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ArrEstudioAblacionDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ArrEstudioAblacionDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrEstudioAblacionDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		//return "idea.ARR_ESTUDIO_ABLACION";
		return "idea.arr_estudio_ablacion";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrEstudioAblacion fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrEstudioAblacion dto = new ArrEstudioAblacion();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrEstudioAblacion[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrEstudioAblacion dto = new ArrEstudioAblacion();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrEstudioAblacion ret[] = new ArrEstudioAblacion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
	
	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrEstudioAblacion dto, ResultSet rs) throws SQLException
	{
		dto.setIdestudio( rs.getInt( COLUMN_IDESTUDIO ) );
		if (rs.wasNull()) {
			dto.setIdestudio( null );
		}
		
		dto.setSustrato( rs.getInt( COLUMN_SUSTRATO ) );
		if (rs.wasNull()) {
			dto.setSustrato( null );
		}
		
		dto.setIdabordaje( rs.getInt( COLUMN_IDABORDAJE ) );
		if (rs.wasNull()) {
			dto.setIdabordaje( null );
		}
		
		dto.setIdenergia( rs.getInt( COLUMN_IDENERGIA ) );
		if (rs.wasNull()) {
			dto.setIdenergia( null );
		}
		
		dto.setTradio( rs.getString( COLUMN_TRADIO ) );
		dto.setTcrio( rs.getString( COLUMN_TCRIO ) );
		dto.setIdnodo( rs.getInt( COLUMN_IDNODO ) );
		if (rs.wasNull()) {
			dto.setIdnodo( null );
		}
		
		dto.setIddcha( rs.getInt( COLUMN_IDDCHA ) );
		if (rs.wasNull()) {
			dto.setIddcha( null );
		}
		
		dto.setIdparasep( rs.getString( COLUMN_IDPARASEP ) );
		
		dto.setIdizda( rs.getInt( COLUMN_IDIZDA ) );
		if (rs.wasNull()) {
			dto.setIdizda( null );
		}
		
		dto.setIdepi( rs.getInt( COLUMN_IDEPI ) );
		if (rs.wasNull()) {
			dto.setIdepi( null );
		}
		
		dto.setIdfluter( rs.getInt( COLUMN_IDFLUTER ) );
		if (rs.wasNull()) {
			dto.setIdfluter( null );
		}
		
		dto.setIdfibri( rs.getInt( COLUMN_IDFIBRI ) );
		if (rs.wasNull()) {
			dto.setIdfibri( null );
		}
		
		dto.setIdsegmen( rs.getInt( COLUMN_IDSEGMEN ) );
		if (rs.wasNull()) {
			dto.setIdsegmen( null );
		}
		
		dto.setIdtv( rs.getInt( COLUMN_IDTV ) );
		if (rs.wasNull()) {
			dto.setIdtv( null );
		}
		
		dto.setIdiam( rs.getInt( COLUMN_IDIAM ) );
		if (rs.wasNull()) {
			dto.setIdiam( null );
		}
		
		dto.setIdconvenc( rs.getInt( COLUMN_IDCONVENC ) );
		if (rs.wasNull()) {
			dto.setIdconvenc( null );
		}
		
		dto.setIdnoiam( rs.getInt( COLUMN_IDNOIAM ) );
		if (rs.wasNull()) {
			dto.setIdnoiam( null );
		}
		
		dto.setIddavd( rs.getInt( COLUMN_IDDAVD ) );
		if (rs.wasNull()) {
			dto.setIddavd( null );
		}
		
		dto.setOtro( rs.getString( COLUMN_OTRO ) );
		dto.setOtratv( rs.getString( COLUMN_OTRATV ) );
		dto.setIdablacion( rs.getInt( COLUMN_IDABLACION ) );
		if (rs.wasNull()) {
			dto.setIdablacion( null );
		}
		dto.setCateter( rs.getString( COLUMN_CATETER ) );
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrEstudioAblacion dto)
	{
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the specified arbitrary SQL statement
	 */
	public ArrEstudioAblacion[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrEstudioAblacionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrEstudioAblacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	public ArrayList<ArrayList<Object>> findByDynamicSelect(String sql) throws ArrEstudioAblacionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return UtilCodifi.Results2Array(rs);
		}
		catch (Exception _e) {
			throw new ArrEstudioAblacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the specified arbitrary SQL statement
	 */
	public ArrEstudioAblacion[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrEstudioAblacionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrEstudioAblacionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	public ArrayList<ArrayList<Object>> getEstadisticas(ArrEstudioAblacion ablacion) throws ArrEstudioAblacionDaoException
	{
		StringBuffer sql = new StringBuffer();
		sql.append("select pac.nhc paciente,");
		sql.append("ab.idabordaje ABORDAJE,");
		sql.append("ab.idenergia ENERGIA,");
		sql.append("ab.tcrio TCRIO,");
		sql.append("ab.tradio TRADIO,");
		sql.append("ab.cateter CATETER,");
		sql.append("ab.idnodo SUSTRATO_N1,");
		sql.append("ab.iddcha SUSTRATO_N2,");
		sql.append("res.idres RESULTADO,");
		sql.append("res.idtin EXITO,");
		sql.append("res.idparcial PARCIAL,");
		sql.append("com.idcomplicacion COMPLICACION,");
		sql.append("com.idmuerte MUERTE,");
		sql.append("com.otros OTRAS_COMP,");
		sql.append("ab.sustrato SUSTRATO");
		sql.append(" from arr_estudio_ablacion ab,");
		sql.append("ARR_ESTUDIO E,");
		sql.append("ARR_PACIENTES PAC,");
		sql.append("arr_estudio_resultado res,");
		sql.append("arr_ablacion_complica com"); 
		sql.append(" where ab.idestudio = e.idestudio");
		sql.append(" and e.idpaciente = pac.codigo");
		sql.append(" and res.idestudio = e.idestudio");
		sql.append(" and res.idablacion = ab.idablacion");
		sql.append(" and com.idablacion = ab.idablacion");
		sql.append(" and com.idestudio = ab.idestudio");
		sql.append(generaWhere(ablacion));
		sql.append(" order by 1");

		return findByDynamicSelect(sql.toString());
	}

	private Object generaWhere(ArrEstudioAblacion ablacion) {
		String where = "";
		if(ablacion.getIdnodo() != null && ablacion.getIdnodo() >= 0)
			where += " and ab.idnodo = " + ablacion.getIdnodo();
		if(ablacion.getResultadodto() != null && 
				ablacion.getResultadodto().getIdres() != null && 
				ablacion.getResultadodto().getIdres() >= 0)
			where += " and res.idres = " + ablacion.getResultadodto().getIdres();
		if(ablacion.getComplicacion() != null && ablacion.getListacomplicacion().size()>0 &&
				ablacion.getListacomplicacion().get(0).getIdcomplicacion() != null && 
				ablacion.getListacomplicacion().get(0).getIdcomplicacion() >= 0)
			where += " and com.idcomplicacion = " + ablacion.getListacomplicacion().get(0).getIdcomplicacion();
		return where;
	}

	
}
