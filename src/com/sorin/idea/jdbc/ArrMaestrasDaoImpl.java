/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ArrMaestrasDaoImpl extends AbstractDAO implements ArrMaestrasDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT CODIGO, TIPO, upper(VALOR), ACTIVO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( CODIGO, TIPO, VALOR, ACTIVO ) VALUES ( ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET CODIGO = ?, TIPO = ?, VALOR = ?, ACTIVO = ? WHERE CODIGO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE CODIGO = ?";

	/** 
	 * Index of column CODIGO
	 */
	protected static final int COLUMN_CODIGO = 1;

	/** 
	 * Index of column TIPO
	 */
	protected static final int COLUMN_TIPO = 2;

	/** 
	 * Index of column VALOR
	 */
	protected static final int COLUMN_VALOR = 3;

	/** 
	 * Index of column ACTIVO
	 */
	protected static final int COLUMN_ACTIVO = 4;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 4;

	/** 
	 * Index of primary-key column CODIGO
	 */
	protected static final int PK_COLUMN_CODIGO = 1;

	/** 
	 * Inserts a new row in the arr_maestras table.
	 */
	public ArrMaestrasPk insert(ArrMaestras dto) throws ArrMaestrasDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getCodigo() != null) {
				stmt.setInt( index++, dto.getCodigo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTipo() != null) {
				stmt.setInt( index++, dto.getTipo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getValor() );
			if (dto.getActivo() != null) {
				stmt.setInt( index++, dto.getActivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.insercion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setCodigo( new Integer( rs.getInt(1) ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrMaestrasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the arr_maestras table.
	 */
	public void update(ArrMaestrasPk pk, ArrMaestras dto) throws ArrMaestrasDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getCodigo() != null) {
				stmt.setInt( index++, dto.getCodigo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTipo() != null) {
				stmt.setInt( index++, dto.getTipo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getValor() );
			if (dto.getActivo() != null) {
				stmt.setInt( index++, dto.getActivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (pk.getCodigo() != null) {
				stmt.setInt( 5, pk.getCodigo().intValue() );
			} else {
				stmt.setNull(5, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrMaestrasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the arr_maestras table.
	 */
	public void delete(ArrMaestrasPk pk) throws ArrMaestrasDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getCodigo() != null) {
				stmt.setInt( 1, pk.getCodigo().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(pk.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrMaestrasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the arr_maestras table that matches the specified primary-key value.
	 */
	public ArrMaestras findByPrimaryKey(ArrMaestrasPk pk) throws ArrMaestrasDaoException
	{
		return findByPrimaryKey( pk.getCodigo() );
	}

	/** 
	 * Returns all rows from the arr_maestras table that match the criteria 'CODIGO = :codigo'.
	 */
	public ArrMaestras findByPrimaryKey(Integer codigo) throws ArrMaestrasDaoException
	{
		ArrMaestras ret[] = findByDynamicSelect( SQL_SELECT + " WHERE CODIGO = ?", new Object[] { codigo } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the arr_maestras table that match the criteria ''.
	 */
	public ArrMaestras[] findAll() throws ArrMaestrasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY CODIGO", null );
	}

	/** 
	 * Returns all rows from the arr_maestras table that match the criteria 'CODIGO = :codigo'.
	 */
	public ArrMaestras[] findWhereCodigoEquals(int codigo) throws ArrMaestrasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CODIGO = ? ORDER BY CODIGO", new Object[] {  new Integer(codigo) } );
	}

	/** 
	 * Returns all rows from the arr_maestras table that match the criteria 'TIPO = :tipo'.
	 */
	public ArrMaestras[] findWhereTipoEquals(int tipo) throws ArrMaestrasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO = ? ORDER BY TIPO", new Object[] {  new Integer(tipo) } );
	}

	/** 
	 * Returns all rows from the arr_maestras table that match the criteria 'VALOR = :valor'.
	 */
	public ArrMaestras[] findWhereValorEquals(String valor) throws ArrMaestrasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VALOR = ? ORDER BY VALOR", new Object[] { valor } );
	}

	/** 
	 * Returns all rows from the arr_maestras table that match the criteria 'ACTIVO = :activo'.
	 */
	public ArrMaestras[] findWhereActivoEquals(int activo) throws ArrMaestrasDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTIVO = ? ORDER BY ACTIVO", new Object[] {  new Integer(activo) } );
	}

	/**
	 * Method 'ArrMaestrasDaoImpl'
	 * 
	 */
	public ArrMaestrasDaoImpl()
	{
	}
	public ArrMaestrasDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ArrMaestrasDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ArrMaestrasDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrMaestrasDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.arr_maestras";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrMaestras fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrMaestras dto = new ArrMaestras();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrMaestras[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrMaestras dto = new ArrMaestras();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrMaestras ret[] = new ArrMaestras[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrMaestras dto, ResultSet rs) throws SQLException
	{
		dto.setCodigo( new Integer( rs.getInt(COLUMN_CODIGO) ) );
		dto.setTipo( new Integer( rs.getInt(COLUMN_TIPO) ) );
		if (rs.wasNull()) {
			dto.setTipo( null );
		}
		
		dto.setValor( rs.getString( COLUMN_VALOR ) );
		dto.setActivo( new Integer( rs.getInt(COLUMN_ACTIVO) ) );
		if (rs.wasNull()) {
			dto.setActivo( null );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrMaestras dto)
	{
	}

	/** 
	 * Returns all rows from the arr_maestras table that match the specified arbitrary SQL statement
	 */
	public ArrMaestras[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrMaestrasDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrMaestrasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the arr_maestras table that match the specified arbitrary SQL statement
	 */
	public ArrMaestras[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrMaestrasDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrMaestrasDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
