/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;

public class ArrMesasEcgDaoImpl extends AbstractDAO implements ArrMesasEcgDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDMESA, IDRITMO, IDCONDUCCION, IDCONDUCCIONNO, IDQRS, IDQRSNO, MORFOLOGIA, COMENTARIOS, RR, PR, QRS, QT, QTC FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDMESA, IDRITMO, IDCONDUCCION, IDCONDUCCIONNO, IDQRS, IDQRSNO, MORFOLOGIA, COMENTARIOS, RR, PR, QRS, QT, QTC ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDMESA = ?, IDRITMO = ?, IDCONDUCCION = ?, IDCONDUCCIONNO = ?, IDQRS = ?, IDQRSNO = ?, MORFOLOGIA = ?, COMENTARIOS = ?, RR = ?, PR = ?, QRS = ?, QT = ?, QTC = ? WHERE IDMESA = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDMESA = ?";

	/** 
	 * Index of column IDMESA
	 */
	protected static final int COLUMN_IDMESA = 1;

	/** 
	 * Index of column IDRITMO
	 */
	protected static final int COLUMN_IDRITMO = 2;

	/** 
	 * Index of column IDCONDUCCION
	 */
	protected static final int COLUMN_IDCONDUCCION = 3;

	/** 
	 * Index of column IDCONDUCCIONNO
	 */
	protected static final int COLUMN_IDCONDUCCIONNO = 4;

	/** 
	 * Index of column IDQRS
	 */
	protected static final int COLUMN_IDQRS = 5;

	/** 
	 * Index of column IDQRSNO
	 */
	protected static final int COLUMN_IDQRSNO = 6;

	/** 
	 * Index of column MORFOLOGIA
	 */
	protected static final int COLUMN_MORFOLOGIA = 7;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 8;

	/** 
	 * Index of column RR
	 */
	protected static final int COLUMN_RR = 9;

	/** 
	 * Index of column PR
	 */
	protected static final int COLUMN_PR = 10;

	/** 
	 * Index of column QRS
	 */
	protected static final int COLUMN_QRS = 11;

	/** 
	 * Index of column QT
	 */
	protected static final int COLUMN_QT = 12;

	/** 
	 * Index of column QTC
	 */
	protected static final int COLUMN_QTC = 13;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column IDMESA
	 */
	protected static final int PK_COLUMN_IDMESA = 1;

	/** 
	 * Inserts a new row in the ARR_MESAS_ECG table.
	 */
	public ArrMesasEcgPk insert(ArrMesasEcg dto) throws ArrMesasEcgDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.getIdmesa() != null) {
				stmt.setInt( index++, dto.getIdmesa().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdritmo() != null) {
				stmt.setInt( index++, dto.getIdritmo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdconduccion() != null) {
				stmt.setInt( index++, dto.getIdconduccion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdconduccionno() != null) {
				stmt.setInt( index++, dto.getIdconduccionno().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdqrs() != null) {
				stmt.setInt( index++, dto.getIdqrs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdqrsno() != null) {
				stmt.setInt( index++, dto.getIdqrsno().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getMorfologia() );
			stmt.setString( index++, dto.getComentarios() );
			stmt.setString( index++, dto.getRr() );
			stmt.setString( index++, dto.getPr() );
			stmt.setString( index++, dto.getQrs() );
			stmt.setString( index++, dto.getQt() );
			stmt.setString( index++, dto.getQtc() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			throw new ArrMesasEcgDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the ARR_MESAS_ECG table.
	 */
	public void update(ArrMesasEcgPk pk, ArrMesasEcg dto) throws ArrMesasEcgDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdmesa() != null) {
				stmt.setInt( index++, dto.getIdmesa().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdritmo() != null) {
				stmt.setInt( index++, dto.getIdritmo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdconduccion() != null) {
				stmt.setInt( index++, dto.getIdconduccion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdconduccionno() != null) {
				stmt.setInt( index++, dto.getIdconduccionno().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdqrs() != null) {
				stmt.setInt( index++, dto.getIdqrs().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdqrsno() != null) {
				stmt.setInt( index++, dto.getIdqrsno().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getMorfologia() );
			stmt.setString( index++, dto.getComentarios() );
			stmt.setString( index++, dto.getRr() );
			stmt.setString( index++, dto.getPr() );
			stmt.setString( index++, dto.getQrs() );
			stmt.setString( index++, dto.getQt() );
			stmt.setString( index++, dto.getQtc() );
			if (pk.getIdmesa() != null) {
				stmt.setInt( 14, pk.getIdmesa().intValue() );
			} else {
				stmt.setNull(14, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrMesasEcgDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the ARR_MESAS_ECG table.
	 */
	public void delete(ArrMesasEcgPk pk) throws ArrMesasEcgDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdmesa() != null) {
				stmt.setInt( 1, pk.getIdmesa().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrMesasEcgDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the ARR_MESAS_ECG table that matches the specified primary-key value.
	 */
	public ArrMesasEcg findByPrimaryKey(ArrMesasEcgPk pk) throws ArrMesasEcgDaoException
	{
		return findByPrimaryKey( pk.getIdmesa() );
	}

	/** 
	 * Returns all rows from the ARR_MESAS_ECG table that match the criteria 'IDMESA = :idmesa'.
	 */
	public ArrMesasEcg findByPrimaryKey(Integer idmesa) throws ArrMesasEcgDaoException
	{
		ArrMesasEcg ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDMESA = ?", new Object[] { idmesa } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the ARR_MESAS_ECG table that match the criteria ''.
	 */
	public ArrMesasEcg[] findAll() throws ArrMesasEcgDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDMESA", null );
	}

	/** 
	 * Returns all rows from the ARR_MESAS_ECG table that match the criteria 'IDMESA = :idmesa'.
	 */
	public ArrMesasEcg[] findByArrMesas(long idmesa) throws ArrMesasEcgDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDMESA = ?", new Object[] {  new Long(idmesa) } );
	}

	/** 
	 * Returns all rows from the ARR_MESAS_ECG table that match the criteria 'IDMESA = :idmesa'.
	 */
	public ArrMesasEcg[] findWhereIdmesaEquals(long idmesa) throws ArrMesasEcgDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDMESA = ? ORDER BY IDMESA", new Object[] {  new Long(idmesa) } );
	}

	/** 
	 * Returns all rows from the ARR_MESAS_ECG table that match the criteria 'IDRITMO = :idritmo'.
	 */
	public ArrMesasEcg[] findWhereIdritmoEquals(long idritmo) throws ArrMesasEcgDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDRITMO = ? ORDER BY IDRITMO", new Object[] {  new Long(idritmo) } );
	}

	/**
	 * Method 'ArrMesasEcgDaoImpl'
	 * 
	 */
	public ArrMesasEcgDaoImpl()
	{
	}
	/**
	 * Method 'ArrMesasEcgDaoImpl'
	 * 
	 */
	public ArrMesasEcgDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ArrMesasEcgDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ArrMesasEcgDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrMesasEcgDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		//return "ARR_MESAS_ECG";
		return "arr_mesas_ecg";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrMesasEcg fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrMesasEcg dto = new ArrMesasEcg();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrMesasEcg[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrMesasEcg dto = new ArrMesasEcg();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrMesasEcg ret[] = new ArrMesasEcg[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrMesasEcg dto, ResultSet rs) throws SQLException
	{
		dto.setIdmesa( new Integer( rs.getInt(COLUMN_IDMESA) ) );
		dto.setIdritmo( new Integer( rs.getInt(COLUMN_IDRITMO) ) );
		if (rs.wasNull()) {
			dto.setIdritmo( null );
		}
		
		dto.setIdconduccion( new Integer( rs.getInt(COLUMN_IDCONDUCCION) ) );
		if (rs.wasNull()) {
			dto.setIdconduccion( null );
		}
		
		dto.setIdconduccionno( new Integer( rs.getInt(COLUMN_IDCONDUCCIONNO) ) );
		if (rs.wasNull()) {
			dto.setIdconduccionno( null );
		}
		
		dto.setIdqrs( new Integer( rs.getInt(COLUMN_IDQRS) ) );
		if (rs.wasNull()) {
			dto.setIdqrs( null );
		}
		
		dto.setIdqrsno( new Integer( rs.getInt(COLUMN_IDQRSNO) ) );
		if (rs.wasNull()) {
			dto.setIdqrsno( null );
		}
		
		dto.setMorfologia( rs.getString( COLUMN_MORFOLOGIA ) );
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setRr( rs.getString( COLUMN_RR ) );
		dto.setPr( rs.getString( COLUMN_PR ) );
		dto.setQrs( rs.getString( COLUMN_QRS ) );
		dto.setQt( rs.getString( COLUMN_QT ) );
		dto.setQtc( rs.getString( COLUMN_QTC ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrMesasEcg dto)
	{
	}

	/** 
	 * Returns all rows from the ARR_MESAS_ECG table that match the specified arbitrary SQL statement
	 */
	public ArrMesasEcg[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrMesasEcgDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrMesasEcgDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the ARR_MESAS_ECG table that match the specified arbitrary SQL statement
	 */
	public ArrMesasEcg[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrMesasEcgDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrMesasEcgDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
