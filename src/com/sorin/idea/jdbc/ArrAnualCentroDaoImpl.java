/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;


import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;

public class ArrAnualCentroDaoImpl extends AbstractDAO implements ArrAnualCentroDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ANIO, HOSPITAL, CODCENTRO, DIRECCION, PROVINCIA, CP, COMUNIDAD, TELEFONO, EXT, FAX, RESPONSABLE, TELCONTACTO, EMAILCONTACTO, IDTIPOHOSPI1, IDTIPOHOSPI2, IDSERVICIO, IDCIRUGIA, POBLACION FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ANIO, HOSPITAL, CODCENTRO, DIRECCION, PROVINCIA, CP, COMUNIDAD, TELEFONO, EXT, FAX, RESPONSABLE, TELCONTACTO, EMAILCONTACTO, IDTIPOHOSPI1, IDTIPOHOSPI2, IDSERVICIO, IDCIRUGIA, POBLACION ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ANIO = ?, HOSPITAL = ?, CODCENTRO = ?, DIRECCION = ?, PROVINCIA = ?, CP = ?, COMUNIDAD = ?, TELEFONO = ?, EXT = ?, FAX = ?, RESPONSABLE = ?, TELCONTACTO = ?, EMAILCONTACTO = ?, IDTIPOHOSPI1 = ?, IDTIPOHOSPI2 = ?, IDSERVICIO = ?, IDCIRUGIA = ?, POBLACION = ? WHERE ANIO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ANIO = ?";

	/** 
	 * Index of column ANIO
	 */
	protected static final int COLUMN_ANIO = 1;

	/** 
	 * Index of column HOSPITAL
	 */
	protected static final int COLUMN_HOSPITAL = 2;

	/** 
	 * Index of column CODCENTRO
	 */
	protected static final int COLUMN_CODCENTRO = 3;

	/** 
	 * Index of column DIRECCION
	 */
	protected static final int COLUMN_DIRECCION = 4;

	/** 
	 * Index of column PROVINCIA
	 */
	protected static final int COLUMN_PROVINCIA = 5;

	/** 
	 * Index of column CP
	 */
	protected static final int COLUMN_CP = 6;

	/** 
	 * Index of column COMUNIDAD
	 */
	protected static final int COLUMN_COMUNIDAD = 7;

	/** 
	 * Index of column TELEFONO
	 */
	protected static final int COLUMN_TELEFONO = 8;

	/** 
	 * Index of column EXT
	 */
	protected static final int COLUMN_EXT = 9;

	/** 
	 * Index of column FAX
	 */
	protected static final int COLUMN_FAX = 10;

	/** 
	 * Index of column RESPONSABLE
	 */
	protected static final int COLUMN_RESPONSABLE = 11;

	/** 
	 * Index of column TELCONTACTO
	 */
	protected static final int COLUMN_TELCONTACTO = 12;

	/** 
	 * Index of column EMAILCONTACTO
	 */
	protected static final int COLUMN_EMAILCONTACTO = 13;

	/** 
	 * Index of column IDTIPOHOSPI1
	 */
	protected static final int COLUMN_IDTIPOHOSPI1 = 14;

	/** 
	 * Index of column IDTIPOHOSPI2
	 */
	protected static final int COLUMN_IDTIPOHOSPI2 = 15;

	/** 
	 * Index of column IDSERVICIO
	 */
	protected static final int COLUMN_IDSERVICIO = 16;

	/** 
	 * Index of column IDCIRUGIA
	 */
	protected static final int COLUMN_IDCIRUGIA = 17;

	/** 
	 * Index of column POBLACION
	 */
	protected static final int COLUMN_POBLACION = 18;
	
	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 18;

	/** 
	 * Index of primary-key column ANIO
	 */
	protected static final int PK_COLUMN_ANIO = 1;

	/** 
	 * Inserts a new row in the ARR_ANUAL_CENTRO table.
	 */
	public ArrAnualCentroPk insert(ArrAnualCentro dto) throws ArrAnualCentroDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.getAnio() != null) {
				stmt.setInt( index++, dto.getAnio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getHospital() );
			stmt.setString( index++, dto.getCodcentro() );
			stmt.setString( index++, dto.getDireccion() );
			stmt.setString( index++, dto.getProvincia() );
			stmt.setString( index++, dto.getCp() );
			stmt.setString( index++, dto.getComunidad() );
			stmt.setString( index++, dto.getTelefono() );
			stmt.setString( index++, dto.getExt() );
			stmt.setString( index++, dto.getFax() );
			stmt.setString( index++, dto.getResponsable() );
			stmt.setString( index++, dto.getTelcontacto() );
			stmt.setString( index++, dto.getEmailcontacto() );
			if (dto.getIdtipohospi1() != null) {
				stmt.setInt( index++, dto.getIdtipohospi1().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdtipohospi2() != null) {
				stmt.setInt( index++, dto.getIdtipohospi2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdservicio() != null) {
				stmt.setInt( index++, dto.getIdservicio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdcirugia() != null) {
				stmt.setInt( index++, dto.getIdcirugia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			stmt.setString( index++, dto.getPoblacion() );
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			throw new ArrAnualCentroDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the ARR_ANUAL_CENTRO table.
	 */
	public void update(ArrAnualCentroPk pk, ArrAnualCentro dto) throws ArrAnualCentroDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getAnio() != null) {
				stmt.setInt( index++, dto.getAnio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getHospital() );
			stmt.setString( index++, dto.getCodcentro() );
			stmt.setString( index++, dto.getDireccion() );
			stmt.setString( index++, dto.getProvincia() );
			stmt.setString( index++, dto.getCp() );
			stmt.setString( index++, dto.getComunidad() );
			stmt.setString( index++, dto.getTelefono() );
			stmt.setString( index++, dto.getExt() );
			stmt.setString( index++, dto.getFax() );
			stmt.setString( index++, dto.getResponsable() );
			stmt.setString( index++, dto.getTelcontacto() );
			stmt.setString( index++, dto.getEmailcontacto() );
			if (dto.getIdtipohospi1() != null) {
				stmt.setInt( index++, dto.getIdtipohospi1().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdtipohospi2() != null) {
				stmt.setInt( index++, dto.getIdtipohospi2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdservicio() != null) {
				stmt.setInt( index++, dto.getIdservicio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdcirugia() != null) {
				stmt.setInt( index++, dto.getIdcirugia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			stmt.setString( index++, dto.getPoblacion() );
			if (pk.getAnio() != null) {
				stmt.setInt( 19, pk.getAnio().intValue() );
			} else {
				stmt.setNull(19, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrAnualCentroDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the ARR_ANUAL_CENTRO table.
	 */
	public void delete(ArrAnualCentroPk pk) throws ArrAnualCentroDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getAnio() != null) {
				stmt.setInt( 1, pk.getAnio().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrAnualCentroDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the ARR_ANUAL_CENTRO table that matches the specified primary-key value.
	 */
	public ArrAnualCentro findByPrimaryKey(ArrAnualCentroPk pk) throws ArrAnualCentroDaoException
	{
		return findByPrimaryKey( pk.getAnio() );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'ANIO = :anio'.
	 */
	public ArrAnualCentro findByPrimaryKey(Integer anio) throws ArrAnualCentroDaoException
	{
		ArrAnualCentro ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ANIO = ?", new Object[] { anio } );
		return ret.length==0 ? null : ret[0];
	}
	
	public ArrAnualCentro findByMaxAnio() throws ArrAnualCentroDaoException{
		ArrAnualCentro ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ANIO = (select max(anio) from "+getTableName()+")", null );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria ''.
	 */
	public ArrAnualCentro[] findAll() throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ANIO", null );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'ANIO = :anio'.
	 */
	public ArrAnualCentro[] findWhereAnioEquals(long anio) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANIO = ? ORDER BY ANIO", new Object[] {  new Long(anio) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'HOSPITAL = :hospital'.
	 */
	public ArrAnualCentro[] findWhereHospitalEquals(String hospital) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HOSPITAL = ? ORDER BY HOSPITAL", new Object[] { hospital } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'CODCENTRO = :codcentro'.
	 */
	public ArrAnualCentro[] findWhereCodcentroEquals(String codcentro) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CODCENTRO = ? ORDER BY CODCENTRO", new Object[] { codcentro } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'DIRECCION = :direccion'.
	 */
	public ArrAnualCentro[] findWhereDireccionEquals(String direccion) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DIRECCION = ? ORDER BY DIRECCION", new Object[] { direccion } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'PROVINCIA = :provincia'.
	 */
	public ArrAnualCentro[] findWhereProvinciaEquals(String provincia) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROVINCIA = ? ORDER BY PROVINCIA", new Object[] { provincia } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'CP = :cp'.
	 */
	public ArrAnualCentro[] findWhereCpEquals(String cp) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CP = ? ORDER BY CP", new Object[] { cp } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'COMUNIDAD = :comunidad'.
	 */
	public ArrAnualCentro[] findWhereComunidadEquals(String comunidad) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMUNIDAD = ? ORDER BY COMUNIDAD", new Object[] { comunidad } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'TELEFONO = :telefono'.
	 */
	public ArrAnualCentro[] findWhereTelefonoEquals(String telefono) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TELEFONO = ? ORDER BY TELEFONO", new Object[] { telefono } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'EXT = :ext'.
	 */
	public ArrAnualCentro[] findWhereExtEquals(String ext) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EXT = ? ORDER BY EXT", new Object[] { ext } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'FAX = :fax'.
	 */
	public ArrAnualCentro[] findWhereFaxEquals(String fax) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FAX = ? ORDER BY FAX", new Object[] { fax } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'RESPONSABLE = :responsable'.
	 */
	public ArrAnualCentro[] findWhereResponsableEquals(String responsable) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RESPONSABLE = ? ORDER BY RESPONSABLE", new Object[] { responsable } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'TELCONTACTO = :telcontacto'.
	 */
	public ArrAnualCentro[] findWhereTelcontactoEquals(String telcontacto) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TELCONTACTO = ? ORDER BY TELCONTACTO", new Object[] { telcontacto } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'EMAILCONTACTO = :emailcontacto'.
	 */
	public ArrAnualCentro[] findWhereEmailcontactoEquals(String emailcontacto) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EMAILCONTACTO = ? ORDER BY EMAILCONTACTO", new Object[] { emailcontacto } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'IDTIPOHOSPI1 = :idtipohospi1'.
	 */
	public ArrAnualCentro[] findWhereIdtipohospi1Equals(long idtipohospi1) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDTIPOHOSPI1 = ? ORDER BY IDTIPOHOSPI1", new Object[] {  new Long(idtipohospi1) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'IDTIPOHOSPI2 = :idtipohospi2'.
	 */
	public ArrAnualCentro[] findWhereIdtipohospi2Equals(long idtipohospi2) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDTIPOHOSPI2 = ? ORDER BY IDTIPOHOSPI2", new Object[] {  new Long(idtipohospi2) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'IDSERVICIO = :idservicio'.
	 */
	public ArrAnualCentro[] findWhereIdservicioEquals(long idservicio) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDSERVICIO = ? ORDER BY IDSERVICIO", new Object[] {  new Long(idservicio) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the criteria 'IDCIRUGIA = :idcirugia'.
	 */
	public ArrAnualCentro[] findWhereIdcirugiaEquals(long idcirugia) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDCIRUGIA = ? ORDER BY IDCIRUGIA", new Object[] {  new Long(idcirugia) } );
	}

	/** 
	 * Returns all rows from the arr_anual_centro table that match the criteria 'POBLACION = :poblacion'.
	 */
	public ArrAnualCentro[] findWherePoblacionEquals(String poblacion) throws ArrAnualCentroDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE POBLACION = ? ORDER BY POBLACION", new Object[] { poblacion } );
	}
	
	/**
	 * Method 'ArrAnualCentroDaoImpl'
	 * 
	 */
	public ArrAnualCentroDaoImpl()
	{
	}

	/**
	 * Method 'ArrAnualCentroDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrAnualCentroDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		//return "idea.ARR_ANUAL_CENTRO";
		return "idea.arr_anual_centro";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrAnualCentro fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrAnualCentro dto = new ArrAnualCentro();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrAnualCentro[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrAnualCentro dto = new ArrAnualCentro();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrAnualCentro ret[] = new ArrAnualCentro[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrAnualCentro dto, ResultSet rs) throws SQLException
	{
		dto.setAnio( new Integer( rs.getInt(COLUMN_ANIO) ) );
		dto.setHospital( rs.getString( COLUMN_HOSPITAL ) );
		dto.setCodcentro( rs.getString( COLUMN_CODCENTRO ) );
		dto.setDireccion( rs.getString( COLUMN_DIRECCION ) );
		dto.setProvincia( rs.getString( COLUMN_PROVINCIA ) );
		dto.setCp( rs.getString( COLUMN_CP ) );
		dto.setComunidad( rs.getString( COLUMN_COMUNIDAD ) );
		dto.setTelefono( rs.getString( COLUMN_TELEFONO ) );
		dto.setExt( rs.getString( COLUMN_EXT ) );
		dto.setFax( rs.getString( COLUMN_FAX ) );
		dto.setResponsable( rs.getString( COLUMN_RESPONSABLE ) );
		dto.setTelcontacto( rs.getString( COLUMN_TELCONTACTO ) );
		dto.setEmailcontacto( rs.getString( COLUMN_EMAILCONTACTO ) );
		dto.setIdtipohospi1( new Integer( rs.getInt(COLUMN_IDTIPOHOSPI1) ) );
		if (rs.wasNull()) {
			dto.setIdtipohospi1( null );
		}
		
		dto.setIdtipohospi2( new Integer( rs.getInt(COLUMN_IDTIPOHOSPI2) ) );
		if (rs.wasNull()) {
			dto.setIdtipohospi2( null );
		}
		
		dto.setIdservicio( new Integer( rs.getInt(COLUMN_IDSERVICIO) ) );
		if (rs.wasNull()) {
			dto.setIdservicio( null );
		}
		
		dto.setIdcirugia( new Integer( rs.getInt(COLUMN_IDCIRUGIA) ) );
		if (rs.wasNull()) {
			dto.setIdcirugia( null );
		}
		dto.setPoblacion( rs.getString( COLUMN_POBLACION ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrAnualCentro dto)
	{
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the specified arbitrary SQL statement
	 */
	public ArrAnualCentro[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrAnualCentroDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrAnualCentroDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_CENTRO table that match the specified arbitrary SQL statement
	 */
	public ArrAnualCentro[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrAnualCentroDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrAnualCentroDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
