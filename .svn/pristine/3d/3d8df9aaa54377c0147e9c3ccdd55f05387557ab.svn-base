/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ProtSincopeDaoImpl extends AbstractDAO implements ProtSincopeDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDPROTSINCOPE, ANA_REALIZADA, ANA_FECHA, ANA_HEMOGLOBINA, ANA_DDIMERO, ANA_LACTATO, ANA_COMENTARIOS, PDIAG_MONITORIZACION, PDIAG_MONITORIZACION_RES, PDIAG_ELR, PDIAG_ELR_RES, PDIAG_MESAB, PDIAG_MESAB_RES, PDIAG_ECOGRAFIA, PDIAG_ECOGRAFIA_RES, PDIAG_PESFUERZO, PDIAG_PESFUERZO_RES, PDIAG_ILR, PDIAG_ILR_RES, PDIAG_ECGCONT, PDIAG_ECGCONT_RES, PDIAG_EEF, PDIAG_EEF_RES, PDIAG_RXTORAX, PDIAG_RXTORAX_RES, PDIAG_TACCER, PDIAG_TACCER_RES, PDIAG_TACTOR, PDIAG_TACTOR_RES, PDIAG_ANGIOTAC, PDIAG_ANGIOTAC_RES, RES_DIAGFIN, RES_DECISIONCLIN, RES_FECHA, RES_COMENTARIOS, RES_OPERADOR FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDPROTSINCOPE, ANA_REALIZADA, ANA_FECHA, ANA_HEMOGLOBINA, ANA_DDIMERO, ANA_LACTATO, ANA_COMENTARIOS, PDIAG_MONITORIZACION, PDIAG_MONITORIZACION_RES, PDIAG_ELR, PDIAG_ELR_RES, PDIAG_MESAB, PDIAG_MESAB_RES, PDIAG_ECOGRAFIA, PDIAG_ECOGRAFIA_RES, PDIAG_PESFUERZO, PDIAG_PESFUERZO_RES, PDIAG_ILR, PDIAG_ILR_RES, PDIAG_ECGCONT, PDIAG_ECGCONT_RES, PDIAG_EEF, PDIAG_EEF_RES, PDIAG_RXTORAX, PDIAG_RXTORAX_RES, PDIAG_TACCER, PDIAG_TACCER_RES, PDIAG_TACTOR, PDIAG_TACTOR_RES, PDIAG_ANGIOTAC, PDIAG_ANGIOTAC_RES, RES_DIAGFIN, RES_DECISIONCLIN, RES_FECHA, RES_COMENTARIOS, RES_OPERADOR ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDPROTSINCOPE = ?, ANA_REALIZADA = ?, ANA_FECHA = ?, ANA_HEMOGLOBINA = ?, ANA_DDIMERO = ?, ANA_LACTATO = ?, ANA_COMENTARIOS = ?, PDIAG_MONITORIZACION = ?, PDIAG_MONITORIZACION_RES = ?, PDIAG_ELR = ?, PDIAG_ELR_RES = ?, PDIAG_MESAB = ?, PDIAG_MESAB_RES = ?, PDIAG_ECOGRAFIA = ?, PDIAG_ECOGRAFIA_RES = ?, PDIAG_PESFUERZO = ?, PDIAG_PESFUERZO_RES = ?, PDIAG_ILR = ?, PDIAG_ILR_RES = ?, PDIAG_ECGCONT = ?, PDIAG_ECGCONT_RES = ?, PDIAG_EEF = ?, PDIAG_EEF_RES = ?, PDIAG_RXTORAX = ?, PDIAG_RXTORAX_RES = ?, PDIAG_TACCER = ?, PDIAG_TACCER_RES = ?, PDIAG_TACTOR = ?, PDIAG_TACTOR_RES = ?, PDIAG_ANGIOTAC = ?, PDIAG_ANGIOTAC_RES = ?, RES_DIAGFIN = ?, RES_DECISIONCLIN = ?, RES_FECHA = ?, RES_COMENTARIOS = ?, RES_OPERADOR = ? WHERE IDPROTSINCOPE = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDPROTSINCOPE = ?";

	/** 
	 * Index of column IDPROTSINCOPE
	 */
	protected static final int COLUMN_IDPROTSINCOPE = 1;

	/** 
	 * Index of column ANA_REALIZADA
	 */
	protected static final int COLUMN_ANA_REALIZADA = 2;

	/** 
	 * Index of column ANA_FECHA
	 */
	protected static final int COLUMN_ANA_FECHA = 3;

	/** 
	 * Index of column ANA_HEMOGLOBINA
	 */
	protected static final int COLUMN_ANA_HEMOGLOBINA = 4;

	/** 
	 * Index of column ANA_DDIMERO
	 */
	protected static final int COLUMN_ANA_DDIMERO = 5;

	/** 
	 * Index of column ANA_LACTATO
	 */
	protected static final int COLUMN_ANA_LACTATO = 6;

	/** 
	 * Index of column ANA_COMENTARIOS
	 */
	protected static final int COLUMN_ANA_COMENTARIOS = 7;

	/** 
	 * Index of column PDIAG_MONITORIZACION
	 */
	protected static final int COLUMN_PDIAG_MONITORIZACION = 8;

	/** 
	 * Index of column PDIAG_MONITORIZACION_RES
	 */
	protected static final int COLUMN_PDIAG_MONITORIZACION_RES = 9;

	/** 
	 * Index of column PDIAG_ELR
	 */
	protected static final int COLUMN_PDIAG_ELR = 10;

	/** 
	 * Index of column PDIAG_ELR_RES
	 */
	protected static final int COLUMN_PDIAG_ELR_RES = 11;

	/** 
	 * Index of column PDIAG_MESAB
	 */
	protected static final int COLUMN_PDIAG_MESAB = 12;

	/** 
	 * Index of column PDIAG_MESAB_RES
	 */
	protected static final int COLUMN_PDIAG_MESAB_RES = 13;

	/** 
	 * Index of column PDIAG_ECOGRAFIA
	 */
	protected static final int COLUMN_PDIAG_ECOGRAFIA = 14;

	/** 
	 * Index of column PDIAG_ECOGRAFIA_RES
	 */
	protected static final int COLUMN_PDIAG_ECOGRAFIA_RES = 15;

	/** 
	 * Index of column PDIAG_PESFUERZO
	 */
	protected static final int COLUMN_PDIAG_PESFUERZO = 16;

	/** 
	 * Index of column PDIAG_PESFUERZO_RES
	 */
	protected static final int COLUMN_PDIAG_PESFUERZO_RES = 17;

	/** 
	 * Index of column PDIAG_ILR
	 */
	protected static final int COLUMN_PDIAG_ILR = 18;

	/** 
	 * Index of column PDIAG_ILR_RES
	 */
	protected static final int COLUMN_PDIAG_ILR_RES = 19;

	/** 
	 * Index of column PDIAG_ECGCONT
	 */
	protected static final int COLUMN_PDIAG_ECGCONT = 20;

	/** 
	 * Index of column PDIAG_ECGCONT_RES
	 */
	protected static final int COLUMN_PDIAG_ECGCONT_RES = 21;

	/** 
	 * Index of column PDIAG_EEF
	 */
	protected static final int COLUMN_PDIAG_EEF = 22;

	/** 
	 * Index of column PDIAG_EEF_RES
	 */
	protected static final int COLUMN_PDIAG_EEF_RES = 23;

	/** 
	 * Index of column PDIAG_RXTORAX
	 */
	protected static final int COLUMN_PDIAG_RXTORAX = 24;

	/** 
	 * Index of column PDIAG_RXTORAX_RES
	 */
	protected static final int COLUMN_PDIAG_RXTORAX_RES = 25;

	/** 
	 * Index of column PDIAG_TACCER
	 */
	protected static final int COLUMN_PDIAG_TACCER = 26;

	/** 
	 * Index of column PDIAG_TACCER_RES
	 */
	protected static final int COLUMN_PDIAG_TACCER_RES = 27;

	/** 
	 * Index of column PDIAG_TACTOR
	 */
	protected static final int COLUMN_PDIAG_TACTOR = 28;

	/** 
	 * Index of column PDIAG_TACTOR_RES
	 */
	protected static final int COLUMN_PDIAG_TACTOR_RES = 29;

	/** 
	 * Index of column PDIAG_ANGIOTAC
	 */
	protected static final int COLUMN_PDIAG_ANGIOTAC = 30;

	/** 
	 * Index of column PDIAG_ANGIOTAC_RES
	 */
	protected static final int COLUMN_PDIAG_ANGIOTAC_RES = 31;

	/** 
	 * Index of column RES_DIAGFIN
	 */
	protected static final int COLUMN_RES_DIAGFIN = 32;

	/** 
	 * Index of column RES_DECISIONCLIN
	 */
	protected static final int COLUMN_RES_DECISIONCLIN = 33;

	/** 
	 * Index of column RES_FECHA
	 */
	protected static final int COLUMN_RES_FECHA = 34;

	/** 
	 * Index of column RES_COMENTARIOS
	 */
	protected static final int COLUMN_RES_COMENTARIOS = 35;

	/** 
	 * Index of column RES_OPERADOR
	 */
	protected static final int COLUMN_RES_OPERADOR = 36;
	
	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 36;

	/** 
	 * Index of primary-key column IDPROTSINCOPE
	 */
	protected static final int PK_COLUMN_IDPROTSINCOPE = 1;

	/** 
	 * Inserts a new row in the prot_sincope table.
	 */
	public ProtSincopePk insert(ProtSincope dto) throws ProtSincopeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdprotsincope() != null) {
				stmt.setInt( index++, dto.getIdprotsincope().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAnaRealizada() != null) {
				stmt.setInt( index++, dto.getAnaRealizada().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getAnaFecha()==null ? null : new java.sql.Date( dto.getAnaFecha().getTime() ) );
			stmt.setString( index++, dto.getAnaHemoglobina() );
			stmt.setString( index++, dto.getAnaDdimero() );
			stmt.setString( index++, dto.getAnaLactato() );
			stmt.setString( index++, dto.getAnaComentarios() );
			if (dto.getPdiagMonitorizacion() != null) {
				stmt.setInt( index++, dto.getPdiagMonitorizacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagMonitorizacionRes() );
			if (dto.getPdiagElr() != null) {
				stmt.setInt( index++, dto.getPdiagElr().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagElrRes() );
			if (dto.getPdiagMesab() != null) {
				stmt.setInt( index++, dto.getPdiagMesab().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagMesabRes() );
			if (dto.getPdiagEcografia() != null) {
				stmt.setInt( index++, dto.getPdiagEcografia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagEcografiaRes() );
			if (dto.getPdiagPesfuerzo() != null) {
				stmt.setInt( index++, dto.getPdiagPesfuerzo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagPesfuerzoRes() );
			if (dto.getPdiagIlr() != null) {
				stmt.setInt( index++, dto.getPdiagIlr().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagIlrRes() );
			if (dto.getPdiagEcgcont() != null) {
				stmt.setInt( index++, dto.getPdiagEcgcont().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagEcgcontRes() );
			if (dto.getPdiagEef() != null) {
				stmt.setInt( index++, dto.getPdiagEef().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagEefRes() );
			if (dto.getPdiagRxtorax() != null) {
				stmt.setInt( index++, dto.getPdiagRxtorax().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagRxtoraxRes() );
			if (dto.getPdiagTaccer() != null) {
				stmt.setInt( index++, dto.getPdiagTaccer().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagTaccerRes() );
			if (dto.getPdiagTactor() != null) {
				stmt.setInt( index++, dto.getPdiagTactor().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagTactorRes() );
			if (dto.getPdiagAngiotac() != null) {
				stmt.setInt( index++, dto.getPdiagAngiotac().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagAngiotacRes() );
			if (dto.getResDiagfin() != null) {
				stmt.setInt( index++, dto.getResDiagfin().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getResDecisionclin() != null) {
				stmt.setInt( index++, dto.getResDecisionclin().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getResFecha()==null ? null : new java.sql.Date( dto.getResFecha().getTime() ) );
			stmt.setString( index++, dto.getResComentarios() );
			stmt.setString( index++, dto.getResOperador() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdprotsincope( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProtSincopeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the prot_sincope table.
	 */
	public void update(ProtSincopePk pk, ProtSincope dto) throws ProtSincopeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdprotsincope() != null) {
				stmt.setInt( index++, dto.getIdprotsincope().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAnaRealizada() != null) {
				stmt.setInt( index++, dto.getAnaRealizada().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getAnaFecha()==null ? null : new java.sql.Date( dto.getAnaFecha().getTime() ) );
			stmt.setString( index++, dto.getAnaHemoglobina() );
			stmt.setString( index++, dto.getAnaDdimero() );
			stmt.setString( index++, dto.getAnaLactato() );
			stmt.setString( index++, dto.getAnaComentarios() );
			if (dto.getPdiagMonitorizacion() != null) {
				stmt.setInt( index++, dto.getPdiagMonitorizacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagMonitorizacionRes() );
			if (dto.getPdiagElr() != null) {
				stmt.setInt( index++, dto.getPdiagElr().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagElrRes() );
			if (dto.getPdiagMesab() != null) {
				stmt.setInt( index++, dto.getPdiagMesab().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagMesabRes() );
			if (dto.getPdiagEcografia() != null) {
				stmt.setInt( index++, dto.getPdiagEcografia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagEcografiaRes() );
			if (dto.getPdiagPesfuerzo() != null) {
				stmt.setInt( index++, dto.getPdiagPesfuerzo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagPesfuerzoRes() );
			if (dto.getPdiagIlr() != null) {
				stmt.setInt( index++, dto.getPdiagIlr().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagIlrRes() );
			if (dto.getPdiagEcgcont() != null) {
				stmt.setInt( index++, dto.getPdiagEcgcont().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagEcgcontRes() );
			if (dto.getPdiagEef() != null) {
				stmt.setInt( index++, dto.getPdiagEef().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagEefRes() );
			if (dto.getPdiagRxtorax() != null) {
				stmt.setInt( index++, dto.getPdiagRxtorax().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagRxtoraxRes() );
			if (dto.getPdiagTaccer() != null) {
				stmt.setInt( index++, dto.getPdiagTaccer().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagTaccerRes() );
			if (dto.getPdiagTactor() != null) {
				stmt.setInt( index++, dto.getPdiagTactor().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagTactorRes() );
			if (dto.getPdiagAngiotac() != null) {
				stmt.setInt( index++, dto.getPdiagAngiotac().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPdiagAngiotacRes() );
			if (dto.getResDiagfin() != null) {
				stmt.setInt( index++, dto.getResDiagfin().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getResDecisionclin() != null) {
				stmt.setInt( index++, dto.getResDecisionclin().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getResFecha()==null ? null : new java.sql.Date( dto.getResFecha().getTime() ) );
			stmt.setString( index++, dto.getResComentarios() );
			stmt.setString( index++, dto.getResOperador() );
			if (pk.getIdprotsincope() != null) {
				stmt.setInt( 37, pk.getIdprotsincope().intValue() );
			} else {
				stmt.setNull(37, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProtSincopeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the prot_sincope table.
	 */
	public void delete(ProtSincopePk pk) throws ProtSincopeDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdprotsincope() != null) {
				stmt.setInt( 1, pk.getIdprotsincope().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(pk.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProtSincopeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the prot_sincope table that matches the specified primary-key value.
	 */
	public ProtSincope findByPrimaryKey(ProtSincopePk pk) throws ProtSincopeDaoException
	{
		return findByPrimaryKey( pk.getIdprotsincope() );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'IDPROTSINCOPE = :idprotsincope'.
	 */
	public ProtSincope findByPrimaryKey(Integer idprotsincope) throws ProtSincopeDaoException
	{
		ProtSincope ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDPROTSINCOPE = ?", new Object[] { idprotsincope } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria ''.
	 */
	public ProtSincope[] findAll() throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDPROTSINCOPE", null );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'IDPROTSINCOPE = :idprotsincope'.
	 */
	public ProtSincope[] findWhereIdprotsincopeEquals(int idprotsincope) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPROTSINCOPE = ? ORDER BY IDPROTSINCOPE", new Object[] {  new Integer(idprotsincope) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'ANA_REALIZADA = :anaRealizada'.
	 */
	public ProtSincope[] findWhereAnaRealizadaEquals(int anaRealizada) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANA_REALIZADA = ? ORDER BY ANA_REALIZADA", new Object[] {  new Integer(anaRealizada) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'ANA_FECHA = :anaFecha'.
	 */
	public ProtSincope[] findWhereAnaFechaEquals(Date anaFecha) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANA_FECHA = ? ORDER BY ANA_FECHA", new Object[] { anaFecha==null ? null : new java.sql.Date( anaFecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'ANA_HEMOGLOBINA = :anaHemoglobina'.
	 */
	public ProtSincope[] findWhereAnaHemoglobinaEquals(String anaHemoglobina) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANA_HEMOGLOBINA = ? ORDER BY ANA_HEMOGLOBINA", new Object[] { anaHemoglobina } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'ANA_DDIMERO = :anaDdimero'.
	 */
	public ProtSincope[] findWhereAnaDdimeroEquals(String anaDdimero) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANA_DDIMERO = ? ORDER BY ANA_DDIMERO", new Object[] { anaDdimero } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'ANA_LACTATO = :anaLactato'.
	 */
	public ProtSincope[] findWhereAnaLactatoEquals(String anaLactato) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANA_LACTATO = ? ORDER BY ANA_LACTATO", new Object[] { anaLactato } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'ANA_COMENTARIOS = :anaComentarios'.
	 */
	public ProtSincope[] findWhereAnaComentariosEquals(String anaComentarios) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANA_COMENTARIOS = ? ORDER BY ANA_COMENTARIOS", new Object[] { anaComentarios } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_MONITORIZACION = :pdiagMonitorizacion'.
	 */
	public ProtSincope[] findWherePdiagMonitorizacionEquals(int pdiagMonitorizacion) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_MONITORIZACION = ? ORDER BY PDIAG_MONITORIZACION", new Object[] {  new Integer(pdiagMonitorizacion) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_MONITORIZACION_RES = :pdiagMonitorizacionRes'.
	 */
	public ProtSincope[] findWherePdiagMonitorizacionResEquals(String pdiagMonitorizacionRes) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_MONITORIZACION_RES = ? ORDER BY PDIAG_MONITORIZACION_RES", new Object[] { pdiagMonitorizacionRes } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ELR = :pdiagElr'.
	 */
	public ProtSincope[] findWherePdiagElrEquals(int pdiagElr) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_ELR = ? ORDER BY PDIAG_ELR", new Object[] {  new Integer(pdiagElr) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ELR_RES = :pdiagElrRes'.
	 */
	public ProtSincope[] findWherePdiagElrResEquals(String pdiagElrRes) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_ELR_RES = ? ORDER BY PDIAG_ELR_RES", new Object[] { pdiagElrRes } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_MESAB = :pdiagMesab'.
	 */
	public ProtSincope[] findWherePdiagMesabEquals(int pdiagMesab) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_MESAB = ? ORDER BY PDIAG_MESAB", new Object[] {  new Integer(pdiagMesab) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_MESAB_RES = :pdiagMesabRes'.
	 */
	public ProtSincope[] findWherePdiagMesabResEquals(String pdiagMesabRes) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_MESAB_RES = ? ORDER BY PDIAG_MESAB_RES", new Object[] { pdiagMesabRes } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ECOGRAFIA = :pdiagEcografia'.
	 */
	public ProtSincope[] findWherePdiagEcografiaEquals(int pdiagEcografia) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_ECOGRAFIA = ? ORDER BY PDIAG_ECOGRAFIA", new Object[] {  new Integer(pdiagEcografia) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ECOGRAFIA_RES = :pdiagEcografiaRes'.
	 */
	public ProtSincope[] findWherePdiagEcografiaResEquals(String pdiagEcografiaRes) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_ECOGRAFIA_RES = ? ORDER BY PDIAG_ECOGRAFIA_RES", new Object[] { pdiagEcografiaRes } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_PESFUERZO = :pdiagPesfuerzo'.
	 */
	public ProtSincope[] findWherePdiagPesfuerzoEquals(int pdiagPesfuerzo) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_PESFUERZO = ? ORDER BY PDIAG_PESFUERZO", new Object[] {  new Integer(pdiagPesfuerzo) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_PESFUERZO_RES = :pdiagPesfuerzoRes'.
	 */
	public ProtSincope[] findWherePdiagPesfuerzoResEquals(String pdiagPesfuerzoRes) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_PESFUERZO_RES = ? ORDER BY PDIAG_PESFUERZO_RES", new Object[] { pdiagPesfuerzoRes } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ILR = :pdiagIlr'.
	 */
	public ProtSincope[] findWherePdiagIlrEquals(int pdiagIlr) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_ILR = ? ORDER BY PDIAG_ILR", new Object[] {  new Integer(pdiagIlr) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ILR_RES = :pdiagIlrRes'.
	 */
	public ProtSincope[] findWherePdiagIlrResEquals(String pdiagIlrRes) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_ILR_RES = ? ORDER BY PDIAG_ILR_RES", new Object[] { pdiagIlrRes } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ECGCONT = :pdiagEcgcont'.
	 */
	public ProtSincope[] findWherePdiagEcgcontEquals(int pdiagEcgcont) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_ECGCONT = ? ORDER BY PDIAG_ECGCONT", new Object[] {  new Integer(pdiagEcgcont) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ECGCONT_RES = :pdiagEcgcontRes'.
	 */
	public ProtSincope[] findWherePdiagEcgcontResEquals(String pdiagEcgcontRes) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_ECGCONT_RES = ? ORDER BY PDIAG_ECGCONT_RES", new Object[] { pdiagEcgcontRes } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_EEF = :pdiagEef'.
	 */
	public ProtSincope[] findWherePdiagEefEquals(int pdiagEef) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_EEF = ? ORDER BY PDIAG_EEF", new Object[] {  new Integer(pdiagEef) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_EEF_RES = :pdiagEefRes'.
	 */
	public ProtSincope[] findWherePdiagEefResEquals(String pdiagEefRes) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_EEF_RES = ? ORDER BY PDIAG_EEF_RES", new Object[] { pdiagEefRes } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_RXTORAX = :pdiagRxtorax'.
	 */
	public ProtSincope[] findWherePdiagRxtoraxEquals(int pdiagRxtorax) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_RXTORAX = ? ORDER BY PDIAG_RXTORAX", new Object[] {  new Integer(pdiagRxtorax) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_RXTORAX_RES = :pdiagRxtoraxRes'.
	 */
	public ProtSincope[] findWherePdiagRxtoraxResEquals(String pdiagRxtoraxRes) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_RXTORAX_RES = ? ORDER BY PDIAG_RXTORAX_RES", new Object[] { pdiagRxtoraxRes } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_TACCER = :pdiagTaccer'.
	 */
	public ProtSincope[] findWherePdiagTaccerEquals(int pdiagTaccer) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_TACCER = ? ORDER BY PDIAG_TACCER", new Object[] {  new Integer(pdiagTaccer) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_TACCER_RES = :pdiagTaccerRes'.
	 */
	public ProtSincope[] findWherePdiagTaccerResEquals(String pdiagTaccerRes) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_TACCER_RES = ? ORDER BY PDIAG_TACCER_RES", new Object[] { pdiagTaccerRes } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_TACTOR = :pdiagTactor'.
	 */
	public ProtSincope[] findWherePdiagTactorEquals(int pdiagTactor) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_TACTOR = ? ORDER BY PDIAG_TACTOR", new Object[] {  new Integer(pdiagTactor) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_TACTOR_RES = :pdiagTactorRes'.
	 */
	public ProtSincope[] findWherePdiagTactorResEquals(String pdiagTactorRes) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_TACTOR_RES = ? ORDER BY PDIAG_TACTOR_RES", new Object[] { pdiagTactorRes } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ANGIOTAC = :pdiagAngiotac'.
	 */
	public ProtSincope[] findWherePdiagAngiotacEquals(int pdiagAngiotac) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_ANGIOTAC = ? ORDER BY PDIAG_ANGIOTAC", new Object[] {  new Integer(pdiagAngiotac) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'PDIAG_ANGIOTAC_RES = :pdiagAngiotacRes'.
	 */
	public ProtSincope[] findWherePdiagAngiotacResEquals(String pdiagAngiotacRes) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PDIAG_ANGIOTAC_RES = ? ORDER BY PDIAG_ANGIOTAC_RES", new Object[] { pdiagAngiotacRes } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'RES_DIAGFIN = :resDiagfin'.
	 */
	public ProtSincope[] findWhereResDiagfinEquals(int resDiagfin) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RES_DIAGFIN = ? ORDER BY RES_DIAGFIN", new Object[] {  new Integer(resDiagfin) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'RES_DECISIONCLIN = :resDecisionclin'.
	 */
	public ProtSincope[] findWhereResDecisionclinEquals(int resDecisionclin) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RES_DECISIONCLIN = ? ORDER BY RES_DECISIONCLIN", new Object[] {  new Integer(resDecisionclin) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'RES_FECHA = :resFecha'.
	 */
	public ProtSincope[] findWhereResFechaEquals(Date resFecha) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RES_FECHA = ? ORDER BY RES_FECHA", new Object[] { resFecha==null ? null : new java.sql.Date( resFecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'RES_COMENTARIOS = :resComentarios'.
	 */
	public ProtSincope[] findWhereResComentariosEquals(String resComentarios) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RES_COMENTARIOS = ? ORDER BY RES_COMENTARIOS", new Object[] { resComentarios } );
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the criteria 'RES_OPERADOR = :resOperador'.
	 */
	public ProtSincope[] findWhereResOperadorEquals(String resOperador) throws ProtSincopeDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RES_OPERADOR = ? ORDER BY RES_OPERADOR", new Object[] { resOperador } );
	}
	
	/**
	 * Method 'ProtSincopeDaoImpl'
	 * 
	 */
	public ProtSincopeDaoImpl()
	{
	}
	public ProtSincopeDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ProtSincopeDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	/**
	 * Method 'ProtSincopeDaoImpl'
	 * 
	 * @param userConn
	 */
	public ProtSincopeDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "prot_sincope";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ProtSincope fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ProtSincope dto = new ProtSincope();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ProtSincope[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ProtSincope dto = new ProtSincope();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ProtSincope ret[] = new ProtSincope[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ProtSincope dto, ResultSet rs) throws SQLException
	{
		dto.setIdprotsincope( new Integer( rs.getInt(COLUMN_IDPROTSINCOPE) ) );
		dto.setAnaRealizada( new Integer( rs.getInt(COLUMN_ANA_REALIZADA) ) );
		if (rs.wasNull()) {
			dto.setAnaRealizada( null );
		}
		
		dto.setAnaFecha( rs.getDate(COLUMN_ANA_FECHA ) );
		dto.setAnaHemoglobina( rs.getString( COLUMN_ANA_HEMOGLOBINA ) );
		dto.setAnaDdimero( rs.getString( COLUMN_ANA_DDIMERO ) );
		dto.setAnaLactato( rs.getString( COLUMN_ANA_LACTATO ) );
		dto.setAnaComentarios( rs.getString( COLUMN_ANA_COMENTARIOS ) );
		dto.setPdiagMonitorizacion( new Integer( rs.getInt(COLUMN_PDIAG_MONITORIZACION) ) );
		if (rs.wasNull()) {
			dto.setPdiagMonitorizacion( null );
		}
		
		dto.setPdiagMonitorizacionRes( rs.getString( COLUMN_PDIAG_MONITORIZACION_RES ) );
		dto.setPdiagElr( new Integer( rs.getInt(COLUMN_PDIAG_ELR) ) );
		if (rs.wasNull()) {
			dto.setPdiagElr( null );
		}
		
		dto.setPdiagElrRes( rs.getString( COLUMN_PDIAG_ELR_RES ) );
		dto.setPdiagMesab( new Integer( rs.getInt(COLUMN_PDIAG_MESAB) ) );
		if (rs.wasNull()) {
			dto.setPdiagMesab( null );
		}
		
		dto.setPdiagMesabRes( rs.getString( COLUMN_PDIAG_MESAB_RES ) );
		dto.setPdiagEcografia( new Integer( rs.getInt(COLUMN_PDIAG_ECOGRAFIA) ) );
		if (rs.wasNull()) {
			dto.setPdiagEcografia( null );
		}
		
		dto.setPdiagEcografiaRes( rs.getString( COLUMN_PDIAG_ECOGRAFIA_RES ) );
		dto.setPdiagPesfuerzo( new Integer( rs.getInt(COLUMN_PDIAG_PESFUERZO) ) );
		if (rs.wasNull()) {
			dto.setPdiagPesfuerzo( null );
		}
		
		dto.setPdiagPesfuerzoRes( rs.getString( COLUMN_PDIAG_PESFUERZO_RES ) );
		dto.setPdiagIlr( new Integer( rs.getInt(COLUMN_PDIAG_ILR) ) );
		if (rs.wasNull()) {
			dto.setPdiagIlr( null );
		}
		
		dto.setPdiagIlrRes( rs.getString( COLUMN_PDIAG_ILR_RES ) );
		dto.setPdiagEcgcont( new Integer( rs.getInt(COLUMN_PDIAG_ECGCONT) ) );
		if (rs.wasNull()) {
			dto.setPdiagEcgcont( null );
		}
		
		dto.setPdiagEcgcontRes( rs.getString( COLUMN_PDIAG_ECGCONT_RES ) );
		dto.setPdiagEef( new Integer( rs.getInt(COLUMN_PDIAG_EEF) ) );
		if (rs.wasNull()) {
			dto.setPdiagEef( null );
		}
		
		dto.setPdiagEefRes( rs.getString( COLUMN_PDIAG_EEF_RES ) );
		dto.setPdiagRxtorax( new Integer( rs.getInt(COLUMN_PDIAG_RXTORAX) ) );
		if (rs.wasNull()) {
			dto.setPdiagRxtorax( null );
		}
		
		dto.setPdiagRxtoraxRes( rs.getString( COLUMN_PDIAG_RXTORAX_RES ) );
		dto.setPdiagTaccer( new Integer( rs.getInt(COLUMN_PDIAG_TACCER) ) );
		if (rs.wasNull()) {
			dto.setPdiagTaccer( null );
		}
		
		dto.setPdiagTaccerRes( rs.getString( COLUMN_PDIAG_TACCER_RES ) );
		dto.setPdiagTactor( new Integer( rs.getInt(COLUMN_PDIAG_TACTOR) ) );
		if (rs.wasNull()) {
			dto.setPdiagTactor( null );
		}
		
		dto.setPdiagTactorRes( rs.getString( COLUMN_PDIAG_TACTOR_RES ) );
		dto.setPdiagAngiotac( new Integer( rs.getInt(COLUMN_PDIAG_ANGIOTAC) ) );
		if (rs.wasNull()) {
			dto.setPdiagAngiotac( null );
		}
		
		dto.setPdiagAngiotacRes( rs.getString( COLUMN_PDIAG_ANGIOTAC_RES ) );
		dto.setResDiagfin( new Integer( rs.getInt(COLUMN_RES_DIAGFIN) ) );
		if (rs.wasNull()) {
			dto.setResDiagfin( null );
		}
		
		dto.setResDecisionclin( new Integer( rs.getInt(COLUMN_RES_DECISIONCLIN) ) );
		if (rs.wasNull()) {
			dto.setResDecisionclin( null );
		}
		
		dto.setResFecha( rs.getDate(COLUMN_RES_FECHA ) );
		dto.setResComentarios( rs.getString( COLUMN_RES_COMENTARIOS ) );
		dto.setResOperador( rs.getString( COLUMN_RES_OPERADOR ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ProtSincope dto)
	{
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the specified arbitrary SQL statement
	 */
	public ProtSincope[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProtSincopeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProtSincopeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the prot_sincope table that match the specified arbitrary SQL statement
	 */
	public ProtSincope[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProtSincopeDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProtSincopeDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
