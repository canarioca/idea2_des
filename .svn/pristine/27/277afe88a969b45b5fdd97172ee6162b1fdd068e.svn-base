/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface ComplicacionesDao
{
	/** 
	 * Inserts a new row in the complicaciones table.
	 */
	public ComplicacionesPk insert(Complicaciones dto) throws ComplicacionesDaoException;

	/** 
	 * Updates a single row in the complicaciones table.
	 */
	public void update(ComplicacionesPk pk, Complicaciones dto) throws ComplicacionesDaoException;

	/** 
	 * Deletes a single row in the complicaciones table.
	 */
	public void delete(ComplicacionesPk pk) throws ComplicacionesDaoException;

	/** 
	 * Returns the rows from the complicaciones table that matches the specified primary-key value.
	 */
	public Complicaciones findByPrimaryKey(ComplicacionesPk pk) throws ComplicacionesDaoException;

	/** 
	 * Returns all rows from the complicaciones table that match the criteria 'IDCOMPLICACION = :idcomplicacion'.
	 */
	public Complicaciones findByPrimaryKey(Integer idcomplicacion) throws ComplicacionesDaoException;

	/** 
	 * Returns all rows from the complicaciones table that match the criteria ''.
	 */
	public Complicaciones[] findAll() throws ComplicacionesDaoException;

	/** 
	 * Returns all rows from the complicaciones table that match the criteria 'IDCOMPLICACION = :idcomplicacion'.
	 */
	public Complicaciones[] findWhereIdcomplicacionEquals(int idcomplicacion) throws ComplicacionesDaoException;

	/** 
	 * Returns all rows from the complicaciones table that match the criteria 'NOMBRE = :nombre'.
	 */
	public Complicaciones[] findWhereNombreEquals(String nombre) throws ComplicacionesDaoException;

	/** 
	 * Returns all rows from the complicaciones table that match the criteria 'AMBITO = :ambito'.
	 */
	public Complicaciones[] findWhereAmbitoEquals(int ambito) throws ComplicacionesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the complicaciones table that match the specified arbitrary SQL statement
	 */
	public Complicaciones[] findByDynamicSelect(String sql, Object[] sqlParams) throws ComplicacionesDaoException;

	/** 
	 * Returns all rows from the complicaciones table that match the specified arbitrary SQL statement
	 */
	public Complicaciones[] findByDynamicWhere(String sql, Object[] sqlParams) throws ComplicacionesDaoException;

}
