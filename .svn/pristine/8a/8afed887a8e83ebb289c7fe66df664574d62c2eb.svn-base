/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface ProtSincopeValCardDao
{
	/** 
	 * Inserts a new row in the prot_sincope_val_card table.
	 */
	public ProtSincopeValCardPk insert(ProtSincopeValCard dto) throws ProtSincopeValCardDaoException;

	/** 
	 * Updates a single row in the prot_sincope_val_card table.
	 */
	public void update(ProtSincopeValCardPk pk, ProtSincopeValCard dto) throws ProtSincopeValCardDaoException;

	/** 
	 * Deletes a single row in the prot_sincope_val_card table.
	 */
	public void delete(ProtSincopeValCardPk pk) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns the rows from the prot_sincope_val_card table that matches the specified primary-key value.
	 */
	public ProtSincopeValCard findByPrimaryKey(ProtSincopeValCardPk pk) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'IDPROTSINCOPE = :idprotsincope'.
	 */
	public ProtSincopeValCard findByPrimaryKey(Integer idprotsincope) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria ''.
	 */
	public ProtSincopeValCard[] findAll() throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'IDPROTSINCOPE = :idprotsincope'.
	 */
	public ProtSincopeValCard[] findWhereIdprotsincopeEquals(int idprotsincope) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'FECHA = :fecha'.
	 */
	public ProtSincopeValCard[] findWhereFechaEquals(Date fecha) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'SINCOPE_PICO = :sincopePico'.
	 */
	public ProtSincopeValCard[] findWhereSincopePicoEquals(int sincopePico) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'SINCOPE_DEC = :sincopeDec'.
	 */
	public ProtSincopeValCard[] findWhereSincopeDecEquals(int sincopeDec) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'AF_MS = :afMs'.
	 */
	public ProtSincopeValCard[] findWhereAfMsEquals(int afMs) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'PALPITACIONES = :palpitaciones'.
	 */
	public ProtSincopeValCard[] findWherePalpitacionesEquals(int palpitaciones) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'DOLOR_TORACICO = :dolorToracico'.
	 */
	public ProtSincopeValCard[] findWhereDolorToracicoEquals(int dolorToracico) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'CARDIO_ESTRUCT = :cardioEstruct'.
	 */
	public ProtSincopeValCard[] findWhereCardioEstructEquals(int cardioEstruct) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'ANT_ISQ_ICC = :antIsqIcc'.
	 */
	public ProtSincopeValCard[] findWhereAntIsqIccEquals(int antIsqIcc) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'ECG_ANORMAL = :ecgAnormal'.
	 */
	public ProtSincopeValCard[] findWhereEcgAnormalEquals(int ecgAnormal) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_BRADI = :hallBradi'.
	 */
	public ProtSincopeValCard[] findWhereHallBradiEquals(int hallBradi) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_BAV = :hallBav'.
	 */
	public ProtSincopeValCard[] findWhereHallBavEquals(int hallBav) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_BR = :hallBr'.
	 */
	public ProtSincopeValCard[] findWhereHallBrEquals(int hallBr) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_TSV = :hallTsv'.
	 */
	public ProtSincopeValCard[] findWhereHallTsvEquals(int hallTsv) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_TVNS = :hallTvns'.
	 */
	public ProtSincopeValCard[] findWhereHallTvnsEquals(int hallTvns) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_MPDAI = :hallMpdai'.
	 */
	public ProtSincopeValCard[] findWhereHallMpdaiEquals(int hallMpdai) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_ECG = :hallEcg'.
	 */
	public ProtSincopeValCard[] findWhereHallEcgEquals(int hallEcg) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_ESTEN = :hallEsten'.
	 */
	public ProtSincopeValCard[] findWhereHallEstenEquals(int hallEsten) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_HTAPULM = :hallHtapulm'.
	 */
	public ProtSincopeValCard[] findWhereHallHtapulmEquals(int hallHtapulm) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_EMBOL = :hallEmbol'.
	 */
	public ProtSincopeValCard[] findWhereHallEmbolEquals(int hallEmbol) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_DISEC = :hallDisec'.
	 */
	public ProtSincopeValCard[] findWhereHallDisecEquals(int hallDisec) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'HALL_MIX = :hallMix'.
	 */
	public ProtSincopeValCard[] findWhereHallMixEquals(int hallMix) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ProtSincopeValCard[] findWhereComentariosEquals(String comentarios) throws ProtSincopeValCardDaoException;
	
	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the criteria 'OPERADOR = :operador'.
	 */
	public ProtSincopeValCard[] findWhereOperadorEquals(String operador) throws ProtSincopeValCardDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the specified arbitrary SQL statement
	 */
	public ProtSincopeValCard[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProtSincopeValCardDaoException;

	/** 
	 * Returns all rows from the prot_sincope_val_card table that match the specified arbitrary SQL statement
	 */
	public ProtSincopeValCard[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProtSincopeValCardDaoException;

}
