/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class RcNutricionDaoImpl extends AbstractDAO implements RcNutricionDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_RC_NUTRICION, FECHA, ESCALA_DIETETICA, PERIMETRO_ABDOMINAL, PERIMETRO_CINTURA, INDICE_CINTURA, CINTURA_CADERA, INDICE_CINTURA_TALLA, MASA_MUSCULAR, MASA_GRASA_CORPORAL, PORCENTAJE_GRASA_CORPORAL, RELACION_CINTURA_CADERA FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_RC_NUTRICION, FECHA, ESCALA_DIETETICA, PERIMETRO_ABDOMINAL, PERIMETRO_CINTURA, INDICE_CINTURA, CINTURA_CADERA, INDICE_CINTURA_TALLA, MASA_MUSCULAR, MASA_GRASA_CORPORAL, PORCENTAJE_GRASA_CORPORAL, RELACION_CINTURA_CADERA ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_RC_NUTRICION = ?, FECHA = ?, ESCALA_DIETETICA = ?, PERIMETRO_ABDOMINAL = ?, PERIMETRO_CINTURA = ?, INDICE_CINTURA = ?, CINTURA_CADERA = ?, INDICE_CINTURA_TALLA = ?, MASA_MUSCULAR = ?, MASA_GRASA_CORPORAL = ?, PORCENTAJE_GRASA_CORPORAL = ?, RELACION_CINTURA_CADERA = ? WHERE ID_RC_NUTRICION = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_RC_NUTRICION = ?";

	/** 
	 * Index of column ID_RC_NUTRICION
	 */
	protected static final int COLUMN_ID_RC_NUTRICION = 1;

	/** 
	 * Index of column FECHA
	 */
	protected static final int COLUMN_FECHA = 2;

	/** 
	 * Index of column ESCALA_DIETETICA
	 */
	protected static final int COLUMN_ESCALA_DIETETICA = 3;

	/** 
	 * Index of column PERIMETRO_ABDOMINAL
	 */
	protected static final int COLUMN_PERIMETRO_ABDOMINAL = 4;

	/** 
	 * Index of column PERIMETRO_CINTURA
	 */
	protected static final int COLUMN_PERIMETRO_CINTURA = 5;

	/** 
	 * Index of column INDICE_CINTURA
	 */
	protected static final int COLUMN_INDICE_CINTURA = 6;

	/** 
	 * Index of column CINTURA_CADERA
	 */
	protected static final int COLUMN_CINTURA_CADERA = 7;

	/** 
	 * Index of column INDICE_CINTURA_TALLA
	 */
	protected static final int COLUMN_INDICE_CINTURA_TALLA = 8;

	/** 
	 * Index of column MASA_MUSCULAR
	 */
	protected static final int COLUMN_MASA_MUSCULAR = 9;

	/** 
	 * Index of column MASA_GRASA_CORPORAL
	 */
	protected static final int COLUMN_MASA_GRASA_CORPORAL = 10;

	/** 
	 * Index of column PORCENTAJE_GRASA_CORPORAL
	 */
	protected static final int COLUMN_PORCENTAJE_GRASA_CORPORAL = 11;

	/** 
	 * Index of column RELACION_CINTURA_CADERA
	 */
	protected static final int COLUMN_RELACION_CINTURA_CADERA = 12;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column ID_RC_NUTRICION
	 */
	protected static final int PK_COLUMN_ID_RC_NUTRICION = 1;

	/** 
	 * Inserts a new row in the RC_NUTRICION table.
	 */
	public RcNutricionPk insert(RcNutricion dto) throws RcNutricionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdRcNutricionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_RC_NUTRICION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isEscalaDieteticaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ESCALA_DIETETICA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPerimetroAbdominalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PERIMETRO_ABDOMINAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPerimetroCinturaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PERIMETRO_CINTURA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIndiceCinturaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "INDICE_CINTURA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCinturaCaderaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CINTURA_CADERA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIndiceCinturaTallaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "INDICE_CINTURA_TALLA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMasaMuscularModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MASA_MUSCULAR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isMasaGrasaCorporalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "MASA_GRASA_CORPORAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPorcentajeGrasaCorporalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PORCENTAJE_GRASA_CORPORAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRelacionCinturaCaderaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "RELACION_CINTURA_CADERA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdRcNutricionModified()) {
				stmt.setLong( index++, dto.getIdRcNutricion() );
			}
		
			if (dto.isFechaModified()) {
				stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			}
		
			if (dto.isEscalaDieteticaModified()) {
				stmt.setString( index++, dto.getEscalaDietetica() );
			}
		
			if (dto.isPerimetroAbdominalModified()) {
				stmt.setString( index++, dto.getPerimetroAbdominal() );
			}
		
			if (dto.isPerimetroCinturaModified()) {
				stmt.setString( index++, dto.getPerimetroCintura() );
			}
		
			if (dto.isIndiceCinturaModified()) {
				stmt.setString( index++, dto.getIndiceCintura() );
			}
		
			if (dto.isCinturaCaderaModified()) {
				stmt.setString( index++, dto.getCinturaCadera() );
			}
		
			if (dto.isIndiceCinturaTallaModified()) {
				stmt.setString( index++, dto.getIndiceCinturaTalla() );
			}
		
			if (dto.isMasaMuscularModified()) {
				stmt.setString( index++, dto.getMasaMuscular() );
			}
		
			if (dto.isMasaGrasaCorporalModified()) {
				stmt.setString( index++, dto.getMasaGrasaCorporal() );
			}
		
			if (dto.isPorcentajeGrasaCorporalModified()) {
				stmt.setString( index++, dto.getPorcentajeGrasaCorporal() );
			}
		
			if (dto.isRelacionCinturaCaderaModified()) {
				stmt.setString( index++, dto.getRelacionCinturaCadera() );
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			throw new RcNutricionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the RC_NUTRICION table.
	 */
	public void update(RcNutricionPk pk, RcNutricion dto) throws RcNutricionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdRcNutricionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_RC_NUTRICION=?" );
				modified=true;
			}
		
			if (dto.isFechaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA=?" );
				modified=true;
			}
		
			if (dto.isEscalaDieteticaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ESCALA_DIETETICA=?" );
				modified=true;
			}
		
			if (dto.isPerimetroAbdominalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PERIMETRO_ABDOMINAL=?" );
				modified=true;
			}
		
			if (dto.isPerimetroCinturaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PERIMETRO_CINTURA=?" );
				modified=true;
			}
		
			if (dto.isIndiceCinturaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "INDICE_CINTURA=?" );
				modified=true;
			}
		
			if (dto.isCinturaCaderaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CINTURA_CADERA=?" );
				modified=true;
			}
		
			if (dto.isIndiceCinturaTallaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "INDICE_CINTURA_TALLA=?" );
				modified=true;
			}
		
			if (dto.isMasaMuscularModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MASA_MUSCULAR=?" );
				modified=true;
			}
		
			if (dto.isMasaGrasaCorporalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MASA_GRASA_CORPORAL=?" );
				modified=true;
			}
		
			if (dto.isPorcentajeGrasaCorporalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PORCENTAJE_GRASA_CORPORAL=?" );
				modified=true;
			}
		
			if (dto.isRelacionCinturaCaderaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "RELACION_CINTURA_CADERA=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_RC_NUTRICION=?" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdRcNutricionModified()) {
				stmt.setLong( index++, dto.getIdRcNutricion() );
			}
		
			if (dto.isFechaModified()) {
				stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			}
		
			if (dto.isEscalaDieteticaModified()) {
				stmt.setString( index++, dto.getEscalaDietetica() );
			}
		
			if (dto.isPerimetroAbdominalModified()) {
				stmt.setString( index++, dto.getPerimetroAbdominal() );
			}
		
			if (dto.isPerimetroCinturaModified()) {
				stmt.setString( index++, dto.getPerimetroCintura() );
			}
		
			if (dto.isIndiceCinturaModified()) {
				stmt.setString( index++, dto.getIndiceCintura() );
			}
		
			if (dto.isCinturaCaderaModified()) {
				stmt.setString( index++, dto.getCinturaCadera() );
			}
		
			if (dto.isIndiceCinturaTallaModified()) {
				stmt.setString( index++, dto.getIndiceCinturaTalla() );
			}
		
			if (dto.isMasaMuscularModified()) {
				stmt.setString( index++, dto.getMasaMuscular() );
			}
		
			if (dto.isMasaGrasaCorporalModified()) {
				stmt.setString( index++, dto.getMasaGrasaCorporal() );
			}
		
			if (dto.isPorcentajeGrasaCorporalModified()) {
				stmt.setString( index++, dto.getPorcentajeGrasaCorporal() );
			}
		
			if (dto.isRelacionCinturaCaderaModified()) {
				stmt.setString( index++, dto.getRelacionCinturaCadera() );
			}
		
			stmt.setLong( index++, pk.getIdRcNutricion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new RcNutricionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the RC_NUTRICION table.
	 */
	public void delete(RcNutricionPk pk) throws RcNutricionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getIdRcNutricion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new RcNutricionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the RC_NUTRICION table that matches the specified primary-key value.
	 */
	public RcNutricion findByPrimaryKey(RcNutricionPk pk) throws RcNutricionDaoException
	{
		return findByPrimaryKey( pk.getIdRcNutricion() );
	}

	/** 
	 * Returns all rows from the RC_NUTRICION table that match the criteria 'ID_RC_NUTRICION = :idRcNutricion'.
	 */
	public RcNutricion findByPrimaryKey(long idRcNutricion) throws RcNutricionDaoException
	{
		RcNutricion ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_RC_NUTRICION = ?", new Object[] {  new Long(idRcNutricion) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the RC_NUTRICION table that match the criteria ''.
	 */
	public RcNutricion[] findAll() throws RcNutricionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_RC_NUTRICION", null );
	}

	/** 
	 * Returns all rows from the RC_NUTRICION table that match the criteria 'ID_RC_NUTRICION = :idRcNutricion'.
	 */
	public RcNutricion[] findWhereIdRcNutricionEquals(long idRcNutricion) throws RcNutricionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_RC_NUTRICION = ? ORDER BY ID_RC_NUTRICION", new Object[] {  new Long(idRcNutricion) } );
	}

	/** 
	 * Returns all rows from the RC_NUTRICION table that match the criteria 'FECHA = :fecha'.
	 */
	public RcNutricion[] findWhereFechaEquals(Date fecha) throws RcNutricionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA = ? ORDER BY FECHA", new Object[] { fecha==null ? null : new java.sql.Timestamp( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the RC_NUTRICION table that match the criteria 'ESCALA_DIETETICA = :escalaDietetica'.
	 */
	public RcNutricion[] findWhereEscalaDieteticaEquals(String escalaDietetica) throws RcNutricionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESCALA_DIETETICA = ? ORDER BY ESCALA_DIETETICA", new Object[] { escalaDietetica } );
	}

	/** 
	 * Returns all rows from the RC_NUTRICION table that match the criteria 'PERIMETRO_ABDOMINAL = :perimetroAbdominal'.
	 */
	public RcNutricion[] findWherePerimetroAbdominalEquals(String perimetroAbdominal) throws RcNutricionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PERIMETRO_ABDOMINAL = ? ORDER BY PERIMETRO_ABDOMINAL", new Object[] { perimetroAbdominal } );
	}

	/** 
	 * Returns all rows from the RC_NUTRICION table that match the criteria 'PERIMETRO_CINTURA = :perimetroCintura'.
	 */
	public RcNutricion[] findWherePerimetroCinturaEquals(String perimetroCintura) throws RcNutricionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PERIMETRO_CINTURA = ? ORDER BY PERIMETRO_CINTURA", new Object[] { perimetroCintura } );
	}

	/** 
	 * Returns all rows from the RC_NUTRICION table that match the criteria 'INDICE_CINTURA = :indiceCintura'.
	 */
	public RcNutricion[] findWhereIndiceCinturaEquals(String indiceCintura) throws RcNutricionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INDICE_CINTURA = ? ORDER BY INDICE_CINTURA", new Object[] { indiceCintura } );
	}

	/** 
	 * Returns all rows from the RC_NUTRICION table that match the criteria 'CINTURA_CADERA = :cinturaCadera'.
	 */
	public RcNutricion[] findWhereCinturaCaderaEquals(String cinturaCadera) throws RcNutricionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CINTURA_CADERA = ? ORDER BY CINTURA_CADERA", new Object[] { cinturaCadera } );
	}

	/** 
	 * Returns all rows from the RC_NUTRICION table that match the criteria 'INDICE_CINTURA_TALLA = :indiceCinturaTalla'.
	 */
	public RcNutricion[] findWhereIndiceCinturaTallaEquals(String indiceCinturaTalla) throws RcNutricionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INDICE_CINTURA_TALLA = ? ORDER BY INDICE_CINTURA_TALLA", new Object[] { indiceCinturaTalla } );
	}

	/** 
	 * Returns all rows from the RC_NUTRICION table that match the criteria 'MASA_MUSCULAR = :masaMuscular'.
	 */
	public RcNutricion[] findWhereMasaMuscularEquals(String masaMuscular) throws RcNutricionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MASA_MUSCULAR = ? ORDER BY MASA_MUSCULAR", new Object[] { masaMuscular } );
	}

	/** 
	 * Returns all rows from the RC_NUTRICION table that match the criteria 'MASA_GRASA_CORPORAL = :masaGrasaCorporal'.
	 */
	public RcNutricion[] findWhereMasaGrasaCorporalEquals(String masaGrasaCorporal) throws RcNutricionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MASA_GRASA_CORPORAL = ? ORDER BY MASA_GRASA_CORPORAL", new Object[] { masaGrasaCorporal } );
	}

	/** 
	 * Returns all rows from the RC_NUTRICION table that match the criteria 'PORCENTAJE_GRASA_CORPORAL = :porcentajeGrasaCorporal'.
	 */
	public RcNutricion[] findWherePorcentajeGrasaCorporalEquals(String porcentajeGrasaCorporal) throws RcNutricionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PORCENTAJE_GRASA_CORPORAL = ? ORDER BY PORCENTAJE_GRASA_CORPORAL", new Object[] { porcentajeGrasaCorporal } );
	}

	/** 
	 * Returns all rows from the RC_NUTRICION table that match the criteria 'RELACION_CINTURA_CADERA = :relacionCinturaCadera'.
	 */
	public RcNutricion[] findWhereRelacionCinturaCaderaEquals(String relacionCinturaCadera) throws RcNutricionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RELACION_CINTURA_CADERA = ? ORDER BY RELACION_CINTURA_CADERA", new Object[] { relacionCinturaCadera } );
	}

	/**
	 * Method 'RcNutricionDaoImpl'
	 * 
	 */
	public RcNutricionDaoImpl()
	{
	}

	/**
	 * Method 'RcNutricionDaoImpl'
	 * 
	 * @param userConn
	 */
	public RcNutricionDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "IDEA.RC_NUTRICION";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected RcNutricion fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			RcNutricion dto = new RcNutricion();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected RcNutricion[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			RcNutricion dto = new RcNutricion();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		RcNutricion ret[] = new RcNutricion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(RcNutricion dto, ResultSet rs) throws SQLException
	{
		dto.setIdRcNutricion( rs.getLong( COLUMN_ID_RC_NUTRICION ) );
		dto.setFecha( rs.getTimestamp(COLUMN_FECHA ) );
		dto.setEscalaDietetica( rs.getString( COLUMN_ESCALA_DIETETICA ) );
		dto.setPerimetroAbdominal( rs.getString( COLUMN_PERIMETRO_ABDOMINAL ) );
		dto.setPerimetroCintura( rs.getString( COLUMN_PERIMETRO_CINTURA ) );
		dto.setIndiceCintura( rs.getString( COLUMN_INDICE_CINTURA ) );
		dto.setCinturaCadera( rs.getString( COLUMN_CINTURA_CADERA ) );
		dto.setIndiceCinturaTalla( rs.getString( COLUMN_INDICE_CINTURA_TALLA ) );
		dto.setMasaMuscular( rs.getString( COLUMN_MASA_MUSCULAR ) );
		dto.setMasaGrasaCorporal( rs.getString( COLUMN_MASA_GRASA_CORPORAL ) );
		dto.setPorcentajeGrasaCorporal( rs.getString( COLUMN_PORCENTAJE_GRASA_CORPORAL ) );
		dto.setRelacionCinturaCadera( rs.getString( COLUMN_RELACION_CINTURA_CADERA ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(RcNutricion dto)
	{
		dto.setIdRcNutricionModified( false );
		dto.setFechaModified( false );
		dto.setEscalaDieteticaModified( false );
		dto.setPerimetroAbdominalModified( false );
		dto.setPerimetroCinturaModified( false );
		dto.setIndiceCinturaModified( false );
		dto.setCinturaCaderaModified( false );
		dto.setIndiceCinturaTallaModified( false );
		dto.setMasaMuscularModified( false );
		dto.setMasaGrasaCorporalModified( false );
		dto.setPorcentajeGrasaCorporalModified( false );
		dto.setRelacionCinturaCaderaModified( false );
	}

	/** 
	 * Returns all rows from the RC_NUTRICION table that match the specified arbitrary SQL statement
	 */
	public RcNutricion[] findByDynamicSelect(String sql, Object[] sqlParams) throws RcNutricionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new RcNutricionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the RC_NUTRICION table that match the specified arbitrary SQL statement
	 */
	public RcNutricion[] findByDynamicWhere(String sql, Object[] sqlParams) throws RcNutricionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new RcNutricionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
