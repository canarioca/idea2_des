/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ArrAccesoModulosDaoImpl extends AbstractDAO implements ArrAccesoModulosDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT USUARIO, EEF, IMPLANTE, REGISTRADOR, MESA, TEST, ESTADISTICAS, ADMINISTRACION, CV, LESPERA, HOLTER, ELR, PROTOCOLOS, TEST_ORTO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( USUARIO, EEF, IMPLANTE, REGISTRADOR, MESA, TEST, ESTADISTICAS, ADMINISTRACION, CV, LESPERA, HOLTER, ELR, PROTOCOLOS, TEST_ORTO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET USUARIO = ?, EEF = ?, IMPLANTE = ?, REGISTRADOR = ?, MESA = ?, TEST = ?, ESTADISTICAS = ?, ADMINISTRACION = ?, CV = ?, LESPERA = ?, HOLTER = ?, ELR = ?, PROTOCOLOS = ?, TEST_ORTO = ? WHERE USUARIO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE USUARIO = ?";

	/** 
	 * Index of column USUARIO
	 */
	protected static final int COLUMN_USUARIO = 1;

	/** 
	 * Index of column EEF
	 */
	protected static final int COLUMN_EEF = 2;

	/** 
	 * Index of column IMPLANTE
	 */
	protected static final int COLUMN_IMPLANTE = 3;

	/** 
	 * Index of column REGISTRADOR
	 */
	protected static final int COLUMN_REGISTRADOR = 4;

	/** 
	 * Index of column MESA
	 */
	protected static final int COLUMN_MESA = 5;

	/** 
	 * Index of column TEST
	 */
	protected static final int COLUMN_TEST = 6;

	/** 
	 * Index of column ESTADISTICAS
	 */
	protected static final int COLUMN_ESTADISTICAS = 7;

	/** 
	 * Index of column ADMINISTRACION
	 */
	protected static final int COLUMN_ADMINISTRACION = 8;

	/** 
	 * Index of column CV
	 */
	protected static final int COLUMN_CV = 9;

	/** 
	 * Index of column LESPERA
	 */
	protected static final int COLUMN_LESPERA = 10;

	/** 
	 * Index of column HOLTER
	 */
	protected static final int COLUMN_HOLTER = 11;

	/** 
	 * Index of column ELR
	 */
	protected static final int COLUMN_ELR = 12;

	/** 
	 * Index of column PROTOCOLOS
	 */
	protected static final int COLUMN_PROTOCOLOS = 13;

	/** 
	 * Index of column TEST_ORTO
	 */
	protected static final int COLUMN_TEST_ORTO = 14;
	
	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 14;

	/** 
	 * Index of primary-key column USUARIO
	 */
	protected static final int PK_COLUMN_USUARIO = 1;

	/** 
	 * Inserts a new row in the arr_acceso_modulos table.
	 */
	public ArrAccesoModulosPk insert(ArrAccesoModulos dto) throws ArrAccesoModulosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getUsuario() );
			if (dto.getEef() != null) {
				stmt.setInt( index++, dto.getEef().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getImplante() != null) {
				stmt.setInt( index++, dto.getImplante().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getRegistrador() != null) {
				stmt.setInt( index++, dto.getRegistrador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMesa() != null) {
				stmt.setInt( index++, dto.getMesa().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTest() != null) {
				stmt.setInt( index++, dto.getTest().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEstadisticas() != null) {
				stmt.setInt( index++, dto.getEstadisticas().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAdministracion() != null) {
				stmt.setInt( index++, dto.getAdministracion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCv() != null) {
				stmt.setInt( index++, dto.getCv().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getLespera() != null) {
				stmt.setInt( index++, dto.getLespera().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHolter() != null) {
				stmt.setInt( index++, dto.getHolter().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getElr() != null) {
				stmt.setInt( index++, dto.getElr().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			
			if (dto.getProtocolos() != null) {
				stmt.setInt( index++, dto.getProtocolos().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTestOrto() != null) {
				stmt.setInt( index++, dto.getTestOrto().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.insercion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrAccesoModulosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the arr_acceso_modulos table.
	 */
	public void update(ArrAccesoModulosPk pk, ArrAccesoModulos dto) throws ArrAccesoModulosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getUsuario() );
			if (dto.getEef() != null) {
				stmt.setInt( index++, dto.getEef().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getImplante() != null) {
				stmt.setInt( index++, dto.getImplante().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getRegistrador() != null) {
				stmt.setInt( index++, dto.getRegistrador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMesa() != null) {
				stmt.setInt( index++, dto.getMesa().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTest() != null) {
				stmt.setInt( index++, dto.getTest().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEstadisticas() != null) {
				stmt.setInt( index++, dto.getEstadisticas().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getAdministracion() != null) {
				stmt.setInt( index++, dto.getAdministracion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCv() != null) {
				stmt.setInt( index++, dto.getCv().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getLespera() != null) {
				stmt.setInt( index++, dto.getLespera().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getHolter() != null) {
				stmt.setInt( index++, dto.getHolter().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getElr() != null) {
				stmt.setInt( index++, dto.getElr().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			
			if (dto.getProtocolos() != null) {
				stmt.setInt( index++, dto.getProtocolos().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTestOrto() != null) {
				stmt.setInt( index++, dto.getTestOrto().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( 15, pk.getUsuario() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrAccesoModulosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the arr_acceso_modulos table.
	 */
	public void delete(ArrAccesoModulosPk pk) throws ArrAccesoModulosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getUsuario() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(pk.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrAccesoModulosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the arr_acceso_modulos table that matches the specified primary-key value.
	 */
	public ArrAccesoModulos findByPrimaryKey(ArrAccesoModulosPk pk) throws ArrAccesoModulosDaoException
	{
		return findByPrimaryKey( pk.getUsuario() );
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'USUARIO = :usuario'.
	 */
	public ArrAccesoModulos findByPrimaryKey(String usuario) throws ArrAccesoModulosDaoException
	{
		ArrAccesoModulos ret[] = findByDynamicSelect( SQL_SELECT + " WHERE USUARIO = ?", new Object[] { usuario } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria ''.
	 */
	public ArrAccesoModulos[] findAll() throws ArrAccesoModulosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY USUARIO", null );
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'USUARIO = :usuario'.
	 */
	public ArrAccesoModulos[] findWhereUsuarioEquals(String usuario) throws ArrAccesoModulosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USUARIO = ? ORDER BY USUARIO", new Object[] { usuario } );
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'EEF = :eef'.
	 */
	public ArrAccesoModulos[] findWhereEefEquals(int eef) throws ArrAccesoModulosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EEF = ? ORDER BY EEF", new Object[] {  new Integer(eef) } );
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'IMPLANTE = :implante'.
	 */
	public ArrAccesoModulos[] findWhereImplanteEquals(int implante) throws ArrAccesoModulosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPLANTE = ? ORDER BY IMPLANTE", new Object[] {  new Integer(implante) } );
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'REGISTRADOR = :registrador'.
	 */
	public ArrAccesoModulos[] findWhereRegistradorEquals(int registrador) throws ArrAccesoModulosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REGISTRADOR = ? ORDER BY REGISTRADOR", new Object[] {  new Integer(registrador) } );
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'MESA = :mesa'.
	 */
	public ArrAccesoModulos[] findWhereMesaEquals(int mesa) throws ArrAccesoModulosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MESA = ? ORDER BY MESA", new Object[] {  new Integer(mesa) } );
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'TEST = :test'.
	 */
	public ArrAccesoModulos[] findWhereTestEquals(int test) throws ArrAccesoModulosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TEST = ? ORDER BY TEST", new Object[] {  new Integer(test) } );
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'ESTADISTICAS = :estadisticas'.
	 */
	public ArrAccesoModulos[] findWhereEstadisticasEquals(int estadisticas) throws ArrAccesoModulosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTADISTICAS = ? ORDER BY ESTADISTICAS", new Object[] {  new Integer(estadisticas) } );
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'ADMINISTRACION = :administracion'.
	 */
	public ArrAccesoModulos[] findWhereAdministracionEquals(int administracion) throws ArrAccesoModulosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ADMINISTRACION = ? ORDER BY ADMINISTRACION", new Object[] {  new Integer(administracion) } );
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'CV = :cv'.
	 */
	public ArrAccesoModulos[] findWhereCvEquals(int cv) throws ArrAccesoModulosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CV = ? ORDER BY CV", new Object[] {  new Integer(cv) } );
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'LESPERA = :lespera'.
	 */
	public ArrAccesoModulos[] findWhereLesperaEquals(int lespera) throws ArrAccesoModulosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LESPERA = ? ORDER BY LESPERA", new Object[] {  new Integer(lespera) } );
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'HOLTER = :holter'.
	 */
	public ArrAccesoModulos[] findWhereHolterEquals(int holter) throws ArrAccesoModulosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HOLTER = ? ORDER BY HOLTER", new Object[] {  new Integer(holter) } );
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'ELR = :elr'.
	 */
	public ArrAccesoModulos[] findWhereElrEquals(int elr) throws ArrAccesoModulosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ELR = ? ORDER BY ELR", new Object[] {  new Integer(elr) } );
	}
	
	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'PROTOCOLOS = :protocolos'.
	 */
	public ArrAccesoModulos[] findWhereProtocolosEquals(int protocolos) throws ArrAccesoModulosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROTOCOLOS = ? ORDER BY PROTOCOLOS", new Object[] {  new Integer(protocolos) } );
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'TEST_ORTO = :testOrto'.
	 */
	public ArrAccesoModulos[] findWhereTestOrtoEquals(int testOrto) throws ArrAccesoModulosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TEST_ORTO = ? ORDER BY TEST_ORTO", new Object[] {  new Integer(testOrto) } );
	}

	/**
	 * Method 'ArrAccesoModulosDaoImpl'
	 * 
	 */
	public ArrAccesoModulosDaoImpl()
	{
	}

	public ArrAccesoModulosDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	
	/**
	 * Method 'ArrAccesoModulosDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrAccesoModulosDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "arr_acceso_modulos";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrAccesoModulos fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrAccesoModulos dto = new ArrAccesoModulos();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrAccesoModulos[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrAccesoModulos dto = new ArrAccesoModulos();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrAccesoModulos ret[] = new ArrAccesoModulos[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrAccesoModulos dto, ResultSet rs) throws SQLException
	{
		dto.setUsuario( rs.getString( COLUMN_USUARIO ) );
		dto.setEef( new Integer( rs.getInt(COLUMN_EEF) ) );
		if (rs.wasNull()) {
			dto.setEef( null );
		}
		
		dto.setImplante( new Integer( rs.getInt(COLUMN_IMPLANTE) ) );
		if (rs.wasNull()) {
			dto.setImplante( null );
		}
		
		dto.setRegistrador( new Integer( rs.getInt(COLUMN_REGISTRADOR) ) );
		if (rs.wasNull()) {
			dto.setRegistrador( null );
		}
		
		dto.setMesa( new Integer( rs.getInt(COLUMN_MESA) ) );
		if (rs.wasNull()) {
			dto.setMesa( null );
		}
		
		dto.setTest( new Integer( rs.getInt(COLUMN_TEST) ) );
		if (rs.wasNull()) {
			dto.setTest( null );
		}
		
		dto.setEstadisticas( new Integer( rs.getInt(COLUMN_ESTADISTICAS) ) );
		if (rs.wasNull()) {
			dto.setEstadisticas( null );
		}
		
		dto.setAdministracion( new Integer( rs.getInt(COLUMN_ADMINISTRACION) ) );
		if (rs.wasNull()) {
			dto.setAdministracion( null );
		}
		
		dto.setCv( new Integer( rs.getInt(COLUMN_CV) ) );
		if (rs.wasNull()) {
			dto.setCv( null );
		}
		
		dto.setLespera( new Integer( rs.getInt(COLUMN_LESPERA) ) );
		if (rs.wasNull()) {
			dto.setLespera( null );
		}
		
		dto.setHolter( new Integer( rs.getInt(COLUMN_HOLTER) ) );
		if (rs.wasNull()) {
			dto.setHolter( null );
		}
		
		dto.setElr( new Integer( rs.getInt(COLUMN_ELR) ) );
		if (rs.wasNull()) {
			dto.setElr( null );
		}
		
		dto.setProtocolos( new Integer( rs.getInt(COLUMN_PROTOCOLOS) ) );
		if (rs.wasNull()) {
			dto.setProtocolos( null );
		}
		
		dto.setTestOrto( new Integer( rs.getInt(COLUMN_TEST_ORTO) ) );
		if (rs.wasNull()) {
			dto.setTestOrto( null );
		}
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrAccesoModulos dto)
	{
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the specified arbitrary SQL statement
	 */
	public ArrAccesoModulos[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrAccesoModulosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrAccesoModulosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the specified arbitrary SQL statement
	 */
	public ArrAccesoModulos[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrAccesoModulosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrAccesoModulosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
