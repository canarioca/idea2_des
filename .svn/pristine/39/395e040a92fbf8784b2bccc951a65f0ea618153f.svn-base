/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ImpImplanteElectrodosDaoImpl extends AbstractDAO implements ImpImplanteElectrodosDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDIMPELECTRODOS, IDELECTRODO, NUMSERIE, IDHOJAIMP, IDEVOLUCION, IDSEG, ONDARP_IMP, UMBRALV_IMP, UMBRALMS_IMP, SLEWRATE, IMPOHM_IMP, IMPMS_IMP, IMPV_IMP, ESTIMFREN, MOTIVOEXABAND, MOTIVORECAMBIO, MOTIVORECOLOCACION, TIPOELECTRODO, DURIMPULSO, VOLTAJE, SENSIBILIDAD, POLDETECCION, POLESTIMULACION, CAPTURAAUTO, ONDARP_EV, UMBRALV_EV, UMBRALMS_EV, IMPOHM_EV, IMPV_EV, IMPMS_EV, VIA, LATERALIDAD, CAMARA, ZONACAMARA, PORCION, ESTADO, CARACTER, VECTORVI1, VECTORVI2, FECHAIMPLANTE, FECHAMOD, IMPOHMDESFIB_IMP, IMPOHMDESFIB_EV FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDIMPELECTRODOS, IDELECTRODO, NUMSERIE, IDHOJAIMP, IDEVOLUCION, IDSEG, ONDARP_IMP, UMBRALV_IMP, UMBRALMS_IMP, SLEWRATE, IMPOHM_IMP, IMPMS_IMP, IMPV_IMP, ESTIMFREN, MOTIVOEXABAND, MOTIVORECAMBIO, MOTIVORECOLOCACION, TIPOELECTRODO, DURIMPULSO, VOLTAJE, SENSIBILIDAD, POLDETECCION, POLESTIMULACION, CAPTURAAUTO, ONDARP_EV, UMBRALV_EV, UMBRALMS_EV, IMPOHM_EV, IMPV_EV, IMPMS_EV, VIA, LATERALIDAD, CAMARA, ZONACAMARA, PORCION, ESTADO, CARACTER, VECTORVI1, VECTORVI2, FECHAIMPLANTE, FECHAMOD, IMPOHMDESFIB_IMP, IMPOHMDESFIB_EV ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDIMPELECTRODOS = ?, IDELECTRODO = ?, NUMSERIE = ?, IDHOJAIMP = ?, IDEVOLUCION = ?, IDSEG = ?, ONDARP_IMP = ?, UMBRALV_IMP = ?, UMBRALMS_IMP = ?, SLEWRATE = ?, IMPOHM_IMP = ?, IMPMS_IMP = ?, IMPV_IMP = ?, ESTIMFREN = ?, MOTIVOEXABAND = ?, MOTIVORECAMBIO = ?, MOTIVORECOLOCACION = ?, TIPOELECTRODO = ?, DURIMPULSO = ?, VOLTAJE = ?, SENSIBILIDAD = ?, POLDETECCION = ?, POLESTIMULACION = ?, CAPTURAAUTO = ?, ONDARP_EV = ?, UMBRALV_EV = ?, UMBRALMS_EV = ?, IMPOHM_EV = ?, IMPV_EV = ?, IMPMS_EV = ?, VIA = ?, LATERALIDAD = ?, CAMARA = ?, ZONACAMARA = ?, PORCION = ?, ESTADO = ?, CARACTER = ?, VECTORVI1 = ?, VECTORVI2 = ?, FECHAIMPLANTE = ?, FECHAMOD = ?, IMPOHMDESFIB_IMP = ?, IMPOHMDESFIB_EV = ? WHERE IDIMPELECTRODOS = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDIMPELECTRODOS = ?";

	/** 
	 * Index of column IDIMPELECTRODOS
	 */
	protected static final int COLUMN_IDIMPELECTRODOS = 1;

	/** 
	 * Index of column IDELECTRODO
	 */
	protected static final int COLUMN_IDELECTRODO = 2;

	/** 
	 * Index of column NUMSERIE
	 */
	protected static final int COLUMN_NUMSERIE = 3;

	/** 
	 * Index of column IDHOJAIMP
	 */
	protected static final int COLUMN_IDHOJAIMP = 4;

	/** 
	 * Index of column IDEVOLUCION
	 */
	protected static final int COLUMN_IDEVOLUCION = 5;

	/** 
	 * Index of column IDSEG
	 */
	protected static final int COLUMN_IDSEG = 6;

	/** 
	 * Index of column ONDARP_IMP
	 */
	protected static final int COLUMN_ONDARP_IMP = 7;

	/** 
	 * Index of column UMBRALV_IMP
	 */
	protected static final int COLUMN_UMBRALV_IMP = 8;

	/** 
	 * Index of column UMBRALMS_IMP
	 */
	protected static final int COLUMN_UMBRALMS_IMP = 9;

	/** 
	 * Index of column SLEWRATE
	 */
	protected static final int COLUMN_SLEWRATE = 10;

	/** 
	 * Index of column IMPOHM_IMP
	 */
	protected static final int COLUMN_IMPOHM_IMP = 11;

	/** 
	 * Index of column IMPMS_IMP
	 */
	protected static final int COLUMN_IMPMS_IMP = 12;

	/** 
	 * Index of column IMPV_IMP
	 */
	protected static final int COLUMN_IMPV_IMP = 13;

	/** 
	 * Index of column ESTIMFREN
	 */
	protected static final int COLUMN_ESTIMFREN = 14;

	/** 
	 * Index of column MOTIVOEXABAND
	 */
	protected static final int COLUMN_MOTIVOEXABAND = 15;

	/** 
	 * Index of column MOTIVORECAMBIO
	 */
	protected static final int COLUMN_MOTIVORECAMBIO = 16;

	/** 
	 * Index of column MOTIVORECOLOCACION
	 */
	protected static final int COLUMN_MOTIVORECOLOCACION = 17;

	/** 
	 * Index of column TIPOELECTRODO
	 */
	protected static final int COLUMN_TIPOELECTRODO = 18;

	/** 
	 * Index of column DURIMPULSO
	 */
	protected static final int COLUMN_DURIMPULSO = 19;

	/** 
	 * Index of column VOLTAJE
	 */
	protected static final int COLUMN_VOLTAJE = 20;

	/** 
	 * Index of column SENSIBILIDAD
	 */
	protected static final int COLUMN_SENSIBILIDAD = 21;

	/** 
	 * Index of column POLDETECCION
	 */
	protected static final int COLUMN_POLDETECCION = 22;

	/** 
	 * Index of column POLESTIMULACION
	 */
	protected static final int COLUMN_POLESTIMULACION = 23;

	/** 
	 * Index of column CAPTURAAUTO
	 */
	protected static final int COLUMN_CAPTURAAUTO = 24;

	/** 
	 * Index of column ONDARP_EV
	 */
	protected static final int COLUMN_ONDARP_EV = 25;

	/** 
	 * Index of column UMBRALV_EV
	 */
	protected static final int COLUMN_UMBRALV_EV = 26;

	/** 
	 * Index of column UMBRALMS_EV
	 */
	protected static final int COLUMN_UMBRALMS_EV = 27;

	/** 
	 * Index of column IMPOHM_EV
	 */
	protected static final int COLUMN_IMPOHM_EV = 28;

	/** 
	 * Index of column IMPV_EV
	 */
	protected static final int COLUMN_IMPV_EV = 29;

	/** 
	 * Index of column IMPMS_EV
	 */
	protected static final int COLUMN_IMPMS_EV = 30;

	/** 
	 * Index of column VIA
	 */
	protected static final int COLUMN_VIA = 31;

	/** 
	 * Index of column LATERALIDAD
	 */
	protected static final int COLUMN_LATERALIDAD = 32;

	/** 
	 * Index of column CAMARA
	 */
	protected static final int COLUMN_CAMARA = 33;

	/** 
	 * Index of column ZONACAMARA
	 */
	protected static final int COLUMN_ZONACAMARA = 34;

	/** 
	 * Index of column PORCION
	 */
	protected static final int COLUMN_PORCION = 35;

	/** 
	 * Index of column ESTADO
	 */
	protected static final int COLUMN_ESTADO = 36;

	/** 
	 * Index of column CARACTER
	 */
	protected static final int COLUMN_CARACTER = 37;

	/** 
	 * Index of column VECTORVI1
	 */
	protected static final int COLUMN_VECTORVI1 = 38;

	/** 
	 * Index of column VECTORVI2
	 */
	protected static final int COLUMN_VECTORVI2 = 39;

	/** 
	 * Index of column FECHAIMPLANTE
	 */
	protected static final int COLUMN_FECHAIMPLANTE = 40;

	/** 
	 * Index of column FECHAMOD
	 */
	protected static final int COLUMN_FECHAMOD = 41;

	/** 
	 * Index of column IMPOHMDESFIB_IMP
	 */
	protected static final int COLUMN_IMPOHMDESFIB_IMP = 42;

	/** 
	 * Index of column IMPOHMDESFIB_EV
	 */
	protected static final int COLUMN_IMPOHMDESFIB_EV = 43;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 43;

	/** 
	 * Index of primary-key column IDIMPELECTRODOS
	 */
	protected static final int PK_COLUMN_IDIMPELECTRODOS = 1;

	/** 
	 * Inserts a new row in the imp_implante_electrodos table.
	 */
	public ImpImplanteElectrodosPk insert(ImpImplanteElectrodos dto) throws ImpImplanteElectrodosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdimpelectrodos() != null) {
				stmt.setInt( index++, dto.getIdimpelectrodos().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdelectrodo() != null) {
				stmt.setInt( index++, dto.getIdelectrodo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNumserie() );
			if (dto.getIdhojaimp() != null) {
				stmt.setInt( index++, dto.getIdhojaimp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdevolucion() != null) {
				stmt.setInt( index++, dto.getIdevolucion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdseg() != null) {
				stmt.setInt( index++, dto.getIdseg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getOndarpImp() );
			stmt.setString( index++, dto.getUmbralvImp() );
			stmt.setString( index++, dto.getUmbralmsImp() );
			stmt.setString( index++, dto.getSlewrate() );
			stmt.setString( index++, dto.getImpohmImp() );
			stmt.setString( index++, dto.getImpmsImp() );
			stmt.setString( index++, dto.getImpvImp() );
			stmt.setString( index++, dto.getEstimfren() );
			if (dto.getMotivoexaband() != null) {
				stmt.setInt( index++, dto.getMotivoexaband().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMotivorecambio() != null) {
				stmt.setInt( index++, dto.getMotivorecambio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMotivorecolocacion() != null) {
				stmt.setInt( index++, dto.getMotivorecolocacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getTipoelectrodo() );
			stmt.setString( index++, dto.getDurimpulso() );
			stmt.setString( index++, dto.getVoltaje() );
			stmt.setString( index++, dto.getSensibilidad() );
			stmt.setString( index++, dto.getPoldeteccion() );
			stmt.setString( index++, dto.getPolestimulacion() );
			if (dto.getCapturaauto() != null) {
				stmt.setShort( index++, dto.getCapturaauto().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getOndarpEv() );
			stmt.setString( index++, dto.getUmbralvEv() );
			stmt.setString( index++, dto.getUmbralmsEv() );
			stmt.setString( index++, dto.getImpohmEv() );
			stmt.setString( index++, dto.getImpvEv() );
			stmt.setString( index++, dto.getImpmsEv() );
			if (dto.getVia() != null) {
				stmt.setInt( index++, dto.getVia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getLateralidad() != null) {
				stmt.setInt( index++, dto.getLateralidad().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCamara() != null) {
				stmt.setInt( index++, dto.getCamara().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getZonacamara() != null) {
				stmt.setInt( index++, dto.getZonacamara().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPorcion() != null) {
				stmt.setInt( index++, dto.getPorcion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEstado() != null) {
				stmt.setInt( index++, dto.getEstado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCaracter() != null) {
				stmt.setInt( index++, dto.getCaracter().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getVectorvi1() != null) {
				stmt.setInt( index++, dto.getVectorvi1().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getVectorvi2() != null) {
				stmt.setInt( index++, dto.getVectorvi2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFechaimplante()==null ? null : new java.sql.Date( dto.getFechaimplante().getTime() ) );
			stmt.setDate(index++, dto.getFechamod()==null ? null : new java.sql.Date( dto.getFechamod().getTime() ) );
			stmt.setString( index++, dto.getImpohmdesfibImp() );
			stmt.setString( index++, dto.getImpohmdesfibEv() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdimpelectrodos( new Integer( rs.getInt(1) ) );
			}
		
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpImplanteElectrodosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the imp_implante_electrodos table.
	 */
	public void update(ImpImplanteElectrodosPk pk, ImpImplanteElectrodos dto) throws ImpImplanteElectrodosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdimpelectrodos() != null) {
				stmt.setInt( index++, dto.getIdimpelectrodos().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdelectrodo() != null) {
				stmt.setInt( index++, dto.getIdelectrodo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNumserie() );
			if (dto.getIdhojaimp() != null) {
				stmt.setInt( index++, dto.getIdhojaimp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdevolucion() != null) {
				stmt.setInt( index++, dto.getIdevolucion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdseg() != null) {
				stmt.setInt( index++, dto.getIdseg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getOndarpImp() );
			stmt.setString( index++, dto.getUmbralvImp() );
			stmt.setString( index++, dto.getUmbralmsImp() );
			stmt.setString( index++, dto.getSlewrate() );
			stmt.setString( index++, dto.getImpohmImp() );
			stmt.setString( index++, dto.getImpmsImp() );
			stmt.setString( index++, dto.getImpvImp() );
			stmt.setString( index++, dto.getEstimfren() );
			if (dto.getMotivoexaband() != null) {
				stmt.setInt( index++, dto.getMotivoexaband().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMotivorecambio() != null) {
				stmt.setInt( index++, dto.getMotivorecambio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMotivorecolocacion() != null) {
				stmt.setInt( index++, dto.getMotivorecolocacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getTipoelectrodo() );
			stmt.setString( index++, dto.getDurimpulso() );
			stmt.setString( index++, dto.getVoltaje() );
			stmt.setString( index++, dto.getSensibilidad() );
			stmt.setString( index++, dto.getPoldeteccion() );
			stmt.setString( index++, dto.getPolestimulacion() );
			if (dto.getCapturaauto() != null) {
				stmt.setShort( index++, dto.getCapturaauto().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getOndarpEv() );
			stmt.setString( index++, dto.getUmbralvEv() );
			stmt.setString( index++, dto.getUmbralmsEv() );
			stmt.setString( index++, dto.getImpohmEv() );
			stmt.setString( index++, dto.getImpvEv() );
			stmt.setString( index++, dto.getImpmsEv() );
			if (dto.getVia() != null) {
				stmt.setInt( index++, dto.getVia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getLateralidad() != null) {
				stmt.setInt( index++, dto.getLateralidad().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCamara() != null) {
				stmt.setInt( index++, dto.getCamara().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getZonacamara() != null) {
				stmt.setInt( index++, dto.getZonacamara().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPorcion() != null) {
				stmt.setInt( index++, dto.getPorcion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEstado() != null) {
				stmt.setInt( index++, dto.getEstado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCaracter() != null) {
				stmt.setInt( index++, dto.getCaracter().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getVectorvi1() != null) {
				stmt.setInt( index++, dto.getVectorvi1().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getVectorvi2() != null) {
				stmt.setInt( index++, dto.getVectorvi2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFechaimplante()==null ? null : new java.sql.Date( dto.getFechaimplante().getTime() ) );
			stmt.setDate(index++, dto.getFechamod()==null ? null : new java.sql.Date( dto.getFechamod().getTime() ) );
			stmt.setString( index++, dto.getImpohmdesfibImp() );
			stmt.setString( index++, dto.getImpohmdesfibEv() );
			if (pk.getIdimpelectrodos() != null) {
				stmt.setInt( 44, pk.getIdimpelectrodos().intValue() );
			} else {
				stmt.setNull(44, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpImplanteElectrodosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the imp_implante_electrodos table.
	 */
	public void delete(ImpImplanteElectrodosPk pk) throws ImpImplanteElectrodosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdimpelectrodos() != null) {
				stmt.setInt( 1, pk.getIdimpelectrodos().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpImplanteElectrodosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the imp_implante_electrodos table that matches the specified primary-key value.
	 */
	public ImpImplanteElectrodos findByPrimaryKey(ImpImplanteElectrodosPk pk) throws ImpImplanteElectrodosDaoException
	{
		return findByPrimaryKey( pk.getIdimpelectrodos() );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'IDIMPELECTRODOS = :idimpelectrodos'.
	 */
	public ImpImplanteElectrodos findByPrimaryKey(Integer idimpelectrodos) throws ImpImplanteElectrodosDaoException
	{
		ImpImplanteElectrodos ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDIMPELECTRODOS = ?", new Object[] { idimpelectrodos } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria ''.
	 */
	public ImpImplanteElectrodos[] findAll() throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDIMPELECTRODOS", null );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'IDIMPELECTRODOS = :idimpelectrodos'.
	 */
	public ImpImplanteElectrodos[] findWhereIdimpelectrodosEquals(int idimpelectrodos) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDIMPELECTRODOS = ? ORDER BY IDIMPELECTRODOS", new Object[] {  new Integer(idimpelectrodos) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'IDELECTRODO = :idelectrodo'.
	 */
	public ImpImplanteElectrodos[] findWhereIdelectrodoEquals(int idelectrodo) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDELECTRODO = ? ORDER BY IDELECTRODO", new Object[] {  new Integer(idelectrodo) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'NUMSERIE = :numserie'.
	 */
	public ImpImplanteElectrodos[] findWhereNumserieEquals(String numserie) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMSERIE = ? ORDER BY NUMSERIE", new Object[] { numserie } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'IDHOJAIMP = :idhojaimp'.
	 */
	public ImpImplanteElectrodos[] findWhereIdhojaimpEquals(int idhojaimp) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDHOJAIMP = ? ORDER BY IDHOJAIMP", new Object[] {  new Integer(idhojaimp) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'IDEVOLUCION = :idevolucion'.
	 */
	public ImpImplanteElectrodos[] findWhereIdevolucionEquals(int idevolucion) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDEVOLUCION = ? ORDER BY IDEVOLUCION", new Object[] {  new Integer(idevolucion) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'IDSEG = :idseg'.
	 */
	public ImpImplanteElectrodos[] findWhereIdsegEquals(int idseg) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDSEG = ? ORDER BY IDSEG", new Object[] {  new Integer(idseg) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'ONDARP_IMP = :ondarpImp'.
	 */
	public ImpImplanteElectrodos[] findWhereOndarpImpEquals(String ondarpImp) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ONDARP_IMP = ? ORDER BY ONDARP_IMP", new Object[] { ondarpImp } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'UMBRALV_IMP = :umbralvImp'.
	 */
	public ImpImplanteElectrodos[] findWhereUmbralvImpEquals(String umbralvImp) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UMBRALV_IMP = ? ORDER BY UMBRALV_IMP", new Object[] { umbralvImp } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'UMBRALMS_IMP = :umbralmsImp'.
	 */
	public ImpImplanteElectrodos[] findWhereUmbralmsImpEquals(String umbralmsImp) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UMBRALMS_IMP = ? ORDER BY UMBRALMS_IMP", new Object[] { umbralmsImp } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'SLEWRATE = :slewrate'.
	 */
	public ImpImplanteElectrodos[] findWhereSlewrateEquals(String slewrate) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SLEWRATE = ? ORDER BY SLEWRATE", new Object[] { slewrate } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'IMPOHM_IMP = :impohmImp'.
	 */
	public ImpImplanteElectrodos[] findWhereImpohmImpEquals(String impohmImp) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPOHM_IMP = ? ORDER BY IMPOHM_IMP", new Object[] { impohmImp } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'IMPMS_IMP = :impmsImp'.
	 */
	public ImpImplanteElectrodos[] findWhereImpmsImpEquals(String impmsImp) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPMS_IMP = ? ORDER BY IMPMS_IMP", new Object[] { impmsImp } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'IMPV_IMP = :impvImp'.
	 */
	public ImpImplanteElectrodos[] findWhereImpvImpEquals(String impvImp) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPV_IMP = ? ORDER BY IMPV_IMP", new Object[] { impvImp } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'ESTIMFREN = :estimfren'.
	 */
	public ImpImplanteElectrodos[] findWhereEstimfrenEquals(String estimfren) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTIMFREN = ? ORDER BY ESTIMFREN", new Object[] { estimfren } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'MOTIVOEXABAND = :motivoexaband'.
	 */
	public ImpImplanteElectrodos[] findWhereMotivoexabandEquals(int motivoexaband) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOTIVOEXABAND = ? ORDER BY MOTIVOEXABAND", new Object[] {  new Integer(motivoexaband) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'MOTIVORECAMBIO = :motivorecambio'.
	 */
	public ImpImplanteElectrodos[] findWhereMotivorecambioEquals(int motivorecambio) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOTIVORECAMBIO = ? ORDER BY MOTIVORECAMBIO", new Object[] {  new Integer(motivorecambio) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'MOTIVORECOLOCACION = :motivorecolocacion'.
	 */
	public ImpImplanteElectrodos[] findWhereMotivorecolocacionEquals(int motivorecolocacion) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOTIVORECOLOCACION = ? ORDER BY MOTIVORECOLOCACION", new Object[] {  new Integer(motivorecolocacion) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'TIPOELECTRODO = :tipoelectrodo'.
	 */
	public ImpImplanteElectrodos[] findWhereTipoelectrodoEquals(String tipoelectrodo) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPOELECTRODO = ? ORDER BY TIPOELECTRODO", new Object[] { tipoelectrodo } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'DURIMPULSO = :durimpulso'.
	 */
	public ImpImplanteElectrodos[] findWhereDurimpulsoEquals(String durimpulso) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DURIMPULSO = ? ORDER BY DURIMPULSO", new Object[] { durimpulso } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'VOLTAJE = :voltaje'.
	 */
	public ImpImplanteElectrodos[] findWhereVoltajeEquals(String voltaje) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VOLTAJE = ? ORDER BY VOLTAJE", new Object[] { voltaje } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'SENSIBILIDAD = :sensibilidad'.
	 */
	public ImpImplanteElectrodos[] findWhereSensibilidadEquals(String sensibilidad) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SENSIBILIDAD = ? ORDER BY SENSIBILIDAD", new Object[] { sensibilidad } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'POLDETECCION = :poldeteccion'.
	 */
	public ImpImplanteElectrodos[] findWherePoldeteccionEquals(String poldeteccion) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE POLDETECCION = ? ORDER BY POLDETECCION", new Object[] { poldeteccion } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'POLESTIMULACION = :polestimulacion'.
	 */
	public ImpImplanteElectrodos[] findWherePolestimulacionEquals(String polestimulacion) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE POLESTIMULACION = ? ORDER BY POLESTIMULACION", new Object[] { polestimulacion } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'CAPTURAAUTO = :capturaauto'.
	 */
	public ImpImplanteElectrodos[] findWhereCapturaautoEquals(short capturaauto) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAPTURAAUTO = ? ORDER BY CAPTURAAUTO", new Object[] {  new Short(capturaauto) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'ONDARP_EV = :ondarpEv'.
	 */
	public ImpImplanteElectrodos[] findWhereOndarpEvEquals(String ondarpEv) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ONDARP_EV = ? ORDER BY ONDARP_EV", new Object[] { ondarpEv } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'UMBRALV_EV = :umbralvEv'.
	 */
	public ImpImplanteElectrodos[] findWhereUmbralvEvEquals(String umbralvEv) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UMBRALV_EV = ? ORDER BY UMBRALV_EV", new Object[] { umbralvEv } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'UMBRALMS_EV = :umbralmsEv'.
	 */
	public ImpImplanteElectrodos[] findWhereUmbralmsEvEquals(String umbralmsEv) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UMBRALMS_EV = ? ORDER BY UMBRALMS_EV", new Object[] { umbralmsEv } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'IMPOHM_EV = :impohmEv'.
	 */
	public ImpImplanteElectrodos[] findWhereImpohmEvEquals(String impohmEv) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPOHM_EV = ? ORDER BY IMPOHM_EV", new Object[] { impohmEv } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'IMPV_EV = :impvEv'.
	 */
	public ImpImplanteElectrodos[] findWhereImpvEvEquals(String impvEv) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPV_EV = ? ORDER BY IMPV_EV", new Object[] { impvEv } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'IMPMS_EV = :impmsEv'.
	 */
	public ImpImplanteElectrodos[] findWhereImpmsEvEquals(String impmsEv) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPMS_EV = ? ORDER BY IMPMS_EV", new Object[] { impmsEv } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'VIA = :via'.
	 */
	public ImpImplanteElectrodos[] findWhereViaEquals(int via) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VIA = ? ORDER BY VIA", new Object[] {  new Integer(via) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'LATERALIDAD = :lateralidad'.
	 */
	public ImpImplanteElectrodos[] findWhereLateralidadEquals(int lateralidad) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LATERALIDAD = ? ORDER BY LATERALIDAD", new Object[] {  new Integer(lateralidad) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'CAMARA = :camara'.
	 */
	public ImpImplanteElectrodos[] findWhereCamaraEquals(int camara) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMARA = ? ORDER BY CAMARA", new Object[] {  new Integer(camara) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'ZONACAMARA = :zonacamara'.
	 */
	public ImpImplanteElectrodos[] findWhereZonacamaraEquals(int zonacamara) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ZONACAMARA = ? ORDER BY ZONACAMARA", new Object[] {  new Integer(zonacamara) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'PORCION = :porcion'.
	 */
	public ImpImplanteElectrodos[] findWherePorcionEquals(int porcion) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PORCION = ? ORDER BY PORCION", new Object[] {  new Integer(porcion) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'ESTADO = :estado'.
	 */
	public ImpImplanteElectrodos[] findWhereEstadoEquals(int estado) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTADO = ? ORDER BY ESTADO", new Object[] {  new Integer(estado) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'CARACTER = :caracter'.
	 */
	public ImpImplanteElectrodos[] findWhereCaracterEquals(int caracter) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CARACTER = ? ORDER BY CARACTER", new Object[] {  new Integer(caracter) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'VECTORVI1 = :vectorvi1'.
	 */
	public ImpImplanteElectrodos[] findWhereVectorvi1Equals(int vectorvi1) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VECTORVI1 = ? ORDER BY VECTORVI1", new Object[] {  new Integer(vectorvi1) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'VECTORVI2 = :vectorvi2'.
	 */
	public ImpImplanteElectrodos[] findWhereVectorvi2Equals(int vectorvi2) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VECTORVI2 = ? ORDER BY VECTORVI2", new Object[] {  new Integer(vectorvi2) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'FECHAIMPLANTE = :fechaimplante'.
	 */
	public ImpImplanteElectrodos[] findWhereFechaimplanteEquals(Date fechaimplante) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAIMPLANTE = ? ORDER BY FECHAIMPLANTE", new Object[] { fechaimplante==null ? null : new java.sql.Date( fechaimplante.getTime() ) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'FECHAMOD = :fechamod'.
	 */
	public ImpImplanteElectrodos[] findWhereFechamodEquals(Date fechamod) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAMOD = ? ORDER BY FECHAMOD", new Object[] { fechamod==null ? null : new java.sql.Date( fechamod.getTime() ) } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'IMPOHMDESFIB_IMP = :impohmdesfibImp'.
	 */
	public ImpImplanteElectrodos[] findWhereImpohmdesfibImpEquals(String impohmdesfibImp) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPOHMDESFIB_IMP = ? ORDER BY IMPOHMDESFIB_IMP", new Object[] { impohmdesfibImp } );
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the criteria 'IMPOHMDESFIB_EV = :impohmdesfibEv'.
	 */
	public ImpImplanteElectrodos[] findWhereImpohmdesfibEvEquals(String impohmdesfibEv) throws ImpImplanteElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPOHMDESFIB_EV = ? ORDER BY IMPOHMDESFIB_EV", new Object[] { impohmdesfibEv } );
	}

	/**
	 * Method 'ImpImplanteElectrodosDaoImpl'
	 * 
	 */
	public ImpImplanteElectrodosDaoImpl()
	{
	}
	public ImpImplanteElectrodosDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ImpImplanteElectrodosDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ImpImplanteElectrodosDaoImpl'
	 * 
	 * @param userConn
	 */
	public ImpImplanteElectrodosDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.imp_implante_electrodos";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ImpImplanteElectrodos fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ImpImplanteElectrodos dto = new ImpImplanteElectrodos();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ImpImplanteElectrodos[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ImpImplanteElectrodos dto = new ImpImplanteElectrodos();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ImpImplanteElectrodos ret[] = new ImpImplanteElectrodos[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ImpImplanteElectrodos dto, ResultSet rs) throws SQLException
	{
		dto.setIdimpelectrodos( new Integer( rs.getInt(COLUMN_IDIMPELECTRODOS) ) );
		dto.setIdelectrodo( new Integer( rs.getInt(COLUMN_IDELECTRODO) ) );
		dto.setNumserie( rs.getString( COLUMN_NUMSERIE ) );
		dto.setIdhojaimp( new Integer( rs.getInt(COLUMN_IDHOJAIMP) ) );
		if (rs.wasNull()) {
			dto.setIdhojaimp( null );
		}
		
		dto.setIdevolucion( new Integer( rs.getInt(COLUMN_IDEVOLUCION) ) );
		if (rs.wasNull()) {
			dto.setIdevolucion( null );
		}
		
		dto.setIdseg( new Integer( rs.getInt(COLUMN_IDSEG) ) );
		if (rs.wasNull()) {
			dto.setIdseg( null );
		}
		
		dto.setOndarpImp( rs.getString( COLUMN_ONDARP_IMP ) );
		dto.setUmbralvImp( rs.getString( COLUMN_UMBRALV_IMP ) );
		dto.setUmbralmsImp( rs.getString( COLUMN_UMBRALMS_IMP ) );
		dto.setSlewrate( rs.getString( COLUMN_SLEWRATE ) );
		dto.setImpohmImp( rs.getString( COLUMN_IMPOHM_IMP ) );
		dto.setImpmsImp( rs.getString( COLUMN_IMPMS_IMP ) );
		dto.setImpvImp( rs.getString( COLUMN_IMPV_IMP ) );
		dto.setEstimfren( rs.getString( COLUMN_ESTIMFREN ) );
		dto.setMotivoexaband( new Integer( rs.getInt(COLUMN_MOTIVOEXABAND) ) );
		if (rs.wasNull()) {
			dto.setMotivoexaband( null );
		}
		
		dto.setMotivorecambio( new Integer( rs.getInt(COLUMN_MOTIVORECAMBIO) ) );
		if (rs.wasNull()) {
			dto.setMotivorecambio( null );
		}
		
		dto.setMotivorecolocacion( new Integer( rs.getInt(COLUMN_MOTIVORECOLOCACION) ) );
		if (rs.wasNull()) {
			dto.setMotivorecolocacion( null );
		}
		
		dto.setTipoelectrodo( rs.getString( COLUMN_TIPOELECTRODO ) );
		dto.setDurimpulso( rs.getString( COLUMN_DURIMPULSO ) );
		dto.setVoltaje( rs.getString( COLUMN_VOLTAJE ) );
		dto.setSensibilidad( rs.getString( COLUMN_SENSIBILIDAD ) );
		dto.setPoldeteccion( rs.getString( COLUMN_POLDETECCION ) );
		dto.setPolestimulacion( rs.getString( COLUMN_POLESTIMULACION ) );
		dto.setCapturaauto( new Short( rs.getShort(COLUMN_CAPTURAAUTO) ) );
		if (rs.wasNull()) {
			dto.setCapturaauto( null );
		}
		
		dto.setOndarpEv( rs.getString( COLUMN_ONDARP_EV ) );
		dto.setUmbralvEv( rs.getString( COLUMN_UMBRALV_EV ) );
		dto.setUmbralmsEv( rs.getString( COLUMN_UMBRALMS_EV ) );
		dto.setImpohmEv( rs.getString( COLUMN_IMPOHM_EV ) );
		dto.setImpvEv( rs.getString( COLUMN_IMPV_EV ) );
		dto.setImpmsEv( rs.getString( COLUMN_IMPMS_EV ) );
		dto.setVia( new Integer( rs.getInt(COLUMN_VIA) ) );
		if (rs.wasNull()) {
			dto.setVia( null );
		}
		
		dto.setLateralidad( new Integer( rs.getInt(COLUMN_LATERALIDAD) ) );
		if (rs.wasNull()) {
			dto.setLateralidad( null );
		}
		
		dto.setCamara( new Integer( rs.getInt(COLUMN_CAMARA) ) );
		if (rs.wasNull()) {
			dto.setCamara( null );
		}
		
		dto.setZonacamara( new Integer( rs.getInt(COLUMN_ZONACAMARA) ) );
		if (rs.wasNull()) {
			dto.setZonacamara( null );
		}
		
		dto.setPorcion( new Integer( rs.getInt(COLUMN_PORCION) ) );
		if (rs.wasNull()) {
			dto.setPorcion( null );
		}
		
		dto.setEstado( new Integer( rs.getInt(COLUMN_ESTADO) ) );
		if (rs.wasNull()) {
			dto.setEstado( null );
		}
		
		dto.setCaracter( new Integer( rs.getInt(COLUMN_CARACTER) ) );
		if (rs.wasNull()) {
			dto.setCaracter( null );
		}
		
		dto.setVectorvi1( new Integer( rs.getInt(COLUMN_VECTORVI1) ) );
		if (rs.wasNull()) {
			dto.setVectorvi1( null );
		}
		
		dto.setVectorvi2( new Integer( rs.getInt(COLUMN_VECTORVI2) ) );
		if (rs.wasNull()) {
			dto.setVectorvi2( null );
		}
		
		dto.setFechaimplante( rs.getDate(COLUMN_FECHAIMPLANTE ) );
		dto.setFechamod( rs.getDate(COLUMN_FECHAMOD ) );
		dto.setImpohmdesfibImp( rs.getString( COLUMN_IMPOHMDESFIB_IMP ) );
		dto.setImpohmdesfibEv( rs.getString( COLUMN_IMPOHMDESFIB_EV ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ImpImplanteElectrodos dto)
	{
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the specified arbitrary SQL statement
	 */
	public ImpImplanteElectrodos[] findByDynamicSelect(String sql, Object[] sqlParams) throws ImpImplanteElectrodosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpImplanteElectrodosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the imp_implante_electrodos table that match the specified arbitrary SQL statement
	 */
	public ImpImplanteElectrodos[] findByDynamicWhere(String sql, Object[] sqlParams) throws ImpImplanteElectrodosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpImplanteElectrodosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
