/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface ArrEstudioCateterDao
{
	/** 
	 * Inserts a new row in the ARR_ESTUDIO_CATETER table.
	 */
	public ArrEstudioCateterPk insert(ArrEstudioCateter dto) throws ArrEstudioCateterDaoException;

	/** 
	 * Updates a single row in the ARR_ESTUDIO_CATETER table.
	 */
	public void update(ArrEstudioCateterPk pk, ArrEstudioCateter dto) throws ArrEstudioCateterDaoException;

	/** 
	 * Deletes a single row in the ARR_ESTUDIO_CATETER table.
	 */
	public void delete(ArrEstudioCateterPk pk) throws ArrEstudioCateterDaoException;

	/** 
	 * Returns the rows from the ARR_ESTUDIO_CATETER table that matches the specified primary-key value.
	 */
	public ArrEstudioCateter findByPrimaryKey(ArrEstudioCateterPk pk) throws ArrEstudioCateterDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_CATETER table that match the criteria 'IDESTUDIO = :idestudio'.
	 */
	public ArrEstudioCateter findByPrimaryKey(Integer idestudio) throws ArrEstudioCateterDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_CATETER table that match the criteria ''.
	 */
	public ArrEstudioCateter[] findAll() throws ArrEstudioCateterDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_CATETER table that match the criteria 'IDESTUDIO = :idestudio'.
	 */
	public ArrEstudioCateter[] findWhereIdestudioEquals(long idestudio) throws ArrEstudioCateterDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_CATETER table that match the criteria 'IDCATETER = :idcateter'.
	 */
	public ArrEstudioCateter[] findWhereIdcateterEquals(long idcateter) throws ArrEstudioCateterDaoException;
	
	public ArrEstudioCateter[] findWhereIdenfermeriaEquals(long idenfermeria) throws ArrEstudioCateterDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_CATETER table that match the criteria 'IDFUNCION = :idfuncion'.
	 */
	public ArrEstudioCateter[] findWhereIdfuncionEquals(long idfuncion) throws ArrEstudioCateterDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_CATETER table that match the criteria 'IDLOC = :idloc'.
	 */
	public ArrEstudioCateter[] findWhereIdlocEquals(long idloc) throws ArrEstudioCateterDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_CATETER table that match the criteria 'IDVIA = :idvia'.
	 */
	public ArrEstudioCateter[] findWhereIdviaEquals(long idvia) throws ArrEstudioCateterDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ARR_ESTUDIO_CATETER table that match the specified arbitrary SQL statement
	 */
	public ArrEstudioCateter[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrEstudioCateterDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_CATETER table that match the specified arbitrary SQL statement
	 */
	public ArrEstudioCateter[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrEstudioCateterDaoException;

}
