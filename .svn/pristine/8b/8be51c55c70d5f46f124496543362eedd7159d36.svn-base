/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.util.UtilCodifi;
import com.sorin.idea.util.UtilFechas;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ImpImplanteDaoImpl extends AbstractDAO implements ImpImplanteDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDIMPLANTE, IDHOJAIMP, IDEV, FECHAIMPLANTE, TIPO, INTERVENCIONPREVIA, NPROC, COMENTARIOS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDIMPLANTE, IDHOJAIMP, IDEV, FECHAIMPLANTE, TIPO, INTERVENCIONPREVIA, NPROC, COMENTARIOS ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDIMPLANTE = ?, IDHOJAIMP = ?, IDEV = ?, FECHAIMPLANTE = ?, TIPO = ?, INTERVENCIONPREVIA = ?, NPROC = ?, COMENTARIOS = ? WHERE IDIMPLANTE = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDIMPLANTE = ?";

	/** 
	 * Index of column IDIMPLANTE
	 */
	protected static final int COLUMN_IDIMPLANTE = 1;

	/** 
	 * Index of column IDHOJAIMP
	 */
	protected static final int COLUMN_IDHOJAIMP = 2;

	/** 
	 * Index of column IDEV
	 */
	protected static final int COLUMN_IDEV = 3;

	/** 
	 * Index of column FECHAIMPLANTE
	 */
	protected static final int COLUMN_FECHAIMPLANTE = 4;

	/** 
	 * Index of column TIPO
	 */
	protected static final int COLUMN_TIPO = 5;

	/** 
	 * Index of column INTERVENCIONPREVIA
	 */
	protected static final int COLUMN_INTERVENCIONPREVIA = 6;

	/** 
	 * Index of column NPROC
	 */
	protected static final int COLUMN_NPROC = 7;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column IDIMPLANTE
	 */
	protected static final int PK_COLUMN_IDIMPLANTE = 1;

	/** 
	 * Inserts a new row in the imp_implante table.
	 */
	public ImpImplantePk insert(ImpImplante dto) throws ImpImplanteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdimplante() != null) {
				stmt.setInt( index++, dto.getIdimplante().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdhojaimp() != null) {
				stmt.setInt( index++, dto.getIdhojaimp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdev() != null) {
				stmt.setInt( index++, dto.getIdev().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFechaimplante()==null ? null : new java.sql.Date( dto.getFechaimplante().getTime() ) );
			stmt.setString( index++, dto.getTipo() );
			if (dto.getIntervencionprevia() != null) {
				stmt.setShort( index++, dto.getIntervencionprevia().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getNproc() );
			stmt.setString( index++, dto.getComentarios() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdimplante( new Integer( rs.getInt(1) ) );
			}
		
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpImplanteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the imp_implante table.
	 */
	public void update(ImpImplantePk pk, ImpImplante dto) throws ImpImplanteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdimplante() != null) {
				stmt.setInt( index++, dto.getIdimplante().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdhojaimp() != null) {
				stmt.setInt( index++, dto.getIdhojaimp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdev() != null) {
				stmt.setInt( index++, dto.getIdev().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFechaimplante()==null ? null : new java.sql.Date( dto.getFechaimplante().getTime() ) );
			stmt.setString( index++, dto.getTipo() );
			if (dto.getIntervencionprevia() != null) {
				stmt.setShort( index++, dto.getIntervencionprevia().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getNproc() );
			stmt.setString( index++, dto.getComentarios() );
			if (pk.getIdimplante() != null) {
				stmt.setInt( 9, pk.getIdimplante().intValue() );
			} else {
				stmt.setNull(9, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpImplanteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the imp_implante table.
	 */
	public void delete(ImpImplantePk pk) throws ImpImplanteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdimplante() != null) {
				stmt.setInt( 1, pk.getIdimplante().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpImplanteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the imp_implante table that matches the specified primary-key value.
	 */
	public ImpImplante findByPrimaryKey(ImpImplantePk pk) throws ImpImplanteDaoException
	{
		return findByPrimaryKey( pk.getIdimplante() );
	}

	/** 
	 * Returns all rows from the imp_implante table that match the criteria 'IDIMPLANTE = :idimplante'.
	 */
	public ImpImplante findByPrimaryKey(Integer idimplante) throws ImpImplanteDaoException
	{
		ImpImplante ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDIMPLANTE = ?", new Object[] { idimplante } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the imp_implante table that match the criteria ''.
	 */
	public ImpImplante[] findAll() throws ImpImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDIMPLANTE", null );
	}

	/** 
	 * Returns all rows from the imp_implante table that match the criteria 'IDIMPLANTE = :idimplante'.
	 */
	public ImpImplante[] findWhereIdimplanteEquals(int idimplante) throws ImpImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDIMPLANTE = ? ORDER BY IDIMPLANTE", new Object[] {  new Integer(idimplante) } );
	}

	/** 
	 * Returns all rows from the imp_implante table that match the criteria 'IDHOJAIMP = :idhojaimp'.
	 */
	public ImpImplante[] findWhereIdhojaimpEquals(int idhojaimp) throws ImpImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDHOJAIMP = ? ORDER BY IDHOJAIMP", new Object[] {  new Integer(idhojaimp) } );
	}

	/** 
	 * Returns all rows from the imp_implante table that match the criteria 'IDEV = :idev'.
	 */
	public ImpImplante[] findWhereIdevEquals(int idev) throws ImpImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDEV = ? ORDER BY IDEV", new Object[] {  new Integer(idev) } );
	}

	/** 
	 * Returns all rows from the imp_implante table that match the criteria 'FECHAIMPLANTE = :fechaimplante'.
	 */
	public ImpImplante[] findWhereFechaimplanteEquals(Date fechaimplante) throws ImpImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAIMPLANTE = ? ORDER BY FECHAIMPLANTE", new Object[] { fechaimplante==null ? null : new java.sql.Date( fechaimplante.getTime() ) } );
	}

	/** 
	 * Returns all rows from the imp_implante table that match the criteria 'TIPO = :tipo'.
	 */
	public ImpImplante[] findWhereTipoEquals(String tipo) throws ImpImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO = ? ORDER BY TIPO", new Object[] { tipo } );
	}

	/** 
	 * Returns all rows from the imp_implante table that match the criteria 'INTERVENCIONPREVIA = :intervencionprevia'.
	 */
	public ImpImplante[] findWhereIntervencionpreviaEquals(short intervencionprevia) throws ImpImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INTERVENCIONPREVIA = ? ORDER BY INTERVENCIONPREVIA", new Object[] {  new Short(intervencionprevia) } );
	}

	/** 
	 * Returns all rows from the imp_implante table that match the criteria 'NPROC = :nproc'.
	 */
	public ImpImplante[] findWhereNprocEquals(String nproc) throws ImpImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NPROC = ? ORDER BY NPROC", new Object[] { nproc } );
	}

	/** 
	 * Returns all rows from the imp_implante table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ImpImplante[] findWhereComentariosEquals(String comentarios) throws ImpImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/**
	 * Method 'ImpImplanteDaoImpl'
	 * 
	 */
	public ImpImplanteDaoImpl()
	{
	}
	
	public ImpImplanteDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ImpImplanteDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ImpImplanteDaoImpl'
	 * 
	 * @param userConn
	 */
	public ImpImplanteDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.imp_implante";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ImpImplante fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ImpImplante dto = new ImpImplante();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ImpImplante[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ImpImplante dto = new ImpImplante();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ImpImplante ret[] = new ImpImplante[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ImpImplante dto, ResultSet rs) throws SQLException
	{
		dto.setIdimplante( new Integer( rs.getInt(COLUMN_IDIMPLANTE) ) );
		dto.setIdhojaimp( new Integer( rs.getInt(COLUMN_IDHOJAIMP) ) );
		dto.setIdev( new Integer( rs.getInt(COLUMN_IDEV) ) );
		dto.setFechaimplante( rs.getDate(COLUMN_FECHAIMPLANTE ) );
		dto.setTipo( rs.getString( COLUMN_TIPO ) );
		dto.setIntervencionprevia( new Short( rs.getShort(COLUMN_INTERVENCIONPREVIA) ) );
		if (rs.wasNull()) {
			dto.setIntervencionprevia( null );
		}
		
		dto.setNproc( rs.getString( COLUMN_NPROC ) );
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ImpImplante dto)
	{
	}

	/** 
	 * Returns all rows from the imp_implante table that match the specified arbitrary SQL statement
	 */
	public ImpImplante[] findByDynamicSelect(String sql, Object[] sqlParams) throws ImpImplanteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpImplanteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the imp_implante table that match the specified arbitrary SQL statement
	 */
	public ImpImplante[] findByDynamicWhere(String sql, Object[] sqlParams) throws ImpImplanteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpImplanteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	public ArrayList<ArrayList<Object>> findByDynamicSelect(String sql) throws ImpImplanteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return UtilCodifi.Results2Array(rs);
		}
		catch (Exception _e) {
			throw new ImpImplanteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	public ArrayList<ArrayList<Object>> getEstadisticasBradi(int tipoproc, int ritmo, int cav, int qrs, int modo, String modelo, String pop,Date fechaini,Date fechafin,String tipo1,String tipo2,String tipo3) throws ImpImplanteDaoException{
		StringBuffer sql = new StringBuffer();
		sql.append("select pac.nhc PACIENTE,");
		sql.append("pac.fechanaci FECHANACI,");
		sql.append("proc.tipoprocedimiento TIPOPROCEDIMIENTO,");
		//sql.append("m0.valor TIPOPROCEDIMIENTO,");
		sql.append("proc.fecha FECHA,");
		sql.append("gen.modelo MODELO,");
		sql.append("impgen.numserie NUMSERIE,");
		sql.append("gen.fabricante FABRICANTE,");
		sql.append("himp.tescopia TESCOPIA,");
		sql.append("himp.implantador IMPLANTADOR,");
		sql.append("himp.lugarimp LUGARIMP,");
		sql.append("himp.prioridad PRIORIDAD,");
		sql.append("himp.tanestesia TANESTESIA,");
		sql.append("himp.hllegada HLLEGADA,");
		sql.append("himp.hinicio HINICIO,");
		sql.append("himp.hfin HFIN,");
		sql.append("himp.hsalida HSALIDA,");
		sql.append("m1.valor RITMO,");
		sql.append("m2.valor RITMO2,");
		sql.append("m3.valor CONDUCAV,");
		sql.append("m4.valor CONDUCAV2,");
		sql.append("m5.valor QRS,");
		sql.append("m6.valor QRS2,");
		sql.append("sitclin.anchuraqrs ANCHURAQRS,");
		sql.append("sitclin.fevi FEVI,");
		sql.append("m7.valor FUNCIONVENTRICULAR,");
		sql.append("sitclin.nyha NYHA,");
		sql.append("m8.valor CARDIOPATIA,");
		sql.append("sitclin.aevolucion AEVOLUCION,");
		sql.append("sitclin.otra OTRA,");
		sql.append("sitclin.hta HTA,");
		sql.append("sitclin.dislipemia DISLIPEMIA,");
		sql.append("sitclin.diabetes DIABETES,");
		sql.append("sitclin.tabaquismo TABAQUISMO,");
		sql.append("sitclin.ingalcoholica INGALCOHOLICA,");
		sql.append("sitclin.acv ACV,");
		sql.append("sitclin.ait AIT,");
		sql.append("sitclin.epoc EPOC,");
		sql.append("sitclin.sahs SAHS,");
		sql.append("sitclin.insrenal INSRENAL,");
		sql.append("sitclin.neoplasia NEOPLASIA,");
		sql.append("sitclin.antfa ANTFA,");
		sql.append("sitclin.trasplantecardiaco TRASPLANTECARDIACO,");
		sql.append("sitclin.paradacardiaca PARADACARDIACA,");
		sql.append("sitclin.sincope SINCOPE,");
		sql.append("hev.mpdependiente MPDEPENDIENTE,");
		//sql.append("hev.modogen MODOGEN,");
		sql.append("m9.valor MODOGEN,");
		sql.append("hev.fbasica FBASICA,");
		sql.append("hev.segremoto SEGREMOTO,");
		sql.append("hev.mev MEV,");
		sql.append("hev.iavdetec IAVDETEC,");
		sql.append("hev.iavestim IAVESTIM,");
		sql.append("hev.iavmax IAVMAX,");
		sql.append("hev.iavmin IAVMIN,");
		sql.append("hev.fmax FMAX,");
		sql.append("hev.fmin FMIN,");
		sql.append("hev.valor_histeresis VALOR_HISTERESIS,");
		sql.append("hev.algprevfa ALGPREVFA,");
		sql.append("hev.fechaalta FECHAALTA,");
		sql.append("himp.idhojaimp IDHOJAIMP,");
		sql.append("pac.nombre NOMBRE,");// 59
		sql.append("pac.apellid1 APELLID1,");
		sql.append("pac.apellid2 APELLID2,");
		sql.append("imp.nproc NPROC,");
		sql.append("pac.nuhsa NUHSA");//63
		
		sql.append(" from arr_pacientes pac,");
		sql.append(" imp_implante imp, ");
		sql.append(" imp_hoja_implante himp, ");
		sql.append(" imp_generador impgen, ");
		sql.append(" imp_evolucion hev ");
		sql.append(" LEFT OUTER JOIN arr_maestras m9 ON hev.modogen = m9.codigo");
		sql.append(" , generador gen, ");
		sql.append(" situacion_clinica_proc sitclin");		
		sql.append(" LEFT OUTER JOIN arr_maestras m1 ON sitclin.ritmo = m1.codigo");
		sql.append(" LEFT OUTER JOIN arr_maestras m2 ON sitclin.ritmo2 = m2.codigo");
		sql.append(" LEFT OUTER JOIN arr_maestras m3 ON sitclin.conducav = m3.codigo");
		sql.append(" LEFT OUTER JOIN arr_maestras m4 ON sitclin.conducav2 = m4.codigo");
		sql.append(" LEFT OUTER JOIN arr_maestras m5 ON sitclin.qrs = m5.codigo");
		sql.append(" LEFT OUTER JOIN arr_maestras m6 ON sitclin.qrs2 = m6.codigo");
		sql.append(" LEFT OUTER JOIN arr_maestras m7 ON sitclin.funcionventricular = m7.codigo");
		sql.append(" LEFT OUTER JOIN arr_maestras m8 ON sitclin.cardiopatia = m8.codigo");
		sql.append(" , procedimiento proc ");
		//sql.append(" LEFT OUTER JOIN arr_maestras m0 ON proc.tipoprocedimiento = m0.codigo");
				
		sql.append(" WHERE pac.codigo = proc.codigo");
		sql.append(" and proc.idsitclinica = sitclin.idsitclin");
		sql.append(" and proc.idprocedimiento = imp.idimplante");
		sql.append(" and himp.idhojaimp = imp.idhojaimp ");
		sql.append(" and hev.idev = imp.idev ");
		sql.append(" and impgen.idhojaimp = himp.idhojaimp ");
		sql.append(" and impgen.motivoexplante IS NULL");
		sql.append(" and gen.idgenerador = impgen.idgenerador ");
		sql.append(" and ((gen.tipo = "+tipo1+") or (gen.tipo = "+tipo2+") or (gen.tipo = "+tipo3+"))");
		sql.append(generaWhere(tipoproc,ritmo,cav,qrs,modo,modelo,pop,fechaini,fechafin));
		sql.append(" GROUP BY pac.nhc,pac.fechanaci,proc.tipoprocedimiento,proc.fecha,gen.modelo,impgen.numserie,gen.fabricante,himp.tescopia,himp.implantador,himp.lugarimp,himp.prioridad,himp.tanestesia,himp.hllegada,himp.hinicio,himp.hfin,himp.hsalida,m1.valor,m2.valor,m3.valor,m4.valor,m5.valor,m6.valor,sitclin.anchuraqrs,sitclin.fevi,m7.valor,sitclin.nyha,m8.valor,sitclin.aevolucion,sitclin.otra,sitclin.hta,sitclin.dislipemia,sitclin.diabetes,sitclin.tabaquismo,sitclin.ingalcoholica,sitclin.acv,sitclin.ait,sitclin.epoc,sitclin.sahs,sitclin.insrenal,sitclin.neoplasia,sitclin.antfa,sitclin.trasplantecardiaco,sitclin.paradacardiaca,sitclin.sincope,hev.mpdependiente,m9.valor,hev.fbasica,hev.segremoto,hev.mev,hev.iavdetec,hev.iavestim,hev.iavmax,hev.iavmin,hev.fmax,hev.fmin,hev.valor_histeresis,hev.algprevfa,hev.fechaalta,himp.idhojaimp");
		
		
		return findByDynamicSelect(sql.toString());
	}
	public ArrayList<ArrayList<Object>> getEstadisticasTaqui(int tipoproc, int ritmo, int cav, int qrs, int modo, String modelo, String pop,Date fechaini,Date fechafin,String tipo1,String tipo2,String tipo3) throws ImpImplanteDaoException{
		StringBuffer sql = new StringBuffer();
		sql.append("select pac.nhc PACIENTE,");
		sql.append("pac.fechanaci FECHANACI,");
		sql.append("proc.tipoprocedimiento TIPOPROCEDIMIENTO,");
		//sql.append("m0.valor TIPOPROCEDIMIENTO,");
		sql.append("proc.fecha FECHA,");
		sql.append("gen.modelo MODELO,");
		sql.append("impgen.numserie NUMSERIE,");
		sql.append("gen.fabricante FABRICANTE,");
		sql.append("himp.tindicacion TINDICACION,");
		sql.append("himp.tescopia TESCOPIA,");
		sql.append("himp.implantador IMPLANTADOR,");
		sql.append("himp.lugarimp LUGARIMP,");
		sql.append("himp.prioridad PRIORIDAD,");
		sql.append("himp.tanestesia TANESTESIA,");
		sql.append("himp.hllegada HLLEGADA,");
		sql.append("himp.hinicio HINICIO,");
		sql.append("himp.hfin HFIN,");
		sql.append("himp.hsalida HSALIDA,");
		sql.append("himp.testind TESTIND,");
		sql.append("himp.energiatest ENERGIATEST,");
		sql.append("himp.imptest IMPTEST,");
		sql.append("himp.numchoqtest NUMCHOQTEST,");
		sql.append("m1.valor RITMO,");
		sql.append("m2.valor RITMO2,");
		sql.append("m3.valor CONDUCAV,");
		sql.append("m4.valor CONDUCAV2,");
		sql.append("m5.valor QRS,");
		sql.append("m6.valor QRS2,");
		sql.append("sitclin.anchuraqrs ANCHURAQRS,");
		sql.append("sitclin.fevi FEVI,");
		sql.append("m7.valor FUNCIONVENTRICULAR,");
		sql.append("sitclin.nyha NYHA,");
		sql.append("m8.valor CARDIOPATIA,");
		sql.append("sitclin.aevolucion AEVOLUCION,");
		sql.append("sitclin.otra OTRA,");
		sql.append("sitclin.hta HTA,");
		sql.append("sitclin.dislipemia DISLIPEMIA,");
		sql.append("sitclin.diabetes DIABETES,");
		sql.append("sitclin.tabaquismo TABAQUISMO,");
		sql.append("sitclin.ingalcoholica INGALCOHOLICA,");
		sql.append("sitclin.acv ACV,");
		sql.append("sitclin.ait AIT,");
		sql.append("sitclin.epoc EPOC,");
		sql.append("sitclin.sahs SAHS,");
		sql.append("sitclin.insrenal INSRENAL,");
		sql.append("sitclin.neoplasia NEOPLASIA,");
		sql.append("sitclin.antfa ANTFA,");
		sql.append("sitclin.trasplantecardiaco TRASPLANTECARDIACO,");
		sql.append("sitclin.paradacardiaca PARADACARDIACA,");
		sql.append("sitclin.sincope SINCOPE,");//48
		sql.append("hev.mpdependiente MPDEPENDIENTE,");//49
		//sql.append("hev.modogen MODOGEN,");
		sql.append("m9.valor MODOGEN,");
		sql.append("hev.fbasica FBASICA,");
		sql.append("hev.segremoto SEGREMOTO,");
		sql.append("hev.mev MEV,");
		sql.append("hev.iavdetec IAVDETEC,");
		sql.append("hev.iavestim IAVESTIM,");
		sql.append("hev.iavmax IAVMAX,");
		sql.append("hev.iavmin IAVMIN,");
		sql.append("hev.fmax FMAX,");
		sql.append("hev.fmin FMIN,");
		sql.append("hev.valor_histeresis VALOR_HISTERESIS,");
		sql.append("hev.numepitsv NUMEPITSV,");
		sql.append("hev.numepitv NUMEPITV,");
		sql.append("hev.numepifv NUMEPIFV,");
		sql.append("hev.numepinosost NUMEPINOSOST,");
		sql.append("hev.numepiotros NUMEPIOTROS,");
		sql.append("hev.algprevfa ALGPREVFA,");
		sql.append("hev.fechaalta FECHAALTA,");
		sql.append("himp.idhojaimp IDHOJAIMP,");
		sql.append("pac.nombre NOMBRE,");// 69
		sql.append("pac.apellid1 APELLID1,");
		sql.append("pac.apellid2 APELLID2,");
		sql.append("imp.nproc NPROC,");
		sql.append("pac.nuhsa NUHSA");//73
		
		sql.append(" from arr_pacientes pac,");
		sql.append(" imp_implante imp, ");
		sql.append(" imp_hoja_implante himp, ");
		sql.append(" imp_generador impgen, ");
		sql.append(" imp_evolucion hev ");
		sql.append(" LEFT OUTER JOIN arr_maestras m9 ON hev.modogen = m9.codigo");	
		sql.append(" , generador gen, ");
		sql.append(" situacion_clinica_proc sitclin");		
		sql.append(" LEFT OUTER JOIN arr_maestras m1 ON sitclin.ritmo = m1.codigo");
		sql.append(" LEFT OUTER JOIN arr_maestras m2 ON sitclin.ritmo2 = m2.codigo");
		sql.append(" LEFT OUTER JOIN arr_maestras m3 ON sitclin.conducav = m3.codigo");
		sql.append(" LEFT OUTER JOIN arr_maestras m4 ON sitclin.conducav2 = m4.codigo");
		sql.append(" LEFT OUTER JOIN arr_maestras m5 ON sitclin.qrs = m5.codigo");
		sql.append(" LEFT OUTER JOIN arr_maestras m6 ON sitclin.qrs2 = m6.codigo");
		sql.append(" LEFT OUTER JOIN arr_maestras m7 ON sitclin.funcionventricular = m7.codigo");
		sql.append(" LEFT OUTER JOIN arr_maestras m8 ON sitclin.cardiopatia = m8.codigo");
		sql.append(" , procedimiento proc ");
		//sql.append(" LEFT OUTER JOIN arr_maestras m0 ON proc.tipoprocedimiento = m0.codigo");
				
		sql.append(" WHERE pac.codigo = proc.codigo");
		sql.append(" and proc.idsitclinica = sitclin.idsitclin");
		sql.append(" and proc.idprocedimiento = imp.idimplante");
		sql.append(" and himp.idhojaimp = imp.idhojaimp ");
		sql.append(" and hev.idev = imp.idev ");
		sql.append(" and impgen.idhojaimp = himp.idhojaimp ");
		sql.append(" and impgen.motivoexplante IS NULL");
		sql.append(" and gen.idgenerador = impgen.idgenerador ");
		sql.append(" and ((gen.tipo = "+tipo1+") or (gen.tipo = "+tipo2+") or (gen.tipo = "+tipo3+"))");
		sql.append(generaWhere(tipoproc,ritmo,cav,qrs,modo,modelo,pop,fechaini,fechafin));
		sql.append(" GROUP BY pac.nhc,pac.fechanaci,proc.tipoprocedimiento,proc.fecha,gen.modelo,impgen.numserie,gen.fabricante,himp.tindicacion,himp.tescopia,himp.implantador,himp.lugarimp,himp.prioridad,himp.tanestesia,himp.hllegada,himp.hinicio,himp.hfin,himp.hsalida,himp.testind,himp.energiatest,himp.imptest,himp.numchoqtest,m1.valor,m2.valor,m3.valor,m4.valor,m5.valor,m6.valor,sitclin.anchuraqrs,sitclin.fevi,m7.valor,sitclin.nyha,m8.valor,sitclin.aevolucion,sitclin.otra,sitclin.hta,sitclin.dislipemia,sitclin.diabetes,sitclin.tabaquismo,sitclin.ingalcoholica,sitclin.acv,sitclin.ait,sitclin.epoc,sitclin.sahs,sitclin.insrenal,sitclin.neoplasia,sitclin.antfa,sitclin.trasplantecardiaco,sitclin.paradacardiaca,sitclin.sincope,hev.mpdependiente,m9.valor,hev.fbasica,hev.segremoto,hev.mev,hev.iavdetec,hev.iavestim,hev.iavmax,hev.iavmin,hev.fmax,hev.fmin,hev.valor_histeresis,hev.numepitsv,hev.numepitv,hev.numepifv,hev.numepinosost,hev.numepiotros,hev.algprevfa,hev.fechaalta,himp.idhojaimp");
		
		
		return findByDynamicSelect(sql.toString());
	}
	
	private String generaWhere(int tipoproc, int ritmo, int cav, int qrs, int modo, String modelo, String pop,Date fechaini, Date fechafin){
		String where = "";
		if(fechaini!=null)
			where += " and proc.fecha >='"+UtilFechas.getFechaStringFormato(fechaini, "yyyy-MM-dd")+"'";
			//where += " and proc.fecha >='"+UtilFechas.dateToString2(new Date(fechaini.getYear(),fechaini.getMonth(),fechaini.getDay()))+"'";//ORACLE?
		if(fechafin!=null)
			where += " and proc.fecha <='"+UtilFechas.getFechaStringFormato(fechafin, "yyyy-MM-dd")+"'";//ORACLE?
			//where += " and proc.fecha <='"+UtilFechas.dateToString2(new Date(fechafin.getYear(),fechafin.getMonth(),fechafin.getDay()))+"'";//ORACLE?
		if(tipoproc!=0)
			where += " and proc.tipoprocedimiento = "+tipoproc;//where += " and m0.codigo = "+tipoproc;	
		else{
			where +="and (proc.tipoprocedimiento = 956 or proc.tipoprocedimiento = 957 or proc.tipoprocedimiento = 1059 or proc.tipoprocedimiento = 1060 or proc.tipoprocedimiento = 1085 or proc.tipoprocedimiento = 1086 or proc.tipoprocedimiento = 1147 or proc.tipoprocedimiento = 1090)";
		}
		if(ritmo!=-1)
			where += " and m1.codigo = " + ritmo;
		if(cav!=-1)
			where += " and m3.codigo = " + cav;
		if(qrs!=-1)
			where += " and m5.codigo = " + qrs;
		if(modelo!=null && modelo.length()>0 && !modelo.equals("0"))
			where += " and gen.modelo = '" + modelo+"'";
		if(modo!=0)
			where += " and m9.codigo = " + modo;
		if(pop!=null && pop.length()>0 && !pop.equals("0"))// pop es el fabricante
			where += " and gen.fabricante = '" + pop+"'";
		return where;
	}
	public ArrayList<ArrayList<Object>> getPops(Integer idhimp) throws ImpImplanteDaoException{
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT idop FROM imp_hoja_implante_pop WHERE idhojaimp = "+idhimp);
		ArrayList<ArrayList<Object>> objs = findByDynamicSelect(sql.toString());
		String a = "";
		for(Object c : objs)
			a += c + ",";
		if (a.length() > 0)
			a = a.substring(0,a.length()-1);
		objs = new ArrayList<ArrayList<Object>>();
		ArrayList<Object> obja = new ArrayList<Object>();
		obja.add(a);
		objs.add(obja);
		return objs;
		//select group_concat(idoperador) from arr_estudio_pop where idestudio = 1
		//return findByDynamicSelect(sql.toString());
	}
	
	public ArrayList<ArrayList<Object>> getSops(Integer idhimp) throws ImpImplanteDaoException{
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT idop FROM imp_hoja_implante_sop WHERE idhojaimp = "+idhimp);
		ArrayList<ArrayList<Object>> objs = findByDynamicSelect(sql.toString());
		String a = "";
		for(Object c : objs)
			a += c + ",";
		if (a.length() > 0)
			a = a.substring(0,a.length()-1);
		objs = new ArrayList<ArrayList<Object>>();
		ArrayList<Object> obja = new ArrayList<Object>();
		obja.add(a);
		objs.add(obja);
		return objs;
		
		//sql.append("SELECT rowconcat('SELECT idoperador FROM arr_estudio_sop WHERE idestudio = "+idestudio+"') FROM dual");
		//select group_concat(idoperador) from arr_estudio_pop where idestudio = 1
		//return findByDynamicSelect(sql.toString());
	}
	public ArrayList<ArrayList<Object>> getEstadisticasImplantes(Date fechaini,Date fechafin) throws ImpImplanteDaoException{
		StringBuffer sql = new StringBuffer();
		sql.append("select proc.tipoprocedimiento TIPOPROCEDIMIENTO, ");
		sql.append(" gen.modo MODO, ");
		sql.append(" gen.fabricante FABRICANTE, ");
		sql.append(" gen.tipo TIPO, ");
		sql.append(" sitclin.ritmo RITMO, ");
		sql.append(" sitclin.conducav CONDUCAV, ");
		sql.append(" sitclin.qrs QRS ");
		sql.append(" from procedimiento proc, ");
		sql.append(" imp_implante imp, ");
		sql.append(" imp_hoja_implante himp, ");
		sql.append(" imp_generador impgen, ");
		sql.append(" generador gen, ");
		sql.append(" situacion_clinica_proc sitclin ");
		sql.append(" WHERE proc.fecha between '"+UtilFechas.getFechaString(fechaini)+"' and '"+UtilFechas.getFechaString(fechafin)+"'");
		sql.append(" and proc.idsitclinica = sitclin.idsitclin");
		sql.append(" and proc.idprocedimiento = imp.idimplante");
		sql.append(" and himp.idhojaimp = imp.idhojaimp ");
		sql.append(" and impgen.idhojaimp = himp.idhojaimp ");
		sql.append(" and impgen.motivoexplante IS NULL");
		sql.append(" and gen.idgenerador = impgen.idgenerador ");
		sql.append(" and ((proc.tipoprocedimiento = 956) or (proc.tipoprocedimiento = 1059) or (proc.tipoprocedimiento = 1060) or (proc.tipoprocedimiento = 1090) or (proc.tipoprocedimiento = 957) or (proc.tipoprocedimiento = 1147) or (proc.tipoprocedimiento = 1085) or (proc.tipoprocedimiento = 1086))");
		return findByDynamicSelect(sql.toString());
	}
	
	public ImpImplante getLastNProc() throws ImpImplanteDaoException{
		ImpImplante[] ret = findByDynamicSelect( "SELECT * FROM "+ getTableName()+" ORDER BY IDIMPLANTE DESC",null );
		return ret.length==0 ? null : ret[0];
	}
	
	public ArrayList<ArrayList<Object>> getGeneradoresImplantados(Integer codigo, Date fecha) throws ImpImplanteDaoException{
		StringBuffer sql = new StringBuffer();
		sql.append("select gen.tipo TIPO_GEN, ");
		sql.append(" gen.modelo MODELO, ");
		sql.append(" impgen.numserie NUMSERIE, ");
		sql.append(" proc.fecha FECHA ");
		sql.append(" from procedimiento proc, ");
		sql.append(" imp_implante imp, ");
		sql.append(" imp_hoja_implante himp, ");
		sql.append(" imp_generador impgen, ");
		sql.append(" generador gen ");
		sql.append(" WHERE proc.codigo = "+codigo);
		sql.append(" and proc.fecha <= '"+UtilFechas.getFechaString(fecha)+"'");
		sql.append(" and ((proc.tipoprocedimiento = 956) or (proc.tipoprocedimiento = 1059) or (proc.tipoprocedimiento = 1060))");
		sql.append(" and proc.idprocedimiento = imp.idimplante");
		sql.append(" and himp.idhojaimp = imp.idhojaimp ");
		sql.append(" and impgen.idhojaimp = himp.idhojaimp ");
		sql.append(" and impgen.motivoexplante IS NULL");
		sql.append(" and gen.idgenerador = impgen.idgenerador ");
		sql.append(" ORDER BY fecha desc ");
		return findByDynamicSelect(sql.toString());
	}

	public ArrayList<ArrayList<Object>> getConsultaGeneradores(String modelo, String nserie, String nserie2, String fab, Date fini, Date ffin) throws ImpImplanteDaoException{
		StringBuffer sql = new StringBuffer();
		sql.append("select generador.modelo, ");
		sql.append("imp_generador.numserie, ");
		sql.append("generador.fabricante, ");
		sql.append("procedimiento.FECHA, ");
		sql.append("arr_pacientes.NHC nhc_, ");
		sql.append("(select generador.modelo " +
				"from imp_generador, procedimiento, arr_pacientes, generador,imp_implante, imp_hoja_implante " +
				"where procedimiento.CODIGO = arr_pacientes.CODIGO " +
				" and (procedimiento.TIPOPROCEDIMIENTO = 956 or procedimiento.TIPOPROCEDIMIENTO = 1059 or procedimiento.TIPOPROCEDIMIENTO = 1060 or procedimiento.TIPOPROCEDIMIENTO = 1090) " +
				" and imp_implante.IDIMPLANTE = procedimiento.IDPROCEDIMIENTO " +
				" and imp_hoja_implante.IDHOJAIMP = imp_implante.IDHOJAIMP " +
				" and imp_generador.IDHOJAIMP = imp_hoja_implante.IDHOJAIMP " +
				" and generador.IDGENERADOR = imp_generador.IDGENERADOR" +
				" and arr_pacientes.NHC = nhc_" +
				" and imp_generador.MOTIVOEXPLANTE IS NULL"+
				" order by procedimiento.FECHA DESC" +
				" limit 1), ");
		sql.append("(select imp_generador.numserie" +
				" from imp_generador, procedimiento, arr_pacientes, generador,imp_implante, imp_hoja_implante" +
				" where procedimiento.CODIGO = arr_pacientes.CODIGO " +
				" and (procedimiento.TIPOPROCEDIMIENTO = 956 or procedimiento.TIPOPROCEDIMIENTO = 1059 or procedimiento.TIPOPROCEDIMIENTO = 1060 or procedimiento.TIPOPROCEDIMIENTO = 1090)" +
				" and imp_implante.IDIMPLANTE = procedimiento.IDPROCEDIMIENTO" +
				" and imp_hoja_implante.IDHOJAIMP = imp_implante.IDHOJAIMP " +
				" and imp_generador.IDHOJAIMP = imp_hoja_implante.IDHOJAIMP" +
				" and generador.IDGENERADOR = imp_generador.IDGENERADOR" +
				" and arr_pacientes.NHC = nhc_" +
				" and imp_generador.MOTIVOEXPLANTE IS NULL"+
				" order by procedimiento.FECHA DESC" +
				" limit 1)");
		sql.append(" from imp_generador, procedimiento, arr_pacientes, generador,imp_implante, imp_hoja_implante");
		sql.append(" where procedimiento.CODIGO = arr_pacientes.CODIGO");
		sql.append(" and (procedimiento.TIPOPROCEDIMIENTO = 956 or procedimiento.TIPOPROCEDIMIENTO = 1059 or procedimiento.TIPOPROCEDIMIENTO = 1060 or procedimiento.TIPOPROCEDIMIENTO = 1090)");
		sql.append(" and imp_implante.IDIMPLANTE = procedimiento.IDPROCEDIMIENTO");
		sql.append(" and imp_hoja_implante.IDHOJAIMP = imp_implante.IDHOJAIMP");
		sql.append(" and imp_generador.IDHOJAIMP = imp_hoja_implante.IDHOJAIMP");
		sql.append(" and generador.IDGENERADOR = imp_generador.IDGENERADOR");
		if(fab!=null && !fab.equals(""))
			sql.append(" and generador.FABRICANTE like '%"+fab+"%'");
		if(modelo!=null && !modelo.equals(""))
			sql.append(" and generador.MODELO like '%"+modelo+"%'");
		if(nserie!=null && !nserie.equals("") && (nserie2==null || nserie2.equals("")))
			sql.append(" and imp_generador.numserie like '%"+nserie+"%'");		
		else if(nserie!=null && !nserie.equals("") && nserie2!=null && !nserie2.equals(""))
			sql.append(" and imp_generador.numserie between '"+nserie+"%' and '"+nserie2+"%'");
		sql.append(" and procedimiento.fecha between '"+UtilFechas.getFechaString(fini)+"' and '"+UtilFechas.getFechaString(ffin)+"'");
		sql.append(" order by FECHA DESC");
		
		return findByDynamicSelect(sql.toString());
	}

	public ArrayList<ArrayList<Object>> getConsultaElectrodos(String modelo, String nserie, String nserie2, String fab, Date fini, Date ffin) throws ImpImplanteDaoException{
		StringBuffer sql = new StringBuffer();
		sql.append("select electrodos.modelo, ");
		sql.append("imp_implante_electrodos.numserie, ");
		sql.append("electrodos.fabricante, ");
		sql.append("procedimiento.FECHA, ");
		sql.append("arr_pacientes.NHC nhc, ");
		sql.append("imp_implante_electrodos.estado, ");
		sql.append("imp_implante_electrodos.caracter ");
		sql.append(" from imp_implante_electrodos, procedimiento, arr_pacientes, electrodos,imp_implante, imp_hoja_implante ");
		sql.append(" where procedimiento.CODIGO = arr_pacientes.CODIGO");
		sql.append(" and (procedimiento.TIPOPROCEDIMIENTO = 956 or procedimiento.TIPOPROCEDIMIENTO = 1059 or procedimiento.TIPOPROCEDIMIENTO = 1060 or procedimiento.TIPOPROCEDIMIENTO = 1090 or procedimiento.TIPOPROCEDIMIENTO = 957 or procedimiento.TIPOPROCEDIMIENTO = 1085 or procedimiento.TIPOPROCEDIMIENTO = 1086 or procedimiento.TIPOPROCEDIMIENTO = 1147)");
		sql.append(" and imp_implante.IDIMPLANTE = procedimiento.IDPROCEDIMIENTO");
		sql.append(" and imp_hoja_implante.IDHOJAIMP = imp_implante.IDHOJAIMP");
		sql.append(" and imp_implante_electrodos.IDHOJAIMP = imp_hoja_implante.IDHOJAIMP");
		sql.append(" and electrodos.IDELECTRODO = imp_implante_electrodos.IDELECTRODO");
		if(fab!=null && !fab.equals(""))
			sql.append(" and electrodos.FABRICANTE like '%"+fab+"%'");
		if(modelo!=null && !modelo.equals(""))
			sql.append(" and electrodos.MODELO like '%"+modelo+"%'");
		if(nserie!=null && !nserie.equals("") && (nserie2==null || nserie2.equals("")))
			sql.append(" and imp_implante_electrodos.numserie like '%"+nserie+"%'");
		else if(nserie!=null && !nserie.equals("") && nserie2!=null && !nserie2.equals(""))
			sql.append(" and imp_implante_electrodos.numserie between '"+nserie+"%' and '"+nserie2+"%'");
		sql.append(" and procedimiento.fecha between '"+UtilFechas.getFechaString(fini)+"' and '"+UtilFechas.getFechaString(ffin)+"'");
		sql.append(" order by FECHA DESC");
		
		return findByDynamicSelect(sql.toString());
	}
	
}
