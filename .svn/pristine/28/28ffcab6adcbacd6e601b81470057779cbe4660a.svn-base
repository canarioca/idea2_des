/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;

public class ArrEstudioComplicacionesDaoImpl extends AbstractDAO implements ArrEstudioComplicacionesDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDESTUDIO, EDIAGNOSTICO, PROCEDIMIENTO, IDPROCEDIMIENTO, IDPROCEDIMIENTON2, IDPROCEDIMIENTON3, IDPROCEDIMIENTON4, COMENTARIOS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDESTUDIO, EDIAGNOSTICO, PROCEDIMIENTO, IDPROCEDIMIENTO, IDPROCEDIMIENTON2, IDPROCEDIMIENTON3, IDPROCEDIMIENTON4, COMENTARIOS ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDESTUDIO = ?, EDIAGNOSTICO = ?, PROCEDIMIENTO = ?, IDPROCEDIMIENTO = ?, IDPROCEDIMIENTON2 = ?, IDPROCEDIMIENTON3 = ?, IDPROCEDIMIENTON4 = ?, COMENTARIOS = ? WHERE IDESTUDIO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDESTUDIO = ?";

	/** 
	 * Index of column IDESTUDIO
	 */
	protected static final int COLUMN_IDESTUDIO = 1;

	/** 
	 * Index of column EDIAGNOSTICO
	 */
	protected static final int COLUMN_EDIAGNOSTICO = 2;

	/** 
	 * Index of column PROCEDIMIENTO
	 */
	protected static final int COLUMN_PROCEDIMIENTO = 3;

	/** 
	 * Index of column IDPROCEDIMIENTO
	 */
	protected static final int COLUMN_IDPROCEDIMIENTO = 4;

	/** 
	 * Index of column IDPROCEDIMIENTON2
	 */
	protected static final int COLUMN_IDPROCEDIMIENTON2 = 5;

	/** 
	 * Index of column IDPROCEDIMIENTON3
	 */
	protected static final int COLUMN_IDPROCEDIMIENTON3 = 6;

	/** 
	 * Index of column IDPROCEDIMIENTON4
	 */
	protected static final int COLUMN_IDPROCEDIMIENTON4 = 7;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column IDCOMPLICACION
	 */
	protected static final int PK_COLUMN_IDESTUDIO = 1;

	/** 
	 * Inserts a new row in the ARR_ESTUDIO_COMPLICACIONES table.
	 */
	public ArrEstudioComplicacionesPk insert(ArrEstudioComplicaciones dto) throws ArrEstudioComplicacionesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.getIdestudio() != null) {
				stmt.setInt( index++, dto.getIdestudio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEdiagnostico() != null) {
				stmt.setInt( index++, dto.getEdiagnostico().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProcedimiento() != null) {
				stmt.setInt( index++, dto.getProcedimiento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdprocedimiento() != null) {
				stmt.setInt( index++, dto.getIdprocedimiento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdprocedimienton2() != null) {
				stmt.setInt( index++, dto.getIdprocedimienton2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdprocedimienton3() != null) {
				stmt.setInt( index++, dto.getIdprocedimienton3().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdprocedimienton4() != null) {
				stmt.setInt( index++, dto.getIdprocedimienton4().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getComentarios() );
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.insercion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			throw new ArrEstudioComplicacionesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the ARR_ESTUDIO_COMPLICACIONES table.
	 */
	public void update(ArrEstudioComplicacionesPk pk, ArrEstudioComplicaciones dto) throws ArrEstudioComplicacionesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdestudio() != null) {
				stmt.setInt( index++, dto.getIdestudio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEdiagnostico() != null) {
				stmt.setInt( index++, dto.getEdiagnostico().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProcedimiento() != null) {
				stmt.setInt( index++, dto.getProcedimiento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdprocedimiento() != null) {
				stmt.setInt( index++, dto.getIdprocedimiento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdprocedimienton2() != null) {
				stmt.setInt( index++, dto.getIdprocedimienton2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdprocedimienton3() != null) {
				stmt.setInt( index++, dto.getIdprocedimienton3().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdprocedimienton4() != null) {
				stmt.setInt( index++, dto.getIdprocedimienton4().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getComentarios() );
		
			if (pk.getIdestudio() != null) {
				stmt.setInt( 9, pk.getIdestudio().intValue() );
			} else {
				stmt.setNull(9, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrEstudioComplicacionesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the ARR_ESTUDIO_COMPLICACIONES table.
	 */
	public void delete(ArrEstudioComplicacionesPk pk) throws ArrEstudioComplicacionesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdestudio() != null) {
				stmt.setInt( 1, pk.getIdestudio().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(pk.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrEstudioComplicacionesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the ARR_ESTUDIO_COMPLICACIONES table that matches the specified primary-key value.
	 */
	public ArrEstudioComplicaciones findByPrimaryKey(ArrEstudioComplicacionesPk pk) throws ArrEstudioComplicacionesDaoException
	{
		return findByPrimaryKey( pk.getIdestudio() );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_COMPLICACIONES table that match the criteria 'IDCOMPLICACION = :idcomplicacion'.
	 */
	public ArrEstudioComplicaciones findByPrimaryKey(Integer idestudio) throws ArrEstudioComplicacionesDaoException
	{
		ArrEstudioComplicaciones ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDESTUDIO = ?", new Object[] { idestudio } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_COMPLICACIONES table that match the criteria ''.
	 */
	public ArrEstudioComplicaciones[] findAll() throws ArrEstudioComplicacionesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDESTUDIO", null );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_COMPLICACIONES table that match the criteria 'IDESTUDIO = :idestudio'.
	 */
	public ArrEstudioComplicaciones[] findWhereIdestudioEquals(long idestudio) throws ArrEstudioComplicacionesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDESTUDIO = ? ORDER BY IDESTUDIO", new Object[] {  new Long(idestudio) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_COMPLICACIONES table that match the criteria 'EDIAGNOSTICO = :ediagnostico'.
	 */
	public ArrEstudioComplicaciones[] findWhereEdiagnosticoEquals(long ediagnostico) throws ArrEstudioComplicacionesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EDIAGNOSTICO = ? ORDER BY EDIAGNOSTICO", new Object[] {  new Long(ediagnostico) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_COMPLICACIONES table that match the criteria 'PROCEDIMIENTO = :procedimiento'.
	 */
	public ArrEstudioComplicaciones[] findWhereProcedimientoEquals(long procedimiento) throws ArrEstudioComplicacionesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROCEDIMIENTO = ? ORDER BY PROCEDIMIENTO", new Object[] {  new Long(procedimiento) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_COMPLICACIONES table that match the criteria 'IDPROCEDIMIENTO = :idprocedimiento'.
	 */
	public ArrEstudioComplicaciones[] findWhereIdprocedimientoEquals(long idprocedimiento) throws ArrEstudioComplicacionesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPROCEDIMIENTO = ? ORDER BY IDPROCEDIMIENTO", new Object[] {  new Long(idprocedimiento) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_COMPLICACIONES table that match the criteria 'IDPROCEDIMIENTON2 = :idprocedimienton2'.
	 */
	public ArrEstudioComplicaciones[] findWhereIdprocedimienton2Equals(long idprocedimienton2) throws ArrEstudioComplicacionesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPROCEDIMIENTON2 = ? ORDER BY IDPROCEDIMIENTON2", new Object[] {  new Long(idprocedimienton2) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_COMPLICACIONES table that match the criteria 'IDPROCEDIMIENTON3 = :idprocedimienton3'.
	 */
	public ArrEstudioComplicaciones[] findWhereIdprocedimienton3Equals(long idprocedimienton3) throws ArrEstudioComplicacionesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPROCEDIMIENTON3 = ? ORDER BY IDPROCEDIMIENTON3", new Object[] {  new Long(idprocedimienton3) } );
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_COMPLICACIONES table that match the criteria 'IDPROCEDIMIENTON4 = :idprocedimienton4'.
	 */
	public ArrEstudioComplicaciones[] findWhereIdprocedimienton4Equals(long idprocedimienton4) throws ArrEstudioComplicacionesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPROCEDIMIENTON4 = ? ORDER BY IDPROCEDIMIENTON4", new Object[] {  new Long(idprocedimienton4) } );
	}

	/**
	 * Method 'ArrEstudioComplicacionesDaoImpl'
	 * 
	 */
	public ArrEstudioComplicacionesDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ArrEstudioComplicacionesDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ArrEstudioComplicacionesDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrEstudioComplicacionesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		//return "idea.ARR_ESTUDIO_COMPLICACIONES";
		return "idea.arr_estudio_complicaciones";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrEstudioComplicaciones fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrEstudioComplicaciones dto = new ArrEstudioComplicaciones();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrEstudioComplicaciones[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrEstudioComplicaciones dto = new ArrEstudioComplicaciones();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrEstudioComplicaciones ret[] = new ArrEstudioComplicaciones[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrEstudioComplicaciones dto, ResultSet rs) throws SQLException
	{
		dto.setIdestudio( new Integer( rs.getInt(COLUMN_IDESTUDIO) ) );
		if (rs.wasNull()) {
			dto.setIdestudio( null );
		}
		
		dto.setEdiagnostico( new Integer( rs.getInt(COLUMN_EDIAGNOSTICO) ) );
		if (rs.wasNull()) {
			dto.setEdiagnostico( null );
		}
		
		dto.setProcedimiento( new Integer( rs.getInt(COLUMN_PROCEDIMIENTO) ) );
		if (rs.wasNull()) {
			dto.setProcedimiento( null );
		}
		
		dto.setIdprocedimiento( new Integer( rs.getInt(COLUMN_IDPROCEDIMIENTO) ) );
		if (rs.wasNull()) {
			dto.setIdprocedimiento( null );
		}
		
		dto.setIdprocedimienton2( new Integer( rs.getInt(COLUMN_IDPROCEDIMIENTON2) ) );
		if (rs.wasNull()) {
			dto.setIdprocedimienton2( null );
		}
		
		dto.setIdprocedimienton3( new Integer( rs.getInt(COLUMN_IDPROCEDIMIENTON3) ) );
		if (rs.wasNull()) {
			dto.setIdprocedimienton3( null );
		}
		
		dto.setIdprocedimienton4( new Integer( rs.getInt(COLUMN_IDPROCEDIMIENTON4) ) );
		if (rs.wasNull()) {
			dto.setIdprocedimienton4( null );
		}
		
		dto.setComentarios( rs.getString(COLUMN_COMENTARIOS) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrEstudioComplicaciones dto)
	{
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_COMPLICACIONES table that match the specified arbitrary SQL statement
	 */
	public ArrEstudioComplicaciones[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrEstudioComplicacionesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrEstudioComplicacionesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the ARR_ESTUDIO_COMPLICACIONES table that match the specified arbitrary SQL statement
	 */
	public ArrEstudioComplicaciones[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrEstudioComplicacionesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrEstudioComplicacionesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
