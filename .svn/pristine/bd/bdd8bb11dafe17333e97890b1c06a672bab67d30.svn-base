/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ElectrodosDaoImpl extends AbstractDAO implements ElectrodosDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDELECTRODO, MODELO, FABRICANTE, POLARIDAD, FIJACION, BOBINA, CONECTOR, CODIGO, NUMEROMODELO, GS128, ACTIVO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDELECTRODO, MODELO, FABRICANTE, POLARIDAD, FIJACION, BOBINA, CONECTOR, CODIGO, NUMEROMODELO, GS128, ACTIVO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDELECTRODO = ?, MODELO = ?, FABRICANTE = ?, POLARIDAD = ?, FIJACION = ?, BOBINA = ?, CONECTOR = ?, CODIGO = ?, NUMEROMODELO = ?, GS128 = ?, ACTIVO = ? WHERE IDELECTRODO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDELECTRODO = ?";

	/** 
	 * Index of column IDELECTRODO
	 */
	protected static final int COLUMN_IDELECTRODO = 1;

	/** 
	 * Index of column MODELO
	 */
	protected static final int COLUMN_MODELO = 2;

	/** 
	 * Index of column FABRICANTE
	 */
	protected static final int COLUMN_FABRICANTE = 3;

	/** 
	 * Index of column POLARIDAD
	 */
	protected static final int COLUMN_POLARIDAD = 4;

	/** 
	 * Index of column FIJACION
	 */
	protected static final int COLUMN_FIJACION = 5;

	/** 
	 * Index of column BOBINA
	 */
	protected static final int COLUMN_BOBINA = 6;

	/** 
	 * Index of column CONECTOR
	 */
	protected static final int COLUMN_CONECTOR = 7;

	/** 
	 * Index of column CODIGO
	 */
	protected static final int COLUMN_CODIGO = 8;

	/** 
	 * Index of column NUMEROMODELO
	 */
	protected static final int COLUMN_NUMEROMODELO = 9;

	/** 
	 * Index of column GS128
	 */
	protected static final int COLUMN_GS128 = 10;

	/** 
	 * Index of column ACTIVO
	 */
	protected static final int COLUMN_ACTIVO = 11;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 11;

	/** 
	 * Index of primary-key column IDELECTRODO
	 */
	protected static final int PK_COLUMN_IDELECTRODO = 1;

	/** 
	 * Inserts a new row in the electrodos table.
	 */
	public ElectrodosPk insert(Electrodos dto) throws ElectrodosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdelectrodo() != null) {
				stmt.setInt( index++, dto.getIdelectrodo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getModelo() );
			stmt.setString( index++, dto.getFabricante() );
			stmt.setString( index++, dto.getPolaridad() );
			stmt.setString( index++, dto.getFijacion() );
			stmt.setString( index++, dto.getBobina() );
			stmt.setString( index++, dto.getConector() );
			stmt.setString( index++, dto.getCodigo() );
			stmt.setString( index++, dto.getNumeromodelo() );
			stmt.setString( index++, dto.getGs128() );
			if (dto.getActivo() != null) {
				stmt.setInt( index++, dto.getActivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdelectrodo( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ElectrodosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the electrodos table.
	 */
	public void update(ElectrodosPk pk, Electrodos dto) throws ElectrodosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdelectrodo() != null) {
				stmt.setInt( index++, dto.getIdelectrodo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getModelo() );
			stmt.setString( index++, dto.getFabricante() );
			stmt.setString( index++, dto.getPolaridad() );
			stmt.setString( index++, dto.getFijacion() );
			stmt.setString( index++, dto.getBobina() );
			stmt.setString( index++, dto.getConector() );
			stmt.setString( index++, dto.getCodigo() );
			stmt.setString( index++, dto.getNumeromodelo() );
			stmt.setString( index++, dto.getGs128() );
			if (dto.getActivo() != null) {
				stmt.setInt( index++, dto.getActivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (pk.getIdelectrodo() != null) {
				stmt.setInt( 12, pk.getIdelectrodo().intValue() );
			} else {
				stmt.setNull(12, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ElectrodosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the electrodos table.
	 */
	public void delete(ElectrodosPk pk) throws ElectrodosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdelectrodo() != null) {
				stmt.setInt( 1, pk.getIdelectrodo().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ElectrodosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the electrodos table that matches the specified primary-key value.
	 */
	public Electrodos findByPrimaryKey(ElectrodosPk pk) throws ElectrodosDaoException
	{
		return findByPrimaryKey( pk.getIdelectrodo() );
	}

	/** 
	 * Returns all rows from the electrodos table that match the criteria 'IDELECTRODO = :idelectrodo'.
	 */
	public Electrodos findByPrimaryKey(Integer idelectrodo) throws ElectrodosDaoException
	{
		Electrodos ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDELECTRODO = ?", new Object[] { idelectrodo } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the electrodos table that match the criteria ''.
	 */
	public Electrodos[] findAll() throws ElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDELECTRODO", null );
	}

	/** 
	 * Returns all rows from the electrodos table that match the criteria 'IDELECTRODO = :idelectrodo'.
	 */
	public Electrodos[] findWhereIdelectrodoEquals(int idelectrodo) throws ElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDELECTRODO = ? ORDER BY IDELECTRODO", new Object[] {  new Integer(idelectrodo) } );
	}

	/** 
	 * Returns all rows from the electrodos table that match the criteria 'MODELO = :modelo'.
	 */
	public Electrodos[] findWhereModeloEquals(String modelo) throws ElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MODELO = ? ORDER BY MODELO", new Object[] { modelo } );
	}

	/** 
	 * Returns all rows from the electrodos table that match the criteria 'FABRICANTE = :fabricante'.
	 */
	public Electrodos[] findWhereFabricanteEquals(String fabricante) throws ElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FABRICANTE = ? ORDER BY FABRICANTE", new Object[] { fabricante } );
	}

	/** 
	 * Returns all rows from the electrodos table that match the criteria 'POLARIDAD = :polaridad'.
	 */
	public Electrodos[] findWherePolaridadEquals(String polaridad) throws ElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE POLARIDAD = ? ORDER BY POLARIDAD", new Object[] { polaridad } );
	}

	/** 
	 * Returns all rows from the electrodos table that match the criteria 'FIJACION = :fijacion'.
	 */
	public Electrodos[] findWhereFijacionEquals(String fijacion) throws ElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FIJACION = ? ORDER BY FIJACION", new Object[] { fijacion } );
	}

	/** 
	 * Returns all rows from the electrodos table that match the criteria 'BOBINA = :bobina'.
	 */
	public Electrodos[] findWhereBobinaEquals(String bobina) throws ElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BOBINA = ? ORDER BY BOBINA", new Object[] { bobina } );
	}

	/** 
	 * Returns all rows from the electrodos table that match the criteria 'CONECTOR = :conector'.
	 */
	public Electrodos[] findWhereConectorEquals(String conector) throws ElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONECTOR = ? ORDER BY CONECTOR", new Object[] { conector } );
	}

	/** 
	 * Returns all rows from the electrodos table that match the criteria 'CODIGO = :codigo'.
	 */
	public Electrodos[] findWhereCodigoEquals(String codigo) throws ElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CODIGO = ? ORDER BY CODIGO", new Object[] { codigo } );
	}

	/** 
	 * Returns all rows from the electrodos table that match the criteria 'NUMEROMODELO = :numeromodelo'.
	 */
	public Electrodos[] findWhereNumeromodeloEquals(String numeromodelo) throws ElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMEROMODELO = ? ORDER BY NUMEROMODELO", new Object[] { numeromodelo } );
	}

	/** 
	 * Returns all rows from the electrodos table that match the criteria 'GS128 = :gs128'.
	 */
	public Electrodos[] findWhereGs128Equals(String gs128) throws ElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GS128 = ? ORDER BY GS128", new Object[] { gs128 } );
	}

	/** 
	 * Returns all rows from the electrodos table that match the criteria 'ACTIVO = :activo'.
	 */
	public Electrodos[] findWhereActivoEquals(int activo) throws ElectrodosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTIVO = ? ORDER BY ACTIVO", new Object[] {  new Integer(activo) } );
	}

	/**
	 * Method 'ElectrodosDaoImpl'
	 * 
	 */
	public ElectrodosDaoImpl()
	{
	}
	public ElectrodosDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ElectrodosDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ElectrodosDaoImpl'
	 * 
	 * @param userConn
	 */
	public ElectrodosDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.electrodos";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Electrodos fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Electrodos dto = new Electrodos();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Electrodos[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Electrodos dto = new Electrodos();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Electrodos ret[] = new Electrodos[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Electrodos dto, ResultSet rs) throws SQLException
	{
		dto.setIdelectrodo( new Integer( rs.getInt(COLUMN_IDELECTRODO) ) );
		dto.setModelo( rs.getString( COLUMN_MODELO ) );
		dto.setFabricante( rs.getString( COLUMN_FABRICANTE ) );
		dto.setPolaridad( rs.getString( COLUMN_POLARIDAD ) );
		dto.setFijacion( rs.getString( COLUMN_FIJACION ) );
		dto.setBobina( rs.getString( COLUMN_BOBINA ) );
		dto.setConector( rs.getString( COLUMN_CONECTOR ) );
		dto.setCodigo( rs.getString( COLUMN_CODIGO ) );
		dto.setNumeromodelo( rs.getString( COLUMN_NUMEROMODELO ) );
		dto.setGs128( rs.getString( COLUMN_GS128 ) );
		dto.setActivo( new Integer( rs.getInt(COLUMN_ACTIVO) ) );
		if (rs.wasNull()) {
			dto.setActivo( null );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Electrodos dto)
	{
	}

	/** 
	 * Returns all rows from the electrodos table that match the specified arbitrary SQL statement
	 */
	public Electrodos[] findByDynamicSelect(String sql, Object[] sqlParams) throws ElectrodosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ElectrodosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the electrodos table that match the specified arbitrary SQL statement
	 */
	public Electrodos[] findByDynamicWhere(String sql, Object[] sqlParams) throws ElectrodosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ElectrodosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
