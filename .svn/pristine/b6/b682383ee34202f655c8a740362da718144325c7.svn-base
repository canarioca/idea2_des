/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface SegSeguimientoRegEventosDao
{
	/** 
	 * Inserts a new row in the seg_seguimiento_reg_eventos table.
	 */
	public SegSeguimientoRegEventosPk insert(SegSeguimientoRegEventos dto) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Updates a single row in the seg_seguimiento_reg_eventos table.
	 */
	public void update(SegSeguimientoRegEventosPk pk, SegSeguimientoRegEventos dto) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Deletes a single row in the seg_seguimiento_reg_eventos table.
	 */
	public void delete(SegSeguimientoRegEventosPk pk) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns the rows from the seg_seguimiento_reg_eventos table that matches the specified primary-key value.
	 */
	public SegSeguimientoRegEventos findByPrimaryKey(SegSeguimientoRegEventosPk pk) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'IDSEG = :idseg'.
	 */
	public SegSeguimientoRegEventos findByPrimaryKey(Integer idseg) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria ''.
	 */
	public SegSeguimientoRegEventos[] findAll() throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'IDSEG = :idseg'.
	 */
	public SegSeguimientoRegEventos[] findWhereIdsegEquals(int idseg) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'IDREGEVENTOS = :idregeventos'.
	 */
	public SegSeguimientoRegEventos[] findWhereIdregeventosEquals(int idregeventos) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'FECHA = :fecha'.
	 */
	public SegSeguimientoRegEventos[] findWhereFechaEquals(Date fecha) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'OPERADOR_MEDICO = :operadorMedico'.
	 */
	public SegSeguimientoRegEventos[] findWhereOperadorMedicoEquals(String operadorMedico) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'OPERADOR_ENFERMERIA = :operadorEnfermeria'.
	 */
	public SegSeguimientoRegEventos[] findWhereOperadorEnfermeriaEquals(String operadorEnfermeria) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'MOTIVO = :motivo'.
	 */
	public SegSeguimientoRegEventos[] findWhereMotivoEquals(int motivo) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'REMOTO = :remoto'.
	 */
	public SegSeguimientoRegEventos[] findWhereRemotoEquals(int remoto) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'TIPOSEGUIMIENTO = :tiposeguimiento'.
	 */
	public SegSeguimientoRegEventos[] findWhereTiposeguimientoEquals(int tiposeguimiento) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'ACTIVACION = :activacion'.
	 */
	public SegSeguimientoRegEventos[] findWhereActivacionEquals(int activacion) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'ESTADOBATERIA = :estadobateria'.
	 */
	public SegSeguimientoRegEventos[] findWhereEstadobateriaEquals(int estadobateria) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'EV_RITMOSINUSAL = :evRitmosinusal'.
	 */
	public SegSeguimientoRegEventos[] findWhereEvRitmosinusalEquals(int evRitmosinusal) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'EV_PAUSA = :evPausa'.
	 */
	public SegSeguimientoRegEventos[] findWhereEvPausaEquals(int evPausa) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'EV_BAV = :evBav'.
	 */
	public SegSeguimientoRegEventos[] findWhereEvBavEquals(int evBav) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'EV_TPSV = :evTpsv'.
	 */
	public SegSeguimientoRegEventos[] findWhereEvTpsvEquals(int evTpsv) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'EV_TV = :evTv'.
	 */
	public SegSeguimientoRegEventos[] findWhereEvTvEquals(int evTv) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'EV_FV = :evFv'.
	 */
	public SegSeguimientoRegEventos[] findWhereEvFvEquals(int evFv) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'EV_OTROS = :evOtros'.
	 */
	public SegSeguimientoRegEventos[] findWhereEvOtrosEquals(int evOtros) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'TIEMPO_FA = :tiempoFa'.
	 */
	public SegSeguimientoRegEventos[] findWhereTiempoFaEquals(String tiempoFa) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'OBSERVACIONES = :observaciones'.
	 */
	public SegSeguimientoRegEventos[] findWhereObservacionesEquals(String observaciones) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'COMENTARIOS_INTERNOS = :comentariosInternos'.
	 */
	public SegSeguimientoRegEventos[] findWhereComentariosInternosEquals(String comentariosInternos) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the criteria 'DESCRIPCIONOTROS = :descripcionotros'.
	 */
	public SegSeguimientoRegEventos[] findWhereDescripcionotrosEquals(String descripcionotros) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the specified arbitrary SQL statement
	 */
	public SegSeguimientoRegEventos[] findByDynamicSelect(String sql, Object[] sqlParams) throws SegSeguimientoRegEventosDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento_reg_eventos table that match the specified arbitrary SQL statement
	 */
	public SegSeguimientoRegEventos[] findByDynamicWhere(String sql, Object[] sqlParams) throws SegSeguimientoRegEventosDaoException;

}
