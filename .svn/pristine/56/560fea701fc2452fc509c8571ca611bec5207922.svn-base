/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class RcRehabilitadorDaoImpl extends AbstractDAO implements RcRehabilitadorDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_RC_REHABILITADOR, FECHA, SEDENTARISMO, NIVEL_EJERCICIO, HORAS_EJERCICIO, PARAMETRO_FVC, PARAMETRO_FEVI, PARAMETRO_FVC_FEVI, ID_PROBLEMA_ARTICULAR, ID_PROBLEMA_COGNITIVO, ID_PROBLEMA_SENSORIAL, ID_NIVEL_EDUCATIVO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_RC_REHABILITADOR, FECHA, SEDENTARISMO, NIVEL_EJERCICIO, HORAS_EJERCICIO, PARAMETRO_FVC, PARAMETRO_FEVI, PARAMETRO_FVC_FEVI, ID_PROBLEMA_ARTICULAR, ID_PROBLEMA_COGNITIVO, ID_PROBLEMA_SENSORIAL, ID_NIVEL_EDUCATIVO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_RC_REHABILITADOR = ?, FECHA = ?, SEDENTARISMO = ?, NIVEL_EJERCICIO = ?, HORAS_EJERCICIO = ?, PARAMETRO_FVC = ?, PARAMETRO_FEVI = ?, PARAMETRO_FVC_FEVI = ?, ID_PROBLEMA_ARTICULAR = ?, ID_PROBLEMA_COGNITIVO = ?, ID_PROBLEMA_SENSORIAL = ?, ID_NIVEL_EDUCATIVO = ? WHERE ID_RC_REHABILITADOR = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_RC_REHABILITADOR = ?";

	/** 
	 * Index of column ID_RC_REHABILITADOR
	 */
	protected static final int COLUMN_ID_RC_REHABILITADOR = 1;

	/** 
	 * Index of column FECHA
	 */
	protected static final int COLUMN_FECHA = 2;

	/** 
	 * Index of column SEDENTARISMO
	 */
	protected static final int COLUMN_SEDENTARISMO = 3;

	/** 
	 * Index of column NIVEL_EJERCICIO
	 */
	protected static final int COLUMN_NIVEL_EJERCICIO = 4;

	/** 
	 * Index of column HORAS_EJERCICIO
	 */
	protected static final int COLUMN_HORAS_EJERCICIO = 5;

	/** 
	 * Index of column PARAMETRO_FVC
	 */
	protected static final int COLUMN_PARAMETRO_FVC = 6;

	/** 
	 * Index of column PARAMETRO_FEVI
	 */
	protected static final int COLUMN_PARAMETRO_FEVI = 7;

	/** 
	 * Index of column PARAMETRO_FVC_FEVI
	 */
	protected static final int COLUMN_PARAMETRO_FVC_FEVI = 8;

	/** 
	 * Index of column ID_PROBLEMA_ARTICULAR
	 */
	protected static final int COLUMN_ID_PROBLEMA_ARTICULAR = 9;

	/** 
	 * Index of column ID_PROBLEMA_COGNITIVO
	 */
	protected static final int COLUMN_ID_PROBLEMA_COGNITIVO = 10;

	/** 
	 * Index of column ID_PROBLEMA_SENSORIAL
	 */
	protected static final int COLUMN_ID_PROBLEMA_SENSORIAL = 11;

	/** 
	 * Index of column ID_NIVEL_EDUCATIVO
	 */
	protected static final int COLUMN_ID_NIVEL_EDUCATIVO = 12;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column ID_RC_REHABILITADOR
	 */
	protected static final int PK_COLUMN_ID_RC_REHABILITADOR = 1;

	/** 
	 * Inserts a new row in the RC_REHABILITADOR table.
	 */
	public RcRehabilitadorPk insert(RcRehabilitador dto) throws RcRehabilitadorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdRcRehabilitadorModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_RC_REHABILITADOR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSedentarismoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "SEDENTARISMO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNivelEjercicioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NIVEL_EJERCICIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isHorasEjercicioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "HORAS_EJERCICIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isParametroFvcModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PARAMETRO_FVC" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isParametroFeviModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PARAMETRO_FEVI" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isParametroFvcFeviModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PARAMETRO_FVC_FEVI" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdProblemaArticularModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PROBLEMA_ARTICULAR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdProblemaCognitivoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PROBLEMA_COGNITIVO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdProblemaSensorialModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_PROBLEMA_SENSORIAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdNivelEducativoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_NIVEL_EDUCATIVO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdRcRehabilitadorModified()) {
				stmt.setLong( index++, dto.getIdRcRehabilitador() );
			}
		
			if (dto.isFechaModified()) {
				stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			}
		
			if (dto.isSedentarismoModified()) {
				if (dto.isSedentarismoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getSedentarismo() );
				}
		
			}
		
			if (dto.isNivelEjercicioModified()) {
				stmt.setString( index++, dto.getNivelEjercicio() );
			}
		
			if (dto.isHorasEjercicioModified()) {
				stmt.setString( index++, dto.getHorasEjercicio() );
			}
		
			if (dto.isParametroFvcModified()) {
				stmt.setString( index++, dto.getParametroFvc() );
			}
		
			if (dto.isParametroFeviModified()) {
				stmt.setString( index++, dto.getParametroFevi() );
			}
		
			if (dto.isParametroFvcFeviModified()) {
				stmt.setString( index++, dto.getParametroFvcFevi() );
			}
		
			if (dto.isIdProblemaArticularModified()) {
				if (dto.isIdProblemaArticularNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setLong( index++, dto.getIdProblemaArticular() );
				}
		
			}
		
			if (dto.isIdProblemaCognitivoModified()) {
				if (dto.isIdProblemaCognitivoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setLong( index++, dto.getIdProblemaCognitivo() );
				}
		
			}
		
			if (dto.isIdProblemaSensorialModified()) {
				if (dto.isIdProblemaSensorialNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setLong( index++, dto.getIdProblemaSensorial() );
				}
		
			}
		
			if (dto.isIdNivelEducativoModified()) {
				if (dto.isIdNivelEducativoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setLong( index++, dto.getIdNivelEducativo() );
				}
		
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			throw new RcRehabilitadorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the RC_REHABILITADOR table.
	 */
	public void update(RcRehabilitadorPk pk, RcRehabilitador dto) throws RcRehabilitadorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdRcRehabilitadorModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_RC_REHABILITADOR=?" );
				modified=true;
			}
		
			if (dto.isFechaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA=?" );
				modified=true;
			}
		
			if (dto.isSedentarismoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SEDENTARISMO=?" );
				modified=true;
			}
		
			if (dto.isNivelEjercicioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NIVEL_EJERCICIO=?" );
				modified=true;
			}
		
			if (dto.isHorasEjercicioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "HORAS_EJERCICIO=?" );
				modified=true;
			}
		
			if (dto.isParametroFvcModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PARAMETRO_FVC=?" );
				modified=true;
			}
		
			if (dto.isParametroFeviModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PARAMETRO_FEVI=?" );
				modified=true;
			}
		
			if (dto.isParametroFvcFeviModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PARAMETRO_FVC_FEVI=?" );
				modified=true;
			}
		
			if (dto.isIdProblemaArticularModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PROBLEMA_ARTICULAR=?" );
				modified=true;
			}
		
			if (dto.isIdProblemaCognitivoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PROBLEMA_COGNITIVO=?" );
				modified=true;
			}
		
			if (dto.isIdProblemaSensorialModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_PROBLEMA_SENSORIAL=?" );
				modified=true;
			}
		
			if (dto.isIdNivelEducativoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_NIVEL_EDUCATIVO=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_RC_REHABILITADOR=?" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdRcRehabilitadorModified()) {
				stmt.setLong( index++, dto.getIdRcRehabilitador() );
			}
		
			if (dto.isFechaModified()) {
				stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			}
		
			if (dto.isSedentarismoModified()) {
				if (dto.isSedentarismoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getSedentarismo() );
				}
		
			}
		
			if (dto.isNivelEjercicioModified()) {
				stmt.setString( index++, dto.getNivelEjercicio() );
			}
		
			if (dto.isHorasEjercicioModified()) {
				stmt.setString( index++, dto.getHorasEjercicio() );
			}
		
			if (dto.isParametroFvcModified()) {
				stmt.setString( index++, dto.getParametroFvc() );
			}
		
			if (dto.isParametroFeviModified()) {
				stmt.setString( index++, dto.getParametroFevi() );
			}
		
			if (dto.isParametroFvcFeviModified()) {
				stmt.setString( index++, dto.getParametroFvcFevi() );
			}
		
			if (dto.isIdProblemaArticularModified()) {
				if (dto.isIdProblemaArticularNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setLong( index++, dto.getIdProblemaArticular() );
				}
		
			}
		
			if (dto.isIdProblemaCognitivoModified()) {
				if (dto.isIdProblemaCognitivoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setLong( index++, dto.getIdProblemaCognitivo() );
				}
		
			}
		
			if (dto.isIdProblemaSensorialModified()) {
				if (dto.isIdProblemaSensorialNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setLong( index++, dto.getIdProblemaSensorial() );
				}
		
			}
		
			if (dto.isIdNivelEducativoModified()) {
				if (dto.isIdNivelEducativoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setLong( index++, dto.getIdNivelEducativo() );
				}
		
			}
		
			stmt.setLong( index++, pk.getIdRcRehabilitador() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new RcRehabilitadorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the RC_REHABILITADOR table.
	 */
	public void delete(RcRehabilitadorPk pk) throws RcRehabilitadorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getIdRcRehabilitador() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new RcRehabilitadorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the RC_REHABILITADOR table that matches the specified primary-key value.
	 */
	public RcRehabilitador findByPrimaryKey(RcRehabilitadorPk pk) throws RcRehabilitadorDaoException
	{
		return findByPrimaryKey( pk.getIdRcRehabilitador() );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'ID_RC_REHABILITADOR = :idRcRehabilitador'.
	 */
	public RcRehabilitador findByPrimaryKey(long idRcRehabilitador) throws RcRehabilitadorDaoException
	{
		RcRehabilitador ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_RC_REHABILITADOR = ?", new Object[] {  new Long(idRcRehabilitador) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria ''.
	 */
	public RcRehabilitador[] findAll() throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_RC_REHABILITADOR", null );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'ID_NIVEL_EDUCATIVO = :idNivelEducativo'.
	 */
	public RcRehabilitador[] findByRcRehaNivelEducativo(long idNivelEducativo) throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_NIVEL_EDUCATIVO = ?", new Object[] {  new Long(idNivelEducativo) } );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'ID_PROBLEMA_ARTICULAR = :idProblemaArticular'.
	 */
	public RcRehabilitador[] findByRcRehaProbArticulares(long idProblemaArticular) throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PROBLEMA_ARTICULAR = ?", new Object[] {  new Long(idProblemaArticular) } );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'ID_PROBLEMA_COGNITIVO = :idProblemaCognitivo'.
	 */
	public RcRehabilitador[] findByRcRehaProbCognitivos(long idProblemaCognitivo) throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PROBLEMA_COGNITIVO = ?", new Object[] {  new Long(idProblemaCognitivo) } );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'ID_PROBLEMA_SENSORIAL = :idProblemaSensorial'.
	 */
	public RcRehabilitador[] findByRcRehaProbSensoriales(long idProblemaSensorial) throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PROBLEMA_SENSORIAL = ?", new Object[] {  new Long(idProblemaSensorial) } );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'ID_RC_REHABILITADOR = :idRcRehabilitador'.
	 */
	public RcRehabilitador[] findWhereIdRcRehabilitadorEquals(long idRcRehabilitador) throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_RC_REHABILITADOR = ? ORDER BY ID_RC_REHABILITADOR", new Object[] {  new Long(idRcRehabilitador) } );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'FECHA = :fecha'.
	 */
	public RcRehabilitador[] findWhereFechaEquals(Date fecha) throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA = ? ORDER BY FECHA", new Object[] { fecha==null ? null : new java.sql.Timestamp( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'SEDENTARISMO = :sedentarismo'.
	 */
	public RcRehabilitador[] findWhereSedentarismoEquals(int sedentarismo) throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SEDENTARISMO = ? ORDER BY SEDENTARISMO", new Object[] {  new Integer(sedentarismo) } );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'NIVEL_EJERCICIO = :nivelEjercicio'.
	 */
	public RcRehabilitador[] findWhereNivelEjercicioEquals(String nivelEjercicio) throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NIVEL_EJERCICIO = ? ORDER BY NIVEL_EJERCICIO", new Object[] { nivelEjercicio } );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'HORAS_EJERCICIO = :horasEjercicio'.
	 */
	public RcRehabilitador[] findWhereHorasEjercicioEquals(String horasEjercicio) throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HORAS_EJERCICIO = ? ORDER BY HORAS_EJERCICIO", new Object[] { horasEjercicio } );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'PARAMETRO_FVC = :parametroFvc'.
	 */
	public RcRehabilitador[] findWhereParametroFvcEquals(String parametroFvc) throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARAMETRO_FVC = ? ORDER BY PARAMETRO_FVC", new Object[] { parametroFvc } );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'PARAMETRO_FEVI = :parametroFevi'.
	 */
	public RcRehabilitador[] findWhereParametroFeviEquals(String parametroFevi) throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARAMETRO_FEVI = ? ORDER BY PARAMETRO_FEVI", new Object[] { parametroFevi } );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'PARAMETRO_FVC_FEVI = :parametroFvcFevi'.
	 */
	public RcRehabilitador[] findWhereParametroFvcFeviEquals(String parametroFvcFevi) throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARAMETRO_FVC_FEVI = ? ORDER BY PARAMETRO_FVC_FEVI", new Object[] { parametroFvcFevi } );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'ID_PROBLEMA_ARTICULAR = :idProblemaArticular'.
	 */
	public RcRehabilitador[] findWhereIdProblemaArticularEquals(long idProblemaArticular) throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PROBLEMA_ARTICULAR = ? ORDER BY ID_PROBLEMA_ARTICULAR", new Object[] {  new Long(idProblemaArticular) } );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'ID_PROBLEMA_COGNITIVO = :idProblemaCognitivo'.
	 */
	public RcRehabilitador[] findWhereIdProblemaCognitivoEquals(long idProblemaCognitivo) throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PROBLEMA_COGNITIVO = ? ORDER BY ID_PROBLEMA_COGNITIVO", new Object[] {  new Long(idProblemaCognitivo) } );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'ID_PROBLEMA_SENSORIAL = :idProblemaSensorial'.
	 */
	public RcRehabilitador[] findWhereIdProblemaSensorialEquals(long idProblemaSensorial) throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PROBLEMA_SENSORIAL = ? ORDER BY ID_PROBLEMA_SENSORIAL", new Object[] {  new Long(idProblemaSensorial) } );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the criteria 'ID_NIVEL_EDUCATIVO = :idNivelEducativo'.
	 */
	public RcRehabilitador[] findWhereIdNivelEducativoEquals(long idNivelEducativo) throws RcRehabilitadorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_NIVEL_EDUCATIVO = ? ORDER BY ID_NIVEL_EDUCATIVO", new Object[] {  new Long(idNivelEducativo) } );
	}

	/**
	 * Method 'RcRehabilitadorDaoImpl'
	 * 
	 */
	public RcRehabilitadorDaoImpl()
	{
	}

	/**
	 * Method 'RcRehabilitadorDaoImpl'
	 * 
	 * @param userConn
	 */
	public RcRehabilitadorDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "IDEA.RC_REHABILITADOR";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected RcRehabilitador fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			RcRehabilitador dto = new RcRehabilitador();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected RcRehabilitador[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			RcRehabilitador dto = new RcRehabilitador();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		RcRehabilitador ret[] = new RcRehabilitador[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(RcRehabilitador dto, ResultSet rs) throws SQLException
	{
		dto.setIdRcRehabilitador( rs.getLong( COLUMN_ID_RC_REHABILITADOR ) );
		dto.setFecha( rs.getTimestamp(COLUMN_FECHA ) );
		dto.setSedentarismo( rs.getInt( COLUMN_SEDENTARISMO ) );
		if (rs.wasNull()) {
			dto.setSedentarismoNull( true );
		}
		
		dto.setNivelEjercicio( rs.getString( COLUMN_NIVEL_EJERCICIO ) );
		dto.setHorasEjercicio( rs.getString( COLUMN_HORAS_EJERCICIO ) );
		dto.setParametroFvc( rs.getString( COLUMN_PARAMETRO_FVC ) );
		dto.setParametroFevi( rs.getString( COLUMN_PARAMETRO_FEVI ) );
		dto.setParametroFvcFevi( rs.getString( COLUMN_PARAMETRO_FVC_FEVI ) );
		dto.setIdProblemaArticular( rs.getLong( COLUMN_ID_PROBLEMA_ARTICULAR ) );
		if (rs.wasNull()) {
			dto.setIdProblemaArticularNull( true );
		}
		
		dto.setIdProblemaCognitivo( rs.getLong( COLUMN_ID_PROBLEMA_COGNITIVO ) );
		if (rs.wasNull()) {
			dto.setIdProblemaCognitivoNull( true );
		}
		
		dto.setIdProblemaSensorial( rs.getLong( COLUMN_ID_PROBLEMA_SENSORIAL ) );
		if (rs.wasNull()) {
			dto.setIdProblemaSensorialNull( true );
		}
		
		dto.setIdNivelEducativo( rs.getLong( COLUMN_ID_NIVEL_EDUCATIVO ) );
		if (rs.wasNull()) {
			dto.setIdNivelEducativoNull( true );
		}
		
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(RcRehabilitador dto)
	{
		dto.setIdRcRehabilitadorModified( false );
		dto.setFechaModified( false );
		dto.setSedentarismoModified( false );
		dto.setNivelEjercicioModified( false );
		dto.setHorasEjercicioModified( false );
		dto.setParametroFvcModified( false );
		dto.setParametroFeviModified( false );
		dto.setParametroFvcFeviModified( false );
		dto.setIdProblemaArticularModified( false );
		dto.setIdProblemaCognitivoModified( false );
		dto.setIdProblemaSensorialModified( false );
		dto.setIdNivelEducativoModified( false );
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the specified arbitrary SQL statement
	 */
	public RcRehabilitador[] findByDynamicSelect(String sql, Object[] sqlParams) throws RcRehabilitadorDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new RcRehabilitadorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the RC_REHABILITADOR table that match the specified arbitrary SQL statement
	 */
	public RcRehabilitador[] findByDynamicWhere(String sql, Object[] sqlParams) throws RcRehabilitadorDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new RcRehabilitadorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
