/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface RcRehabilitacionCardiacaDao
{
	/** 
	 * Inserts a new row in the RC_REHABILITACION_CARDIACA table.
	 */
	public RcRehabilitacionCardiacaPk insert(RcRehabilitacionCardiaca dto) throws RcRehabilitacionCardiacaDaoException;

	/** 
	 * Updates a single row in the RC_REHABILITACION_CARDIACA table.
	 */
	public void update(RcRehabilitacionCardiacaPk pk, RcRehabilitacionCardiaca dto) throws RcRehabilitacionCardiacaDaoException;

	/** 
	 * Deletes a single row in the RC_REHABILITACION_CARDIACA table.
	 */
	public void delete(RcRehabilitacionCardiacaPk pk) throws RcRehabilitacionCardiacaDaoException;

	/** 
	 * Returns the rows from the RC_REHABILITACION_CARDIACA table that matches the specified primary-key value.
	 */
	public RcRehabilitacionCardiaca findByPrimaryKey(RcRehabilitacionCardiacaPk pk) throws RcRehabilitacionCardiacaDaoException;

	/** 
	 * Returns all rows from the RC_REHABILITACION_CARDIACA table that match the criteria 'ID_RC = :idRc'.
	 */
	public RcRehabilitacionCardiaca findByPrimaryKey(long idRc) throws RcRehabilitacionCardiacaDaoException;

	/** 
	 * Returns all rows from the RC_REHABILITACION_CARDIACA table that match the criteria ''.
	 */
	public RcRehabilitacionCardiaca[] findAll() throws RcRehabilitacionCardiacaDaoException;

	/** 
	 * Returns all rows from the RC_REHABILITACION_CARDIACA table that match the criteria 'ID_RC_NUTRICION = :idRcNutricion'.
	 */
	public RcRehabilitacionCardiaca[] findByRcNutricion(long idRcNutricion) throws RcRehabilitacionCardiacaDaoException;

	/** 
	 * Returns all rows from the RC_REHABILITACION_CARDIACA table that match the criteria 'ID_RC_PSICOLOGIA = :idRcPsicologia'.
	 */
	public RcRehabilitacionCardiaca[] findByRcPsicologia(long idRcPsicologia) throws RcRehabilitacionCardiacaDaoException;

	/** 
	 * Returns all rows from the RC_REHABILITACION_CARDIACA table that match the criteria 'ID_RC = :idRc'.
	 */
	public RcRehabilitacionCardiaca[] findWhereIdRcEquals(long idRc) throws RcRehabilitacionCardiacaDaoException;

	/** 
	 * Returns all rows from the RC_REHABILITACION_CARDIACA table that match the criteria 'ID_RC_REHABILITADOR = :idRcRehabilitador'.
	 */
	public RcRehabilitacionCardiaca[] findWhereIdRcRehabilitadorEquals(long idRcRehabilitador) throws RcRehabilitacionCardiacaDaoException;

	/** 
	 * Returns all rows from the RC_REHABILITACION_CARDIACA table that match the criteria 'ID_RC_PSICOLOGIA = :idRcPsicologia'.
	 */
	public RcRehabilitacionCardiaca[] findWhereIdRcPsicologiaEquals(long idRcPsicologia) throws RcRehabilitacionCardiacaDaoException;

	/** 
	 * Returns all rows from the RC_REHABILITACION_CARDIACA table that match the criteria 'ID_RC_NUTRICION = :idRcNutricion'.
	 */
	public RcRehabilitacionCardiaca[] findWhereIdRcNutricionEquals(long idRcNutricion) throws RcRehabilitacionCardiacaDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the RC_REHABILITACION_CARDIACA table that match the specified arbitrary SQL statement
	 */
	public RcRehabilitacionCardiaca[] findByDynamicSelect(String sql, Object[] sqlParams) throws RcRehabilitacionCardiacaDaoException;

	/** 
	 * Returns all rows from the RC_REHABILITACION_CARDIACA table that match the specified arbitrary SQL statement
	 */
	public RcRehabilitacionCardiaca[] findByDynamicWhere(String sql, Object[] sqlParams) throws RcRehabilitacionCardiacaDaoException;

}
