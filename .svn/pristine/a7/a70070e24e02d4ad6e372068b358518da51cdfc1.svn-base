/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;

public class SegObservacionesMpDaoImpl extends AbstractDAO implements SegObservacionesMpDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDOBSMP, ARRAU, NUMARRAU, CAMBIOMODOARRAU, NUMCAMBIOMODOARRAU, ARRVENT, EPIRUIDO, NUMARRV FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDOBSMP, ARRAU, NUMARRAU, CAMBIOMODOARRAU, NUMCAMBIOMODOARRAU, ARRVENT, EPIRUIDO, NUMARRV ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDOBSMP = ?, ARRAU = ?, NUMARRAU = ?, CAMBIOMODOARRAU = ?, NUMCAMBIOMODOARRAU = ?, ARRVENT = ?, EPIRUIDO = ?, NUMARRV = ? WHERE IDOBSMP = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDOBSMP = ?";

	/** 
	 * Index of column IDOBSMP
	 */
	protected static final int COLUMN_IDOBSMP = 1;

	/** 
	 * Index of column ARRAU
	 */
	protected static final int COLUMN_ARRAU = 2;

	/** 
	 * Index of column NUMARRAU
	 */
	protected static final int COLUMN_NUMARRAU = 3;

	/** 
	 * Index of column CAMBIOMODOARRAU
	 */
	protected static final int COLUMN_CAMBIOMODOARRAU = 4;

	/** 
	 * Index of column NUMCAMBIOMODOARRAU
	 */
	protected static final int COLUMN_NUMCAMBIOMODOARRAU = 5;

	/** 
	 * Index of column ARRVENT
	 */
	protected static final int COLUMN_ARRVENT = 6;

	/** 
	 * Index of column EPIRUIDO
	 */
	protected static final int COLUMN_EPIRUIDO = 7;

	/** 
	 * Index of column NUMARRV
	 */
	protected static final int COLUMN_NUMARRV = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column IDOBSMP
	 */
	protected static final int PK_COLUMN_IDOBSMP = 1;

	/** 
	 * Inserts a new row in the seg_observaciones_mp table.
	 */
	public SegObservacionesMpPk insert(SegObservacionesMp dto) throws SegObservacionesMpDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdobsmp() != null) {
				stmt.setInt( index++, dto.getIdobsmp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getArrau() != null) {
				stmt.setShort( index++, dto.getArrau().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getNumarrau() );
			if (dto.getCambiomodoarrau() != null) {
				stmt.setShort( index++, dto.getCambiomodoarrau().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getNumcambiomodoarrau() );
			if (dto.getArrvent() != null) {
				stmt.setShort( index++, dto.getArrvent().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getEpiruido() != null) {
				stmt.setShort( index++, dto.getEpiruido().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getNumarrv() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdobsmp( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegObservacionesMpDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the seg_observaciones_mp table.
	 */
	public void update(SegObservacionesMpPk pk, SegObservacionesMp dto) throws SegObservacionesMpDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdobsmp() != null) {
				stmt.setInt( index++, dto.getIdobsmp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getArrau() != null) {
				stmt.setShort( index++, dto.getArrau().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getNumarrau() );
			if (dto.getCambiomodoarrau() != null) {
				stmt.setShort( index++, dto.getCambiomodoarrau().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getNumcambiomodoarrau() );
			if (dto.getArrvent() != null) {
				stmt.setShort( index++, dto.getArrvent().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getEpiruido() != null) {
				stmt.setShort( index++, dto.getEpiruido().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getNumarrv() );
			if (pk.getIdobsmp() != null) {
				stmt.setInt( 9, pk.getIdobsmp().intValue() );
			} else {
				stmt.setNull(9, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegObservacionesMpDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the seg_observaciones_mp table.
	 */
	public void delete(SegObservacionesMpPk pk) throws SegObservacionesMpDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdobsmp() != null) {
				stmt.setInt( 1, pk.getIdobsmp().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegObservacionesMpDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the seg_observaciones_mp table that matches the specified primary-key value.
	 */
	public SegObservacionesMp findByPrimaryKey(SegObservacionesMpPk pk) throws SegObservacionesMpDaoException
	{
		return findByPrimaryKey( pk.getIdobsmp() );
	}

	/** 
	 * Returns all rows from the seg_observaciones_mp table that match the criteria 'IDOBSMP = :idobsmp'.
	 */
	public SegObservacionesMp findByPrimaryKey(Integer idobsmp) throws SegObservacionesMpDaoException
	{
		SegObservacionesMp ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDOBSMP = ?", new Object[] { idobsmp } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the seg_observaciones_mp table that match the criteria ''.
	 */
	public SegObservacionesMp[] findAll() throws SegObservacionesMpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDOBSMP", null );
	}

	/** 
	 * Returns all rows from the seg_observaciones_mp table that match the criteria 'IDOBSMP = :idobsmp'.
	 */
	public SegObservacionesMp[] findWhereIdobsmpEquals(int idobsmp) throws SegObservacionesMpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDOBSMP = ? ORDER BY IDOBSMP", new Object[] {  new Integer(idobsmp) } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_mp table that match the criteria 'ARRAU = :arrau'.
	 */
	public SegObservacionesMp[] findWhereArrauEquals(short arrau) throws SegObservacionesMpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ARRAU = ? ORDER BY ARRAU", new Object[] {  new Short(arrau) } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_mp table that match the criteria 'NUMARRAU = :numarrau'.
	 */
	public SegObservacionesMp[] findWhereNumarrauEquals(String numarrau) throws SegObservacionesMpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMARRAU = ? ORDER BY NUMARRAU", new Object[] { numarrau } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_mp table that match the criteria 'CAMBIOMODOARRAU = :cambiomodoarrau'.
	 */
	public SegObservacionesMp[] findWhereCambiomodoarrauEquals(short cambiomodoarrau) throws SegObservacionesMpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CAMBIOMODOARRAU = ? ORDER BY CAMBIOMODOARRAU", new Object[] {  new Short(cambiomodoarrau) } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_mp table that match the criteria 'NUMCAMBIOMODOARRAU = :numcambiomodoarrau'.
	 */
	public SegObservacionesMp[] findWhereNumcambiomodoarrauEquals(String numcambiomodoarrau) throws SegObservacionesMpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMCAMBIOMODOARRAU = ? ORDER BY NUMCAMBIOMODOARRAU", new Object[] { numcambiomodoarrau } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_mp table that match the criteria 'ARRVENT = :arrvent'.
	 */
	public SegObservacionesMp[] findWhereArrventEquals(short arrvent) throws SegObservacionesMpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ARRVENT = ? ORDER BY ARRVENT", new Object[] {  new Short(arrvent) } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_mp table that match the criteria 'EPIRUIDO = :epiruido'.
	 */
	public SegObservacionesMp[] findWhereEpiruidoEquals(short epiruido) throws SegObservacionesMpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EPIRUIDO = ? ORDER BY EPIRUIDO", new Object[] {  new Short(epiruido) } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_mp table that match the criteria 'NUMARRV = :numarrv'.
	 */
	public SegObservacionesMp[] findWhereNumarrvEquals(String numarrv) throws SegObservacionesMpDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMARRV = ? ORDER BY NUMARRV", new Object[] { numarrv } );
	}

	/**
	 * Method 'SegObservacionesMpDaoImpl'
	 * 
	 */
	public SegObservacionesMpDaoImpl()
	{
	}
	/**
	 * Method 'SegObservacionesMpDaoImpl'
	 * 
	 */
	public SegObservacionesMpDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public SegObservacionesMpDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'SegObservacionesMpDaoImpl'
	 * 
	 * @param userConn
	 */
	public SegObservacionesMpDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.seg_observaciones_mp";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SegObservacionesMp fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SegObservacionesMp dto = new SegObservacionesMp();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SegObservacionesMp[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SegObservacionesMp dto = new SegObservacionesMp();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SegObservacionesMp ret[] = new SegObservacionesMp[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SegObservacionesMp dto, ResultSet rs) throws SQLException
	{
		dto.setIdobsmp( new Integer( rs.getInt(COLUMN_IDOBSMP) ) );
		dto.setArrau( new Short( rs.getShort(COLUMN_ARRAU) ) );
		if (rs.wasNull()) {
			dto.setArrau( null );
		}
		
		dto.setNumarrau( rs.getString( COLUMN_NUMARRAU ) );
		dto.setCambiomodoarrau( new Short( rs.getShort(COLUMN_CAMBIOMODOARRAU) ) );
		if (rs.wasNull()) {
			dto.setCambiomodoarrau( null );
		}
		
		dto.setNumcambiomodoarrau( rs.getString( COLUMN_NUMCAMBIOMODOARRAU ) );
		dto.setArrvent( new Short( rs.getShort(COLUMN_ARRVENT) ) );
		if (rs.wasNull()) {
			dto.setArrvent( null );
		}
		
		dto.setEpiruido( new Short( rs.getShort(COLUMN_EPIRUIDO) ) );
		if (rs.wasNull()) {
			dto.setEpiruido( null );
		}
		
		dto.setNumarrv( rs.getString( COLUMN_NUMARRV ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SegObservacionesMp dto)
	{
	}

	/** 
	 * Returns all rows from the seg_observaciones_mp table that match the specified arbitrary SQL statement
	 */
	public SegObservacionesMp[] findByDynamicSelect(String sql, Object[] sqlParams) throws SegObservacionesMpDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegObservacionesMpDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the seg_observaciones_mp table that match the specified arbitrary SQL statement
	 */
	public SegObservacionesMp[] findByDynamicWhere(String sql, Object[] sqlParams) throws SegObservacionesMpDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegObservacionesMpDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
