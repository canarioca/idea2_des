/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;

public class ImpChoquesDaoImpl extends AbstractDAO implements ImpChoquesDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDCH, IDZONA, TIPO, NUMCH, ENERGIA FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDCH, IDZONA, TIPO, NUMCH, ENERGIA ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDCH = ?, IDZONA = ?, TIPO = ?, NUMCH = ?, ENERGIA = ? WHERE IDCH = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDCH = ?";

	/** 
	 * Index of column IDCH
	 */
	protected static final int COLUMN_IDCH = 1;

	/** 
	 * Index of column IDZONA
	 */
	protected static final int COLUMN_IDZONA = 2;

	/** 
	 * Index of column TIPO
	 */
	protected static final int COLUMN_TIPO = 3;

	/** 
	 * Index of column NUMCH
	 */
	protected static final int COLUMN_NUMCH = 4;

	/** 
	 * Index of column ENERGIA
	 */
	protected static final int COLUMN_ENERGIA = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Index of primary-key column IDCH
	 */
	protected static final int PK_COLUMN_IDCH = 1;

	/** 
	 * Inserts a new row in the imp_choques table.
	 */
	public ImpChoquesPk insert(ImpChoques dto) throws ImpChoquesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdch() != null) {
				stmt.setInt( index++, dto.getIdch().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdzona() != null) {
				stmt.setInt( index++, dto.getIdzona().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getTipo() );
			stmt.setString( index++, dto.getNumch() );
			stmt.setString( index++, dto.getEnergia() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdch( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpChoquesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the imp_choques table.
	 */
	public void update(ImpChoquesPk pk, ImpChoques dto) throws ImpChoquesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdch() != null) {
				stmt.setInt( index++, dto.getIdch().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdzona() != null) {
				stmt.setInt( index++, dto.getIdzona().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getTipo() );
			stmt.setString( index++, dto.getNumch() );
			stmt.setString( index++, dto.getEnergia() );
			if (pk.getIdch() != null) {
				stmt.setInt( 6, pk.getIdch().intValue() );
			} else {
				stmt.setNull(6, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpChoquesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the imp_choques table.
	 */
	public void delete(ImpChoquesPk pk) throws ImpChoquesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdch() != null) {
				stmt.setInt( 1, pk.getIdch().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpChoquesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the imp_choques table that matches the specified primary-key value.
	 */
	public ImpChoques findByPrimaryKey(ImpChoquesPk pk) throws ImpChoquesDaoException
	{
		return findByPrimaryKey( pk.getIdch() );
	}

	/** 
	 * Returns all rows from the imp_choques table that match the criteria 'IDCH = :idch'.
	 */
	public ImpChoques findByPrimaryKey(Integer idch) throws ImpChoquesDaoException
	{
		ImpChoques ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDCH = ?", new Object[] { idch } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the imp_choques table that match the criteria ''.
	 */
	public ImpChoques[] findAll() throws ImpChoquesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDCH", null );
	}

	/** 
	 * Returns all rows from the imp_choques table that match the criteria 'IDZONA = :idzona'.
	 */
	public ImpChoques[] findByImpZona(int idzona) throws ImpChoquesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDZONA = ?", new Object[] {  new Integer(idzona) } );
	}

	/** 
	 * Returns all rows from the imp_choques table that match the criteria 'IDCH = :idch'.
	 */
	public ImpChoques[] findWhereIdchEquals(int idch) throws ImpChoquesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDCH = ? ORDER BY IDCH", new Object[] {  new Integer(idch) } );
	}

	/** 
	 * Returns all rows from the imp_choques table that match the criteria 'IDZONA = :idzona'.
	 */
	public ImpChoques[] findWhereIdzonaEquals(int idzona) throws ImpChoquesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDZONA = ? ORDER BY IDZONA", new Object[] {  new Integer(idzona) } );
	}

	/** 
	 * Returns all rows from the imp_choques table that match the criteria 'TIPO = :tipo'.
	 */
	public ImpChoques[] findWhereTipoEquals(String tipo) throws ImpChoquesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO = ? ORDER BY TIPO", new Object[] { tipo } );
	}

	/** 
	 * Returns all rows from the imp_choques table that match the criteria 'NUMCH = :numch'.
	 */
	public ImpChoques[] findWhereNumchEquals(String numch) throws ImpChoquesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMCH = ? ORDER BY NUMCH", new Object[] { numch } );
	}

	/** 
	 * Returns all rows from the imp_choques table that match the criteria 'ENERGIA = :energia'.
	 */
	public ImpChoques[] findWhereEnergiaEquals(String energia) throws ImpChoquesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ENERGIA = ? ORDER BY ENERGIA", new Object[] { energia } );
	}

	/**
	 * Method 'ImpChoquesDaoImpl'
	 * 
	 */
	public ImpChoquesDaoImpl()
	{
	}
	/**
	 * Method 'ImpChoquesDaoImpl'
	 * 
	 */
	public ImpChoquesDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ImpChoquesDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ImpChoquesDaoImpl'
	 * 
	 * @param userConn
	 */
	public ImpChoquesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.imp_choques";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ImpChoques fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ImpChoques dto = new ImpChoques();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ImpChoques[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ImpChoques dto = new ImpChoques();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ImpChoques ret[] = new ImpChoques[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ImpChoques dto, ResultSet rs) throws SQLException
	{
		dto.setIdch( new Integer( rs.getInt(COLUMN_IDCH) ) );
		dto.setIdzona( new Integer( rs.getInt(COLUMN_IDZONA) ) );
		dto.setTipo( rs.getString( COLUMN_TIPO ) );
		dto.setNumch( rs.getString( COLUMN_NUMCH ) );
		dto.setEnergia( rs.getString( COLUMN_ENERGIA ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ImpChoques dto)
	{
	}

	/** 
	 * Returns all rows from the imp_choques table that match the specified arbitrary SQL statement
	 */
	public ImpChoques[] findByDynamicSelect(String sql, Object[] sqlParams) throws ImpChoquesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpChoquesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the imp_choques table that match the specified arbitrary SQL statement
	 */
	public ImpChoques[] findByDynamicWhere(String sql, Object[] sqlParams) throws ImpChoquesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpChoquesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
