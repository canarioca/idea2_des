/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;

public class SegObservacionesDaiDaoImpl extends AbstractDAO implements SegObservacionesDaiDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDOBSDAI, NUMEPISODIOS, NUMEPITSV, NUMEPITV, NUMEPIFV, NUMEPINOSOST, NUMEPINOESP, ATP, NUMTERATP, TODASEFECATP, CHOQ, NUMTERCHOQ, TODASEFECTCHOQ, ULTCHOQENERGIA, ULTCHOQTCARGA, ULTCHOQIMPEDANCIA, TODASAPROPIADAS, MOTIVOTODASAPROPIADAS, EPIRUIDO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDOBSDAI, NUMEPISODIOS, NUMEPITSV, NUMEPITV, NUMEPIFV, NUMEPINOSOST, NUMEPINOESP, ATP, NUMTERATP, TODASEFECATP, CHOQ, NUMTERCHOQ, TODASEFECTCHOQ, ULTCHOQENERGIA, ULTCHOQTCARGA, ULTCHOQIMPEDANCIA, TODASAPROPIADAS, MOTIVOTODASAPROPIADAS, EPIRUIDO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDOBSDAI = ?, NUMEPISODIOS = ?, NUMEPITSV = ?, NUMEPITV = ?, NUMEPIFV = ?, NUMEPINOSOST = ?, NUMEPINOESP = ?, ATP = ?, NUMTERATP = ?, TODASEFECATP = ?, CHOQ = ?, NUMTERCHOQ = ?, TODASEFECTCHOQ = ?, ULTCHOQENERGIA = ?, ULTCHOQTCARGA = ?, ULTCHOQIMPEDANCIA = ?, TODASAPROPIADAS = ?, MOTIVOTODASAPROPIADAS = ?, EPIRUIDO = ? WHERE IDOBSDAI = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDOBSDAI = ?";

	/** 
	 * Index of column IDOBSDAI
	 */
	protected static final int COLUMN_IDOBSDAI = 1;

	/** 
	 * Index of column NUMEPISODIOS
	 */
	protected static final int COLUMN_NUMEPISODIOS = 2;

	/** 
	 * Index of column NUMEPITSV
	 */
	protected static final int COLUMN_NUMEPITSV = 3;

	/** 
	 * Index of column NUMEPITV
	 */
	protected static final int COLUMN_NUMEPITV = 4;

	/** 
	 * Index of column NUMEPIFV
	 */
	protected static final int COLUMN_NUMEPIFV = 5;

	/** 
	 * Index of column NUMEPINOSOST
	 */
	protected static final int COLUMN_NUMEPINOSOST = 6;

	/** 
	 * Index of column NUMEPINOESP
	 */
	protected static final int COLUMN_NUMEPINOESP = 7;

	/** 
	 * Index of column ATP
	 */
	protected static final int COLUMN_ATP = 8;

	/** 
	 * Index of column NUMTERATP
	 */
	protected static final int COLUMN_NUMTERATP = 9;

	/** 
	 * Index of column TODASEFECATP
	 */
	protected static final int COLUMN_TODASEFECATP = 10;

	/** 
	 * Index of column CHOQ
	 */
	protected static final int COLUMN_CHOQ = 11;

	/** 
	 * Index of column NUMTERCHOQ
	 */
	protected static final int COLUMN_NUMTERCHOQ = 12;

	/** 
	 * Index of column TODASEFECTCHOQ
	 */
	protected static final int COLUMN_TODASEFECTCHOQ = 13;

	/** 
	 * Index of column ULTCHOQENERGIA
	 */
	protected static final int COLUMN_ULTCHOQENERGIA = 14;

	/** 
	 * Index of column ULTCHOQTCARGA
	 */
	protected static final int COLUMN_ULTCHOQTCARGA = 15;

	/** 
	 * Index of column ULTCHOQIMPEDANCIA
	 */
	protected static final int COLUMN_ULTCHOQIMPEDANCIA = 16;

	/** 
	 * Index of column TODASAPROPIADAS
	 */
	protected static final int COLUMN_TODASAPROPIADAS = 17;

	/** 
	 * Index of column MOTIVOTODASAPROPIADAS
	 */
	protected static final int COLUMN_MOTIVOTODASAPROPIADAS = 18;

	/** 
	 * Index of column EPIRUIDO
	 */
	protected static final int COLUMN_EPIRUIDO = 19;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 19;

	/** 
	 * Index of primary-key column IDOBSDAI
	 */
	protected static final int PK_COLUMN_IDOBSDAI = 1;

	/** 
	 * Inserts a new row in the seg_observaciones_dai table.
	 */
	public SegObservacionesDaiPk insert(SegObservacionesDai dto) throws SegObservacionesDaiDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdobsdai() != null) {
				stmt.setInt( index++, dto.getIdobsdai().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNumepisodios() );
			stmt.setString( index++, dto.getNumepitsv() );
			stmt.setString( index++, dto.getNumepitv() );
			stmt.setString( index++, dto.getNumepifv() );
			stmt.setString( index++, dto.getNumepinosost() );
			stmt.setString( index++, dto.getNumepinoesp() );
			if (dto.getAtp() != null) {
				stmt.setShort( index++, dto.getAtp().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getNumteratp() );
			if (dto.getTodasefecatp() != null) {
				stmt.setShort( index++, dto.getTodasefecatp().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getChoq() != null) {
				stmt.setShort( index++, dto.getChoq().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getNumterchoq() );
			if (dto.getTodasefectchoq() != null) {
				stmt.setShort( index++, dto.getTodasefectchoq().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getUltchoqenergia() );
			stmt.setString( index++, dto.getUltchoqtcarga() );
			stmt.setString( index++, dto.getUltchoqimpedancia() );
			if (dto.getTodasapropiadas() != null) {
				stmt.setInt( index++, dto.getTodasapropiadas().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMotivotodasapropiadas() != null) {
				stmt.setInt( index++, dto.getMotivotodasapropiadas().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEpiruido() != null) {
				stmt.setShort( index++, dto.getEpiruido().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdobsdai( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegObservacionesDaiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the seg_observaciones_dai table.
	 */
	public void update(SegObservacionesDaiPk pk, SegObservacionesDai dto) throws SegObservacionesDaiDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdobsdai() != null) {
				stmt.setInt( index++, dto.getIdobsdai().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNumepisodios() );
			stmt.setString( index++, dto.getNumepitsv() );
			stmt.setString( index++, dto.getNumepitv() );
			stmt.setString( index++, dto.getNumepifv() );
			stmt.setString( index++, dto.getNumepinosost() );
			stmt.setString( index++, dto.getNumepinoesp() );
			if (dto.getAtp() != null) {
				stmt.setShort( index++, dto.getAtp().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getNumteratp() );
			if (dto.getTodasefecatp() != null) {
				stmt.setShort( index++, dto.getTodasefecatp().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getChoq() != null) {
				stmt.setShort( index++, dto.getChoq().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getNumterchoq() );
			if (dto.getTodasefectchoq() != null) {
				stmt.setShort( index++, dto.getTodasefectchoq().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getUltchoqenergia() );
			stmt.setString( index++, dto.getUltchoqtcarga() );
			stmt.setString( index++, dto.getUltchoqimpedancia() );
			if (dto.getTodasapropiadas() != null) {
				stmt.setInt( index++, dto.getTodasapropiadas().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMotivotodasapropiadas() != null) {
				stmt.setInt( index++, dto.getMotivotodasapropiadas().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEpiruido() != null) {
				stmt.setShort( index++, dto.getEpiruido().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (pk.getIdobsdai() != null) {
				stmt.setInt( 20, pk.getIdobsdai().intValue() );
			} else {
				stmt.setNull(20, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegObservacionesDaiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the seg_observaciones_dai table.
	 */
	public void delete(SegObservacionesDaiPk pk) throws SegObservacionesDaiDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdobsdai() != null) {
				stmt.setInt( 1, pk.getIdobsdai().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegObservacionesDaiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the seg_observaciones_dai table that matches the specified primary-key value.
	 */
	public SegObservacionesDai findByPrimaryKey(SegObservacionesDaiPk pk) throws SegObservacionesDaiDaoException
	{
		return findByPrimaryKey( pk.getIdobsdai() );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'IDOBSDAI = :idobsdai'.
	 */
	public SegObservacionesDai findByPrimaryKey(Integer idobsdai) throws SegObservacionesDaiDaoException
	{
		SegObservacionesDai ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDOBSDAI = ?", new Object[] { idobsdai } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria ''.
	 */
	public SegObservacionesDai[] findAll() throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDOBSDAI", null );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'IDOBSDAI = :idobsdai'.
	 */
	public SegObservacionesDai[] findWhereIdobsdaiEquals(int idobsdai) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDOBSDAI = ? ORDER BY IDOBSDAI", new Object[] {  new Integer(idobsdai) } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'NUMEPISODIOS = :numepisodios'.
	 */
	public SegObservacionesDai[] findWhereNumepisodiosEquals(String numepisodios) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMEPISODIOS = ? ORDER BY NUMEPISODIOS", new Object[] { numepisodios } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'NUMEPITSV = :numepitsv'.
	 */
	public SegObservacionesDai[] findWhereNumepitsvEquals(String numepitsv) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMEPITSV = ? ORDER BY NUMEPITSV", new Object[] { numepitsv } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'NUMEPITV = :numepitv'.
	 */
	public SegObservacionesDai[] findWhereNumepitvEquals(String numepitv) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMEPITV = ? ORDER BY NUMEPITV", new Object[] { numepitv } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'NUMEPIFV = :numepifv'.
	 */
	public SegObservacionesDai[] findWhereNumepifvEquals(String numepifv) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMEPIFV = ? ORDER BY NUMEPIFV", new Object[] { numepifv } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'NUMEPINOSOST = :numepinosost'.
	 */
	public SegObservacionesDai[] findWhereNumepinosostEquals(String numepinosost) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMEPINOSOST = ? ORDER BY NUMEPINOSOST", new Object[] { numepinosost } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'NUMEPINOESP = :numepinoesp'.
	 */
	public SegObservacionesDai[] findWhereNumepinoespEquals(String numepinoesp) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMEPINOESP = ? ORDER BY NUMEPINOESP", new Object[] { numepinoesp } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'ATP = :atp'.
	 */
	public SegObservacionesDai[] findWhereAtpEquals(short atp) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ATP = ? ORDER BY ATP", new Object[] {  new Short(atp) } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'NUMTERATP = :numteratp'.
	 */
	public SegObservacionesDai[] findWhereNumteratpEquals(String numteratp) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMTERATP = ? ORDER BY NUMTERATP", new Object[] { numteratp } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'TODASEFECATP = :todasefecatp'.
	 */
	public SegObservacionesDai[] findWhereTodasefecatpEquals(short todasefecatp) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TODASEFECATP = ? ORDER BY TODASEFECATP", new Object[] {  new Short(todasefecatp) } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'CHOQ = :choq'.
	 */
	public SegObservacionesDai[] findWhereChoqEquals(short choq) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CHOQ = ? ORDER BY CHOQ", new Object[] {  new Short(choq) } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'NUMTERCHOQ = :numterchoq'.
	 */
	public SegObservacionesDai[] findWhereNumterchoqEquals(String numterchoq) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMTERCHOQ = ? ORDER BY NUMTERCHOQ", new Object[] { numterchoq } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'TODASEFECTCHOQ = :todasefectchoq'.
	 */
	public SegObservacionesDai[] findWhereTodasefectchoqEquals(short todasefectchoq) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TODASEFECTCHOQ = ? ORDER BY TODASEFECTCHOQ", new Object[] {  new Short(todasefectchoq) } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'ULTCHOQENERGIA = :ultchoqenergia'.
	 */
	public SegObservacionesDai[] findWhereUltchoqenergiaEquals(String ultchoqenergia) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ULTCHOQENERGIA = ? ORDER BY ULTCHOQENERGIA", new Object[] { ultchoqenergia } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'ULTCHOQTCARGA = :ultchoqtcarga'.
	 */
	public SegObservacionesDai[] findWhereUltchoqtcargaEquals(String ultchoqtcarga) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ULTCHOQTCARGA = ? ORDER BY ULTCHOQTCARGA", new Object[] { ultchoqtcarga } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'ULTCHOQIMPEDANCIA = :ultchoqimpedancia'.
	 */
	public SegObservacionesDai[] findWhereUltchoqimpedanciaEquals(String ultchoqimpedancia) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ULTCHOQIMPEDANCIA = ? ORDER BY ULTCHOQIMPEDANCIA", new Object[] { ultchoqimpedancia } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'TODASAPROPIADAS = :todasapropiadas'.
	 */
	public SegObservacionesDai[] findWhereTodasapropiadasEquals(int todasapropiadas) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TODASAPROPIADAS = ? ORDER BY TODASAPROPIADAS", new Object[] {  new Integer(todasapropiadas) } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'MOTIVOTODASAPROPIADAS = :motivotodasapropiadas'.
	 */
	public SegObservacionesDai[] findWhereMotivotodasapropiadasEquals(int motivotodasapropiadas) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOTIVOTODASAPROPIADAS = ? ORDER BY MOTIVOTODASAPROPIADAS", new Object[] {  new Integer(motivotodasapropiadas) } );
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'EPIRUIDO = :epiruido'.
	 */
	public SegObservacionesDai[] findWhereEpiruidoEquals(short epiruido) throws SegObservacionesDaiDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EPIRUIDO = ? ORDER BY EPIRUIDO", new Object[] {  new Short(epiruido) } );
	}

	/**
	 * Method 'SegObservacionesDaiDaoImpl'
	 * 
	 */
	public SegObservacionesDaiDaoImpl()
	{
	}
	/**
	 * Method 'SegObservacionesDaiDaoImpl'
	 * 
	 */
	public SegObservacionesDaiDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public SegObservacionesDaiDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'SegObservacionesDaiDaoImpl'
	 * 
	 * @param userConn
	 */
	public SegObservacionesDaiDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.seg_observaciones_dai";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SegObservacionesDai fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SegObservacionesDai dto = new SegObservacionesDai();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SegObservacionesDai[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SegObservacionesDai dto = new SegObservacionesDai();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SegObservacionesDai ret[] = new SegObservacionesDai[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SegObservacionesDai dto, ResultSet rs) throws SQLException
	{
		dto.setIdobsdai( new Integer( rs.getInt(COLUMN_IDOBSDAI) ) );
		dto.setNumepisodios( rs.getString( COLUMN_NUMEPISODIOS ) );
		dto.setNumepitsv( rs.getString( COLUMN_NUMEPITSV ) );
		dto.setNumepitv( rs.getString( COLUMN_NUMEPITV ) );
		dto.setNumepifv( rs.getString( COLUMN_NUMEPIFV ) );
		dto.setNumepinosost( rs.getString( COLUMN_NUMEPINOSOST ) );
		dto.setNumepinoesp( rs.getString( COLUMN_NUMEPINOESP ) );
		dto.setAtp( new Short( rs.getShort(COLUMN_ATP) ) );
		if (rs.wasNull()) {
			dto.setAtp( null );
		}
		
		dto.setNumteratp( rs.getString( COLUMN_NUMTERATP ) );
		dto.setTodasefecatp( new Short( rs.getShort(COLUMN_TODASEFECATP) ) );
		if (rs.wasNull()) {
			dto.setTodasefecatp( null );
		}
		
		dto.setChoq( new Short( rs.getShort(COLUMN_CHOQ) ) );
		if (rs.wasNull()) {
			dto.setChoq( null );
		}
		
		dto.setNumterchoq( rs.getString( COLUMN_NUMTERCHOQ ) );
		dto.setTodasefectchoq( new Short( rs.getShort(COLUMN_TODASEFECTCHOQ) ) );
		if (rs.wasNull()) {
			dto.setTodasefectchoq( null );
		}
		
		dto.setUltchoqenergia( rs.getString( COLUMN_ULTCHOQENERGIA ) );
		dto.setUltchoqtcarga( rs.getString( COLUMN_ULTCHOQTCARGA ) );
		dto.setUltchoqimpedancia( rs.getString( COLUMN_ULTCHOQIMPEDANCIA ) );
		dto.setTodasapropiadas( new Integer( rs.getInt(COLUMN_TODASAPROPIADAS) ) );
		if (rs.wasNull()) {
			dto.setTodasapropiadas( null );
		}
		
		dto.setMotivotodasapropiadas( new Integer( rs.getInt(COLUMN_MOTIVOTODASAPROPIADAS) ) );
		if (rs.wasNull()) {
			dto.setMotivotodasapropiadas( null );
		}
		
		dto.setEpiruido( new Short( rs.getShort(COLUMN_EPIRUIDO) ) );
		if (rs.wasNull()) {
			dto.setEpiruido( null );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SegObservacionesDai dto)
	{
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the specified arbitrary SQL statement
	 */
	public SegObservacionesDai[] findByDynamicSelect(String sql, Object[] sqlParams) throws SegObservacionesDaiDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegObservacionesDaiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the specified arbitrary SQL statement
	 */
	public SegObservacionesDai[] findByDynamicWhere(String sql, Object[] sqlParams) throws SegObservacionesDaiDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegObservacionesDaiDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
