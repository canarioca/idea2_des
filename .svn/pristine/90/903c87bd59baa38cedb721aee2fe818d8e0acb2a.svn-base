/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;


import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;

public class ArrAnualLabDaoImpl extends AbstractDAO implements ArrAnualLabDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ANIO, PLANTILLA, PLANTILLATC, BECARIOS, MIR, ATS, ATR, SALAC, SALAD, IDEXCLUSIVA, EXCLUSIVAS, DIAS, IDMP, IDDAI, IDCVEXTERNA, IDCVINTERNA, PROCEDIMIENTOS, IDPOLIGRAFO, POLIGRAFO, IDPORTATIL, ANE, NRXFIJO, NRXPORTATIL, IDCRT, IDHOLTER, IDDENREN, IDCIEORE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ANIO, PLANTILLA, PLANTILLATC, BECARIOS, MIR, ATS, ATR, SALAC, SALAD, IDEXCLUSIVA, EXCLUSIVAS, DIAS, IDMP, IDDAI, IDCVEXTERNA, IDCVINTERNA, PROCEDIMIENTOS, IDPOLIGRAFO, POLIGRAFO, IDPORTATIL, ANE, NRXFIJO, NRXPORTATIL, IDCRT, IDHOLTER, IDDENREN, IDCIEORE  ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ANIO = ?, PLANTILLA = ?, PLANTILLATC = ?, BECARIOS = ?, MIR = ?, ATS = ?, ATR = ?, SALAC = ?, SALAD = ?, IDEXCLUSIVA = ?, EXCLUSIVAS = ?, DIAS = ?, IDMP = ?, IDDAI = ?, IDCVEXTERNA = ?, IDCVINTERNA = ?, PROCEDIMIENTOS = ?, IDPOLIGRAFO = ?, POLIGRAFO = ?, IDPORTATIL = ?, ANE = ?, NRXFIJO = ?, NRXPORTATIL = ?, IDCRT = ?, IDHOLTER = ?, IDDENREN = ?, IDCIEORE = ? WHERE ANIO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ANIO = ?";

	/** 
	 * Index of column ANIO
	 */
	protected static final int COLUMN_ANIO = 1;

	/** 
	 * Index of column PLANTILLA
	 */
	protected static final int COLUMN_PLANTILLA = 2;

	/** 
	 * Index of column PLANTILLATC
	 */
	protected static final int COLUMN_PLANTILLATC = 3;

	/** 
	 * Index of column BECARIOS
	 */
	protected static final int COLUMN_BECARIOS = 4;

	/** 
	 * Index of column MIR
	 */
	protected static final int COLUMN_MIR = 5;

	/** 
	 * Index of column ATS
	 */
	protected static final int COLUMN_ATS = 6;

	/** 
	 * Index of column ATR
	 */
	protected static final int COLUMN_ATR = 7;

	/** 
	 * Index of column SALAC
	 */
	protected static final int COLUMN_SALAC = 8;

	/** 
	 * Index of column SALAD
	 */
	protected static final int COLUMN_SALAD = 9;

	/** 
	 * Index of column IDEXCLUSIVA
	 */
	protected static final int COLUMN_IDEXCLUSIVA = 10;

	/** 
	 * Index of column EXCLUSIVAS
	 */
	protected static final int COLUMN_EXCLUSIVAS = 11;

	/** 
	 * Index of column DIAS
	 */
	protected static final int COLUMN_DIAS = 12;

	/** 
	 * Index of column IDMP
	 */
	protected static final int COLUMN_IDMP = 13;

	/** 
	 * Index of column IDDAI
	 */
	protected static final int COLUMN_IDDAI = 14;

	/** 
	 * Index of column IDCVEXTERNA
	 */
	protected static final int COLUMN_IDCVEXTERNA = 15;

	/** 
	 * Index of column IDCVINTERNA
	 */
	protected static final int COLUMN_IDCVINTERNA = 16;

	/** 
	 * Index of column PROCEDIMIENTOS
	 */
	protected static final int COLUMN_PROCEDIMIENTOS = 17;

	/** 
	 * Index of column IDPOLIGRAFO
	 */
	protected static final int COLUMN_IDPOLIGRAFO = 18;

	/** 
	 * Index of column POLIGRAFO
	 */
	protected static final int COLUMN_POLIGRAFO = 19;
	
	protected static final int COLUMN_PORTATIL = 20;

	/** 
	 * Index of column ANE
	 */
	protected static final int COLUMN_ANE = 21;

	/** 
	 * Index of column NRXFIJO
	 */
	protected static final int COLUMN_NRXFIJO = 22;

	/** 
	 * Index of column NRXPORTATIL
	 */
	protected static final int COLUMN_NRXPORTATIL = 23;

	/** 
	 * Index of column IDCRT
	 */
	protected static final int COLUMN_IDCRT = 24;

	/** 
	 * Index of column IDHOLTER
	 */
	protected static final int COLUMN_IDHOLTER = 25;

	/** 
	 * Index of column IDDENREN
	 */
	protected static final int COLUMN_IDDENREN = 26;

	/** 
	 * Index of column IDCIEORE
	 */
	protected static final int COLUMN_IDCIEORE = 27;
	
	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 27;

	/** 
	 * Index of primary-key column ANIO
	 */
	protected static final int PK_COLUMN_ANIO = 1;

	/** 
	 * Inserts a new row in the ARR_ANUAL_LAB table.
	 */
	public ArrAnualLabPk insert(ArrAnualLab dto) throws ArrAnualLabDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.getAnio() != null) {
				stmt.setInt( index++, dto.getAnio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPlantilla() );
			stmt.setString( index++, dto.getPlantillatc() );
			stmt.setString( index++, dto.getBecarios() );
			stmt.setString( index++, dto.getMir() );
			stmt.setString( index++, dto.getAts() );
			stmt.setString( index++, dto.getAtr() );
			stmt.setString( index++, dto.getSalac() );
			stmt.setString( index++, dto.getSalad() );
			if (dto.getIdexclusiva() != null) {
				stmt.setInt( index++, dto.getIdexclusiva().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getExclusivas() );
			stmt.setString( index++, dto.getDias() );
			if (dto.getIdmp() != null) {
				stmt.setInt( index++, dto.getIdmp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIddai() != null) {
				stmt.setInt( index++, dto.getIddai().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdcvexterna() != null) {
				stmt.setInt( index++, dto.getIdcvexterna().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdcvinterna() != null) {
				stmt.setInt( index++, dto.getIdcvinterna().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getProcedimientos() );
			if (dto.getIdpoligrafo() != null) {
				stmt.setInt( index++, dto.getIdpoligrafo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPoligrafo() );
			
			if (dto.getIdportatil() != null) {
				stmt.setInt( index++, dto.getIdportatil().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			
			if (dto.getAne() != null) {
				stmt.setInt( index++, dto.getAne().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNrxfijo() );
			stmt.setString( index++, dto.getNrxportatil() );
			if (dto.getIdcrt() != null) {
				stmt.setInt( index++, dto.getIdcrt().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdholter() != null) {
				stmt.setInt( index++, dto.getIdholter().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIddenren() != null) {
				stmt.setInt( index++, dto.getIddenren().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdcieore() != null) {
				stmt.setInt( index++, dto.getIdcieore().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			throw new ArrAnualLabDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the ARR_ANUAL_LAB table.
	 */
	public void update(ArrAnualLabPk pk, ArrAnualLab dto) throws ArrAnualLabDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getAnio() != null) {
				stmt.setInt( index++, dto.getAnio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPlantilla() );
			stmt.setString( index++, dto.getPlantillatc() );
			stmt.setString( index++, dto.getBecarios() );
			stmt.setString( index++, dto.getMir() );
			stmt.setString( index++, dto.getAts() );
			stmt.setString( index++, dto.getAtr() );
			stmt.setString( index++, dto.getSalac() );
			stmt.setString( index++, dto.getSalad() );
			if (dto.getIdexclusiva() != null) {
				stmt.setInt( index++, dto.getIdexclusiva().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getExclusivas() );
			stmt.setString( index++, dto.getDias() );
			if (dto.getIdmp() != null) {
				stmt.setInt( index++, dto.getIdmp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIddai() != null) {
				stmt.setInt( index++, dto.getIddai().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdcvexterna() != null) {
				stmt.setInt( index++, dto.getIdcvexterna().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdcvinterna() != null) {
				stmt.setInt( index++, dto.getIdcvinterna().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getProcedimientos() );
			if (dto.getIdpoligrafo() != null) {
				stmt.setInt( index++, dto.getIdpoligrafo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPoligrafo() );
			if (dto.getIdportatil() != null) {
				stmt.setInt( index++, dto.getIdportatil().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			if (dto.getAne() != null) {
				stmt.setInt( index++, dto.getAne().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNrxfijo() );
			stmt.setString( index++, dto.getNrxportatil() );
			if (dto.getIdcrt() != null) {
				stmt.setInt( index++, dto.getIdcrt().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdholter() != null) {
				stmt.setInt( index++, dto.getIdholter().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIddenren() != null) {
				stmt.setInt( index++, dto.getIddenren().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdcieore() != null) {
				stmt.setInt( index++, dto.getIdcieore().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			
			if (pk.getAnio() != null) {
				stmt.setInt( 28, pk.getAnio().intValue() );
			} else {
				stmt.setNull(28, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrAnualLabDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the ARR_ANUAL_LAB table.
	 */
	public void delete(ArrAnualLabPk pk) throws ArrAnualLabDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getAnio() != null) {
				stmt.setInt( 1, pk.getAnio().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrAnualLabDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the ARR_ANUAL_LAB table that matches the specified primary-key value.
	 */
	public ArrAnualLab findByPrimaryKey(ArrAnualLabPk pk) throws ArrAnualLabDaoException
	{
		return findByPrimaryKey( pk.getAnio() );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'ANIO = :anio'.
	 */
	public ArrAnualLab findByPrimaryKey(Integer anio) throws ArrAnualLabDaoException
	{
		ArrAnualLab ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ANIO = ?", new Object[] { anio } );
		return ret.length==0 ? null : ret[0];
	}
	public ArrAnualLab findByMaxAnio() throws ArrAnualLabDaoException{
		ArrAnualLab ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ANIO = (select max(anio) from "+getTableName()+")", null );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria ''.
	 */
	public ArrAnualLab[] findAll() throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ANIO", null );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'ANIO = :anio'.
	 */
	public ArrAnualLab[] findWhereAnioEquals(long anio) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANIO = ? ORDER BY ANIO", new Object[] {  new Long(anio) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'PLANTILLA = :plantilla'.
	 */
	public ArrAnualLab[] findWherePlantillaEquals(String plantilla) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PLANTILLA = ? ORDER BY PLANTILLA", new Object[] { plantilla } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'PLANTILLATC = :plantillatc'.
	 */
	public ArrAnualLab[] findWherePlantillatcEquals(String plantillatc) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PLANTILLATC = ? ORDER BY PLANTILLATC", new Object[] { plantillatc } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'BECARIOS = :becarios'.
	 */
	public ArrAnualLab[] findWhereBecariosEquals(String becarios) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BECARIOS = ? ORDER BY BECARIOS", new Object[] { becarios } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'MIR = :mir'.
	 */
	public ArrAnualLab[] findWhereMirEquals(String mir) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MIR = ? ORDER BY MIR", new Object[] { mir } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'ATS = :ats'.
	 */
	public ArrAnualLab[] findWhereAtsEquals(String ats) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ATS = ? ORDER BY ATS", new Object[] { ats } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'ATR = :atr'.
	 */
	public ArrAnualLab[] findWhereAtrEquals(String atr) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ATR = ? ORDER BY ATR", new Object[] { atr } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'SALAC = :salac'.
	 */
	public ArrAnualLab[] findWhereSalacEquals(String salac) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SALAC = ? ORDER BY SALAC", new Object[] { salac } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'SALAD = :salad'.
	 */
	public ArrAnualLab[] findWhereSaladEquals(String salad) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SALAD = ? ORDER BY SALAD", new Object[] { salad } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'IDEXCLUSIVA = :idexclusiva'.
	 */
	public ArrAnualLab[] findWhereIdexclusivaEquals(long idexclusiva) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDEXCLUSIVA = ? ORDER BY IDEXCLUSIVA", new Object[] {  new Long(idexclusiva) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'EXCLUSIVAS = :exclusivas'.
	 */
	public ArrAnualLab[] findWhereExclusivasEquals(String exclusivas) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EXCLUSIVAS = ? ORDER BY EXCLUSIVAS", new Object[] { exclusivas } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'DIAS = :dias'.
	 */
	public ArrAnualLab[] findWhereDiasEquals(String dias) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DIAS = ? ORDER BY DIAS", new Object[] { dias } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'IDMP = :idmp'.
	 */
	public ArrAnualLab[] findWhereIdmpEquals(long idmp) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDMP = ? ORDER BY IDMP", new Object[] {  new Long(idmp) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'IDDAI = :iddai'.
	 */
	public ArrAnualLab[] findWhereIddaiEquals(long iddai) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDDAI = ? ORDER BY IDDAI", new Object[] {  new Long(iddai) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'IDCVEXTERNA = :idcvexterna'.
	 */
	public ArrAnualLab[] findWhereIdcvexternaEquals(long idcvexterna) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDCVEXTERNA = ? ORDER BY IDCVEXTERNA", new Object[] {  new Long(idcvexterna) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'IDCVINTERNA = :idcvinterna'.
	 */
	public ArrAnualLab[] findWhereIdcvinternaEquals(long idcvinterna) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDCVINTERNA = ? ORDER BY IDCVINTERNA", new Object[] {  new Long(idcvinterna) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'PROCEDIMIENTOS = :procedimientos'.
	 */
	public ArrAnualLab[] findWhereProcedimientosEquals(String procedimientos) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROCEDIMIENTOS = ? ORDER BY PROCEDIMIENTOS", new Object[] { procedimientos } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'IDPOLIGRAFO = :idpoligrafo'.
	 */
	public ArrAnualLab[] findWhereIdpoligrafoEquals(long idpoligrafo) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPOLIGRAFO = ? ORDER BY IDPOLIGRAFO", new Object[] {  new Long(idpoligrafo) } );
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'POLIGRAFO = :poligrafo'.
	 */
	public ArrAnualLab[] findWherePoligrafoEquals(String poligrafo) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE POLIGRAFO = ? ORDER BY POLIGRAFO", new Object[] { poligrafo } );
	}

	/** 
	 * Returns all rows from the arr_anual_lab table that match the criteria 'ANE = :ane'.
	 */
	public ArrAnualLab[] findWhereAneEquals(int ane) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANE = ? ORDER BY ANE", new Object[] {  new Integer(ane) } );
	}

	/** 
	 * Returns all rows from the arr_anual_lab table that match the criteria 'NRXFIJO = :nrxfijo'.
	 */
	public ArrAnualLab[] findWhereNrxfijoEquals(String nrxfijo) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NRXFIJO = ? ORDER BY NRXFIJO", new Object[] { nrxfijo } );
	}

	/** 
	 * Returns all rows from the arr_anual_lab table that match the criteria 'NRXPORTATIL = :nrxportatil'.
	 */
	public ArrAnualLab[] findWhereNrxportatilEquals(String nrxportatil) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NRXPORTATIL = ? ORDER BY NRXPORTATIL", new Object[] { nrxportatil } );
	}

	/** 
	 * Returns all rows from the arr_anual_lab table that match the criteria 'IDCRT = :idcrt'.
	 */
	public ArrAnualLab[] findWhereIdcrtEquals(int idcrt) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDCRT = ? ORDER BY IDCRT", new Object[] {  new Integer(idcrt) } );
	}

	/** 
	 * Returns all rows from the arr_anual_lab table that match the criteria 'IDHOLTER = :idholter'.
	 */
	public ArrAnualLab[] findWhereIdholterEquals(int idholter) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDHOLTER = ? ORDER BY IDHOLTER", new Object[] {  new Integer(idholter) } );
	}

	/** 
	 * Returns all rows from the arr_anual_lab table that match the criteria 'IDDENREN = :iddenren'.
	 */
	public ArrAnualLab[] findWhereIddenrenEquals(int iddenren) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDDENREN = ? ORDER BY IDDENREN", new Object[] {  new Integer(iddenren) } );
	}

	/** 
	 * Returns all rows from the arr_anual_lab table that match the criteria 'IDCIEORE = :idcieore'.
	 */
	public ArrAnualLab[] findWhereIdcieoreEquals(int idcieore) throws ArrAnualLabDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDCIEORE = ? ORDER BY IDCIEORE", new Object[] {  new Integer(idcieore) } );
	}
	
	/**
	 * Method 'ArrAnualLabDaoImpl'
	 * 
	 */
	public ArrAnualLabDaoImpl()
	{
	}

	/**
	 * Method 'ArrAnualLabDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrAnualLabDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		//return "idea.ARR_ANUAL_LAB";
		return "idea.arr_anual_lab";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrAnualLab fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrAnualLab dto = new ArrAnualLab();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrAnualLab[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrAnualLab dto = new ArrAnualLab();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrAnualLab ret[] = new ArrAnualLab[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrAnualLab dto, ResultSet rs) throws SQLException
	{
		dto.setAnio( new Integer( rs.getInt(COLUMN_ANIO) ) );
		dto.setPlantilla( rs.getString( COLUMN_PLANTILLA ) );
		dto.setPlantillatc( rs.getString( COLUMN_PLANTILLATC ) );
		dto.setBecarios( rs.getString( COLUMN_BECARIOS ) );
		dto.setMir( rs.getString( COLUMN_MIR ) );
		dto.setAts( rs.getString( COLUMN_ATS ) );
		dto.setAtr( rs.getString( COLUMN_ATR ) );
		dto.setSalac( rs.getString( COLUMN_SALAC ) );
		dto.setSalad( rs.getString( COLUMN_SALAD ) );
		dto.setIdexclusiva( new Integer( rs.getInt(COLUMN_IDEXCLUSIVA) ) );
		if (rs.wasNull()) {
			dto.setIdexclusiva( null );
		}
		
		dto.setExclusivas( rs.getString( COLUMN_EXCLUSIVAS ) );
		dto.setDias( rs.getString( COLUMN_DIAS ) );
		dto.setIdmp( new Integer( rs.getInt(COLUMN_IDMP) ) );
		if (rs.wasNull()) {
			dto.setIdmp( null );
		}
		
		dto.setIddai( new Integer( rs.getInt(COLUMN_IDDAI) ) );
		if (rs.wasNull()) {
			dto.setIddai( null );
		}
		
		dto.setIdcvexterna( new Integer( rs.getInt(COLUMN_IDCVEXTERNA) ) );
		if (rs.wasNull()) {
			dto.setIdcvexterna( null );
		}
		
		dto.setIdcvinterna( new Integer( rs.getInt(COLUMN_IDCVINTERNA) ) );
		if (rs.wasNull()) {
			dto.setIdcvinterna( null );
		}
		
		dto.setProcedimientos( rs.getString( COLUMN_PROCEDIMIENTOS ) );
		dto.setIdpoligrafo( new Integer( rs.getInt(COLUMN_IDPOLIGRAFO) ) );
		if (rs.wasNull()) {
			dto.setIdpoligrafo( null );
		}
		
		dto.setPoligrafo( rs.getString( COLUMN_POLIGRAFO ) );
		dto.setIdportatil( new Integer( rs.getInt(COLUMN_PORTATIL) ) );
		if (rs.wasNull()) {
			dto.setIdportatil( null );
		}
		
		dto.setAne( new Integer( rs.getInt(COLUMN_ANE) ) );
		if (rs.wasNull()) {
			dto.setAne( null );
		}
		
		dto.setNrxfijo( rs.getString( COLUMN_NRXFIJO ) );
		dto.setNrxportatil( rs.getString( COLUMN_NRXPORTATIL ) );
		dto.setIdcrt( new Integer( rs.getInt(COLUMN_IDCRT) ) );
		if (rs.wasNull()) {
			dto.setIdcrt( null );
		}
		
		dto.setIdholter( new Integer( rs.getInt(COLUMN_IDHOLTER) ) );
		if (rs.wasNull()) {
			dto.setIdholter( null );
		}
		
		dto.setIddenren( new Integer( rs.getInt(COLUMN_IDDENREN) ) );
		if (rs.wasNull()) {
			dto.setIddenren( null );
		}
		
		dto.setIdcieore( new Integer( rs.getInt(COLUMN_IDCIEORE) ) );
		if (rs.wasNull()) {
			dto.setIdcieore( null );
		}
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrAnualLab dto)
	{
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the specified arbitrary SQL statement
	 */
	public ArrAnualLab[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrAnualLabDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrAnualLabDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the specified arbitrary SQL statement
	 */
	public ArrAnualLab[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrAnualLabDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrAnualLabDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
