/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;

public class ImpGeneradorDaoImpl extends AbstractDAO implements ImpGeneradorDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDIMPGENERADOR, IDHOJAIMP, IDGENERADOR, IDSEG, NUMSERIE, LOCALIZACION, MOTIVORECAMBIO, MOTIVORECOLOCACION, MOTIVOEXPLANTE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDIMPGENERADOR, IDHOJAIMP, IDGENERADOR, IDSEG, NUMSERIE, LOCALIZACION, MOTIVORECAMBIO, MOTIVORECOLOCACION, MOTIVOEXPLANTE ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDIMPGENERADOR = ?, IDHOJAIMP = ?, IDGENERADOR = ?, IDSEG = ?, NUMSERIE = ?, LOCALIZACION = ?, MOTIVORECAMBIO = ?, MOTIVORECOLOCACION = ?, MOTIVOEXPLANTE = ? WHERE IDIMPGENERADOR = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDIMPGENERADOR = ?";

	/** 
	 * Index of column IDIMPGENERADOR
	 */
	protected static final int COLUMN_IDIMPGENERADOR = 1;

	/** 
	 * Index of column IDHOJAIMP
	 */
	protected static final int COLUMN_IDHOJAIMP = 2;

	/** 
	 * Index of column IDGENERADOR
	 */
	protected static final int COLUMN_IDGENERADOR = 3;

	/** 
	 * Index of column IDSEG
	 */
	protected static final int COLUMN_IDSEG = 4;

	/** 
	 * Index of column NUMSERIE
	 */
	protected static final int COLUMN_NUMSERIE = 5;

	/** 
	 * Index of column LOCALIZACION
	 */
	protected static final int COLUMN_LOCALIZACION = 6;

	/** 
	 * Index of column MOTIVORECAMBIO
	 */
	protected static final int COLUMN_MOTIVORECAMBIO = 7;

	/** 
	 * Index of column MOTIVORECOLOCACION
	 */
	protected static final int COLUMN_MOTIVORECOLOCACION = 8;

	/** 
	 * Index of column MOTIVOEXPLANTE
	 */
	protected static final int COLUMN_MOTIVOEXPLANTE = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column IDIMPGENERADOR
	 */
	protected static final int PK_COLUMN_IDIMPGENERADOR = 1;

	/** 
	 * Inserts a new row in the imp_generador table.
	 */
	public ImpGeneradorPk insert(ImpGenerador dto) throws ImpGeneradorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdimpgenerador() != null) {
				stmt.setInt( index++, dto.getIdimpgenerador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdhojaimp() != null) {
				stmt.setInt( index++, dto.getIdhojaimp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdgenerador() != null) {
				stmt.setInt( index++, dto.getIdgenerador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdseg() != null) {
				stmt.setInt( index++, dto.getIdseg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNumserie() );
			if (dto.getLocalizacion() != null) {
				stmt.setInt( index++, dto.getLocalizacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMotivorecambio() != null) {
				stmt.setInt( index++, dto.getMotivorecambio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMotivorecolocacion() != null) {
				stmt.setInt( index++, dto.getMotivorecolocacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMotivoexplante() != null) {
				stmt.setInt( index++, dto.getMotivoexplante().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdimpgenerador( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpGeneradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the imp_generador table.
	 */
	public void update(ImpGeneradorPk pk, ImpGenerador dto) throws ImpGeneradorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdimpgenerador() != null) {
				stmt.setInt( index++, dto.getIdimpgenerador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdhojaimp() != null) {
				stmt.setInt( index++, dto.getIdhojaimp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdgenerador() != null) {
				stmt.setInt( index++, dto.getIdgenerador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdseg() != null) {
				stmt.setInt( index++, dto.getIdseg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNumserie() );
			if (dto.getLocalizacion() != null) {
				stmt.setInt( index++, dto.getLocalizacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMotivorecambio() != null) {
				stmt.setInt( index++, dto.getMotivorecambio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMotivorecolocacion() != null) {
				stmt.setInt( index++, dto.getMotivorecolocacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMotivoexplante() != null) {
				stmt.setInt( index++, dto.getMotivoexplante().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (pk.getIdimpgenerador() != null) {
				stmt.setInt( 10, pk.getIdimpgenerador().intValue() );
			} else {
				stmt.setNull(10, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpGeneradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the imp_generador table.
	 */
	public void delete(ImpGeneradorPk pk) throws ImpGeneradorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdimpgenerador() != null) {
				stmt.setInt( 1, pk.getIdimpgenerador().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpGeneradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the imp_generador table that matches the specified primary-key value.
	 */
	public ImpGenerador findByPrimaryKey(ImpGeneradorPk pk) throws ImpGeneradorDaoException
	{
		return findByPrimaryKey( pk.getIdimpgenerador() );
	}

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'IDIMPGENERADOR = :idimpgenerador'.
	 */
	public ImpGenerador findByPrimaryKey(Integer idimpgenerador) throws ImpGeneradorDaoException
	{
		ImpGenerador ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDIMPGENERADOR = ?", new Object[] { idimpgenerador } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the imp_generador table that match the criteria ''.
	 */
	public ImpGenerador[] findAll() throws ImpGeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDIMPGENERADOR", null );
	}

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'IDIMPGENERADOR = :idimpgenerador'.
	 */
	public ImpGenerador[] findWhereIdimpgeneradorEquals(int idimpgenerador) throws ImpGeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDIMPGENERADOR = ? ORDER BY IDIMPGENERADOR", new Object[] {  new Integer(idimpgenerador) } );
	}

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'IDHOJAIMP = :idhojaimp'.
	 */
	public ImpGenerador[] findWhereIdhojaimpEquals(int idhojaimp) throws ImpGeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDHOJAIMP = ? ORDER BY IDHOJAIMP", new Object[] {  new Integer(idhojaimp) } );
	}

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'IDGENERADOR = :idgenerador'.
	 */
	public ImpGenerador[] findWhereIdgeneradorEquals(int idgenerador) throws ImpGeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDGENERADOR = ? ORDER BY IDGENERADOR", new Object[] {  new Integer(idgenerador) } );
	}

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'IDSEG = :idseg'.
	 */
	public ImpGenerador[] findWhereIdsegEquals(int idseg) throws ImpGeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDSEG = ? ORDER BY IDSEG", new Object[] {  new Integer(idseg) } );
	}

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'NUMSERIE = :numserie'.
	 */
	public ImpGenerador[] findWhereNumserieEquals(String numserie) throws ImpGeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMSERIE = ? ORDER BY NUMSERIE", new Object[] { numserie } );
	}

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'LOCALIZACION = :localizacion'.
	 */
	public ImpGenerador[] findWhereLocalizacionEquals(int localizacion) throws ImpGeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOCALIZACION = ? ORDER BY LOCALIZACION", new Object[] {  new Integer(localizacion) } );
	}

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'MOTIVORECAMBIO = :motivorecambio'.
	 */
	public ImpGenerador[] findWhereMotivorecambioEquals(int motivorecambio) throws ImpGeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOTIVORECAMBIO = ? ORDER BY MOTIVORECAMBIO", new Object[] {  new Integer(motivorecambio) } );
	}

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'MOTIVORECOLOCACION = :motivorecolocacion'.
	 */
	public ImpGenerador[] findWhereMotivorecolocacionEquals(int motivorecolocacion) throws ImpGeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOTIVORECOLOCACION = ? ORDER BY MOTIVORECOLOCACION", new Object[] {  new Integer(motivorecolocacion) } );
	}

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'MOTIVOEXPLANTE = :motivoexplante'.
	 */
	public ImpGenerador[] findWhereMotivoexplanteEquals(int motivoexplante) throws ImpGeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOTIVOEXPLANTE = ? ORDER BY MOTIVOEXPLANTE", new Object[] {  new Integer(motivoexplante) } );
	}

	/**
	 * Method 'ImpGeneradorDaoImpl'
	 * 
	 */
	public ImpGeneradorDaoImpl()
	{
	}
	/**
	 * Method 'ImpGeneradorDaoImpl'
	 * 
	 */
	public ImpGeneradorDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ImpGeneradorDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ImpGeneradorDaoImpl'
	 * 
	 * @param userConn
	 */
	public ImpGeneradorDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.imp_generador";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ImpGenerador fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ImpGenerador dto = new ImpGenerador();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ImpGenerador[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ImpGenerador dto = new ImpGenerador();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ImpGenerador ret[] = new ImpGenerador[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ImpGenerador dto, ResultSet rs) throws SQLException
	{
		dto.setIdimpgenerador( new Integer( rs.getInt(COLUMN_IDIMPGENERADOR) ) );
		dto.setIdhojaimp( new Integer( rs.getInt(COLUMN_IDHOJAIMP) ) );
		if (rs.wasNull()) {
			dto.setIdhojaimp( null );
		}
		
		dto.setIdgenerador( new Integer( rs.getInt(COLUMN_IDGENERADOR) ) );
		dto.setIdseg( new Integer( rs.getInt(COLUMN_IDSEG) ) );
		if (rs.wasNull()) {
			dto.setIdseg( null );
		}
		
		dto.setNumserie( rs.getString( COLUMN_NUMSERIE ) );
		dto.setLocalizacion( new Integer( rs.getInt(COLUMN_LOCALIZACION) ) );
		if (rs.wasNull()) {
			dto.setLocalizacion( null );
		}
		
		dto.setMotivorecambio( new Integer( rs.getInt(COLUMN_MOTIVORECAMBIO) ) );
		if (rs.wasNull()) {
			dto.setMotivorecambio( null );
		}
		
		dto.setMotivorecolocacion( new Integer( rs.getInt(COLUMN_MOTIVORECOLOCACION) ) );
		if (rs.wasNull()) {
			dto.setMotivorecolocacion( null );
		}
		
		dto.setMotivoexplante( new Integer( rs.getInt(COLUMN_MOTIVOEXPLANTE) ) );
		if (rs.wasNull()) {
			dto.setMotivoexplante( null );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ImpGenerador dto)
	{
	}

	/** 
	 * Returns all rows from the imp_generador table that match the specified arbitrary SQL statement
	 */
	public ImpGenerador[] findByDynamicSelect(String sql, Object[] sqlParams) throws ImpGeneradorDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpGeneradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the imp_generador table that match the specified arbitrary SQL statement
	 */
	public ImpGenerador[] findByDynamicWhere(String sql, Object[] sqlParams) throws ImpGeneradorDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpGeneradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
