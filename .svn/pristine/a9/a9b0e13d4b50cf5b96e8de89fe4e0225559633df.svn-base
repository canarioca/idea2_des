/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class InformesDaoImpl extends AbstractDAO implements InformesDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDINF, IDPROCEDIMIENTO, TIPOPROCEDIMIENTO, CODIGO, RUTA, FECHACREACION, FECHAMOD, DESCRIPCION, IDINFORME, IDEPISODIO, ESTADO, ORIGEN FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDINF, IDPROCEDIMIENTO, TIPOPROCEDIMIENTO, CODIGO, RUTA, FECHACREACION, FECHAMOD, DESCRIPCION, IDINFORME, IDEPISODIO, ESTADO, ORIGEN ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDINF = ?, IDPROCEDIMIENTO = ?, TIPOPROCEDIMIENTO = ?, CODIGO = ?, RUTA = ?, FECHACREACION = ?, FECHAMOD = ?, DESCRIPCION = ?, IDINFORME = ?, IDEPISODIO = ?, ESTADO = ?, ORIGEN = ? WHERE IDINF = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDINF = ?";

	/** 
	 * Index of column IDINF
	 */
	protected static final int COLUMN_IDINF = 1;

	/** 
	 * Index of column IDPROCEDIMIENTO
	 */
	protected static final int COLUMN_IDPROCEDIMIENTO = 2;

	/** 
	 * Index of column TIPOPROCEDIMIENTO
	 */
	protected static final int COLUMN_TIPOPROCEDIMIENTO = 3;

	/** 
	 * Index of column CODIGO
	 */
	protected static final int COLUMN_CODIGO = 4;

	/** 
	 * Index of column RUTA
	 */
	protected static final int COLUMN_RUTA = 5;

	/** 
	 * Index of column FECHACREACION
	 */
	protected static final int COLUMN_FECHACREACION = 6;

	/** 
	 * Index of column FECHAMOD
	 */
	protected static final int COLUMN_FECHAMOD = 7;

	/** 
	 * Index of column DESCRIPCION
	 */
	protected static final int COLUMN_DESCRIPCION = 8;

	/** 
	 * Index of column IDINFORME
	 */
	protected static final int COLUMN_IDINFORME = 9;

	/** 
	 * Index of column IDEPISODIO
	 */
	protected static final int COLUMN_IDEPISODIO = 10;

	/** 
	 * Index of column ESTADO
	 */
	protected static final int COLUMN_ESTADO = 11;

	/** 
	 * Index of column ORIGEN
	 */
	protected static final int COLUMN_ORIGEN = 12;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column IDINF
	 */
	protected static final int PK_COLUMN_IDINF = 1;

	/** 
	 * Inserts a new row in the informes table.
	 */
	public InformesPk insert(Informes dto) throws InformesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdinf() != null) {
				stmt.setInt( index++, dto.getIdinf().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdprocedimiento() != null) {
				stmt.setInt( index++, dto.getIdprocedimiento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTipoprocedimiento() != null) {
				stmt.setInt( index++, dto.getTipoprocedimiento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCodigo() != null) {
				stmt.setInt( index++, dto.getCodigo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getRuta() );
			stmt.setDate(index++, dto.getFechacreacion()==null ? null : new java.sql.Date( dto.getFechacreacion().getTime() ) );
			stmt.setDate(index++, dto.getFechamod()==null ? null : new java.sql.Date( dto.getFechamod().getTime() ) );
			stmt.setString( index++, dto.getDescripcion() );
			stmt.setString( index++, dto.getIdinforme() );
			if (dto.getIdepisodio() != null) {
				stmt.setInt( index++, dto.getIdepisodio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEstado() != null) {
				stmt.setInt( index++, dto.getEstado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getOrigen() != null) {
				stmt.setInt( index++, dto.getOrigen().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdinf( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InformesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the informes table.
	 */
	public void update(InformesPk pk, Informes dto) throws InformesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdinf() != null) {
				stmt.setInt( index++, dto.getIdinf().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdprocedimiento() != null) {
				stmt.setInt( index++, dto.getIdprocedimiento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTipoprocedimiento() != null) {
				stmt.setInt( index++, dto.getTipoprocedimiento().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCodigo() != null) {
				stmt.setInt( index++, dto.getCodigo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getRuta() );
			stmt.setDate(index++, dto.getFechacreacion()==null ? null : new java.sql.Date( dto.getFechacreacion().getTime() ) );
			stmt.setDate(index++, dto.getFechamod()==null ? null : new java.sql.Date( dto.getFechamod().getTime() ) );
			stmt.setString( index++, dto.getDescripcion() );
			stmt.setString( index++, dto.getIdinforme() );
			if (dto.getIdepisodio() != null) {
				stmt.setInt( index++, dto.getIdepisodio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getEstado() != null) {
				stmt.setInt( index++, dto.getEstado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getOrigen() != null) {
				stmt.setInt( index++, dto.getOrigen().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (pk.getIdinf() != null) {
				stmt.setInt( 13, pk.getIdinf().intValue() );
			} else {
				stmt.setNull(13, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InformesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the informes table.
	 */
	public void delete(InformesPk pk) throws InformesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdinf() != null) {
				stmt.setInt( 1, pk.getIdinf().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InformesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the informes table that matches the specified primary-key value.
	 */
	public Informes findByPrimaryKey(InformesPk pk) throws InformesDaoException
	{
		return findByPrimaryKey( pk.getIdinf() );
	}

	/** 
	 * Returns all rows from the informes table that match the criteria 'IDINF = :idinf'.
	 */
	public Informes findByPrimaryKey(Integer idinf) throws InformesDaoException
	{
		Informes ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDINF = ?", new Object[] { idinf } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the informes table that match the criteria ''.
	 */
	public Informes[] findAll() throws InformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDINF", null );
	}

	/** 
	 * Returns all rows from the informes table that match the criteria 'IDINF = :idinf'.
	 */
	public Informes[] findWhereIdinfEquals(int idinf) throws InformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDINF = ? ORDER BY IDINF", new Object[] {  new Integer(idinf) } );
	}

	/** 
	 * Returns all rows from the informes table that match the criteria 'IDPROCEDIMIENTO = :idprocedimiento'.
	 */
	public Informes[] findWhereIdprocedimientoEquals(int idprocedimiento) throws InformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPROCEDIMIENTO = ? ORDER BY IDPROCEDIMIENTO", new Object[] {  new Integer(idprocedimiento) } );
	}

	/** 
	 * Returns all rows from the informes table that match the criteria 'TIPOPROCEDIMIENTO = :tipoprocedimiento'.
	 */
	public Informes[] findWhereTipoprocedimientoEquals(int tipoprocedimiento) throws InformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPOPROCEDIMIENTO = ? ORDER BY TIPOPROCEDIMIENTO", new Object[] {  new Integer(tipoprocedimiento) } );
	}

	/** 
	 * Returns all rows from the informes table that match the criteria 'CODIGO = :codigo'.
	 */
	public Informes[] findWhereCodigoEquals(int codigo) throws InformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CODIGO = ? ORDER BY CODIGO", new Object[] {  new Integer(codigo) } );
	}

	/** 
	 * Returns all rows from the informes table that match the criteria 'RUTA = :ruta'.
	 */
	public Informes[] findWhereRutaEquals(String ruta) throws InformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RUTA = ? ORDER BY RUTA", new Object[] { ruta } );
	}

	/** 
	 * Returns all rows from the informes table that match the criteria 'FECHACREACION = :fechacreacion'.
	 */
	public Informes[] findWhereFechacreacionEquals(Date fechacreacion) throws InformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHACREACION = ? ORDER BY FECHACREACION", new Object[] { fechacreacion==null ? null : new java.sql.Date( fechacreacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the informes table that match the criteria 'FECHAMOD = :fechamod'.
	 */
	public Informes[] findWhereFechamodEquals(Date fechamod) throws InformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHAMOD = ? ORDER BY FECHAMOD", new Object[] { fechamod==null ? null : new java.sql.Date( fechamod.getTime() ) } );
	}

	/** 
	 * Returns all rows from the informes table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public Informes[] findWhereDescripcionEquals(String descripcion) throws InformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESCRIPCION = ? ORDER BY DESCRIPCION", new Object[] { descripcion } );
	}

	/** 
	 * Returns all rows from the informes table that match the criteria 'IDINFORME = :idinforme'.
	 */
	public Informes[] findWhereIdinformeEquals(String idinforme) throws InformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDINFORME = ? ORDER BY IDINFORME", new Object[] { idinforme } );
	}

	/** 
	 * Returns all rows from the informes table that match the criteria 'IDEPISODIO = :idepisodio'.
	 */
	public Informes[] findWhereIdepisodioEquals(int idepisodio) throws InformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDEPISODIO = ? ORDER BY IDEPISODIO", new Object[] {  new Integer(idepisodio) } );
	}

	/** 
	 * Returns all rows from the informes table that match the criteria 'ESTADO = :estado'.
	 */
	public Informes[] findWhereEstadoEquals(int estado) throws InformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ESTADO = ? ORDER BY ESTADO", new Object[] {  new Integer(estado) } );
	}

	/** 
	 * Returns all rows from the informes table that match the criteria 'ORIGEN = :origen'.
	 */
	public Informes[] findWhereOrigenEquals(int origen) throws InformesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ORIGEN = ? ORDER BY ORIGEN", new Object[] {  new Integer(origen) } );
	}

	/**
	 * Method 'InformesDaoImpl'
	 * 
	 */
	public InformesDaoImpl()
	{
	}
	
	public InformesDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public InformesDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'InformesDaoImpl'
	 * 
	 * @param userConn
	 */
	public InformesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.informes";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Informes fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Informes dto = new Informes();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Informes[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Informes dto = new Informes();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Informes ret[] = new Informes[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Informes dto, ResultSet rs) throws SQLException
	{
		dto.setIdinf( new Integer( rs.getInt(COLUMN_IDINF) ) );
		dto.setIdprocedimiento( new Integer( rs.getInt(COLUMN_IDPROCEDIMIENTO) ) );
		dto.setTipoprocedimiento( new Integer( rs.getInt(COLUMN_TIPOPROCEDIMIENTO) ) );
		dto.setCodigo( new Integer( rs.getInt(COLUMN_CODIGO) ) );
		dto.setRuta( rs.getString( COLUMN_RUTA ) );
		dto.setFechacreacion( rs.getDate(COLUMN_FECHACREACION ) );
		dto.setFechamod( rs.getDate(COLUMN_FECHAMOD ) );
		dto.setDescripcion( rs.getString( COLUMN_DESCRIPCION ) );
		dto.setIdinforme( rs.getString( COLUMN_IDINFORME ) );
		dto.setIdepisodio( new Integer( rs.getInt(COLUMN_IDEPISODIO) ) );
		if (rs.wasNull()) {
			dto.setIdepisodio( null );
		}
		
		dto.setEstado( new Integer( rs.getInt(COLUMN_ESTADO) ) );
		if (rs.wasNull()) {
			dto.setEstado( null );
		}
		
		dto.setOrigen( new Integer( rs.getInt(COLUMN_ORIGEN) ) );
		if (rs.wasNull()) {
			dto.setOrigen( null );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Informes dto)
	{
	}

	/** 
	 * Returns all rows from the informes table that match the specified arbitrary SQL statement
	 */
	public Informes[] findByDynamicSelect(String sql, Object[] sqlParams) throws InformesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InformesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the informes table that match the specified arbitrary SQL statement
	 */
	public Informes[] findByDynamicWhere(String sql, Object[] sqlParams) throws InformesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InformesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
