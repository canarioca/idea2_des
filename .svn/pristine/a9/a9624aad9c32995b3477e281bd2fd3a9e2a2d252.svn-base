/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class RegistradoreventosDaoImpl extends AbstractDAO implements RegistradoreventosDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDREGISTRADOR, MODELO, FABRICANTE, REFERENCIA, RF, MRI, ACTIVO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDREGISTRADOR, MODELO, FABRICANTE, REFERENCIA, RF, MRI, ACTIVO ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDREGISTRADOR = ?, MODELO = ?, FABRICANTE = ?, REFERENCIA = ?, RF = ?, MRI = ?, ACTIVO = ? WHERE IDREGISTRADOR = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDREGISTRADOR = ?";

	/** 
	 * Index of column IDREGISTRADOR
	 */
	protected static final int COLUMN_IDREGISTRADOR = 1;

	/** 
	 * Index of column MODELO
	 */
	protected static final int COLUMN_MODELO = 2;

	/** 
	 * Index of column FABRICANTE
	 */
	protected static final int COLUMN_FABRICANTE = 3;

	/** 
	 * Index of column REFERENCIA
	 */
	protected static final int COLUMN_REFERENCIA = 4;

	/** 
	 * Index of column RF
	 */
	protected static final int COLUMN_RF = 5;

	/** 
	 * Index of column MRI
	 */
	protected static final int COLUMN_MRI = 6;

	/** 
	 * Index of column ACTIVO
	 */
	protected static final int COLUMN_ACTIVO = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column IDREGISTRADOR
	 */
	protected static final int PK_COLUMN_IDREGISTRADOR = 1;

	/** 
	 * Inserts a new row in the registradoreventos table.
	 */
	public RegistradoreventosPk insert(Registradoreventos dto) throws RegistradoreventosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdregistrador() != null) {
				stmt.setInt( index++, dto.getIdregistrador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getModelo() );
			stmt.setString( index++, dto.getFabricante() );
			stmt.setString( index++, dto.getReferencia() );
			if (dto.getRf() != null) {
				stmt.setInt( index++, dto.getRf().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMri() != null) {
				stmt.setInt( index++, dto.getMri().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getActivo() != null) {
				stmt.setInt( index++, dto.getActivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdregistrador( new Integer( rs.getInt(1) ) );
			}
		
			reset(dto);
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RegistradoreventosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the registradoreventos table.
	 */
	public void update(RegistradoreventosPk pk, Registradoreventos dto) throws RegistradoreventosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdregistrador() != null) {
				stmt.setInt( index++, dto.getIdregistrador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getModelo() );
			stmt.setString( index++, dto.getFabricante() );
			stmt.setString( index++, dto.getReferencia() );
			if (dto.getRf() != null) {
				stmt.setInt( index++, dto.getRf().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMri() != null) {
				stmt.setInt( index++, dto.getMri().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getActivo() != null) {
				stmt.setInt( index++, dto.getActivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (pk.getIdregistrador() != null) {
				stmt.setInt( 8, pk.getIdregistrador().intValue() );
			} else {
				stmt.setNull(8, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RegistradoreventosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the registradoreventos table.
	 */
	public void delete(RegistradoreventosPk pk) throws RegistradoreventosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdregistrador() != null) {
				stmt.setInt( 1, pk.getIdregistrador().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RegistradoreventosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the registradoreventos table that matches the specified primary-key value.
	 */
	public Registradoreventos findByPrimaryKey(RegistradoreventosPk pk) throws RegistradoreventosDaoException
	{
		return findByPrimaryKey( pk.getIdregistrador() );
	}

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria 'IDREGISTRADOR = :idregistrador'.
	 */
	public Registradoreventos findByPrimaryKey(Integer idregistrador) throws RegistradoreventosDaoException
	{
		Registradoreventos ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDREGISTRADOR = ?", new Object[] { idregistrador } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria ''.
	 */
	public Registradoreventos[] findAll() throws RegistradoreventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDREGISTRADOR", null );
	}

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria 'IDREGISTRADOR = :idregistrador'.
	 */
	public Registradoreventos[] findWhereIdregistradorEquals(int idregistrador) throws RegistradoreventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDREGISTRADOR = ? ORDER BY IDREGISTRADOR", new Object[] {  new Integer(idregistrador) } );
	}

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria 'MODELO = :modelo'.
	 */
	public Registradoreventos[] findWhereModeloEquals(String modelo) throws RegistradoreventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MODELO = ? ORDER BY MODELO", new Object[] { modelo } );
	}

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria 'FABRICANTE = :fabricante'.
	 */
	public Registradoreventos[] findWhereFabricanteEquals(String fabricante) throws RegistradoreventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FABRICANTE = ? ORDER BY FABRICANTE", new Object[] { fabricante } );
	}

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria 'REFERENCIA = :referencia'.
	 */
	public Registradoreventos[] findWhereReferenciaEquals(String referencia) throws RegistradoreventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REFERENCIA = ? ORDER BY REFERENCIA", new Object[] { referencia } );
	}

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria 'RF = :rf'.
	 */
	public Registradoreventos[] findWhereRfEquals(int rf) throws RegistradoreventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RF = ? ORDER BY RF", new Object[] {  new Integer(rf) } );
	}

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria 'MRI = :mri'.
	 */
	public Registradoreventos[] findWhereMriEquals(int mri) throws RegistradoreventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MRI = ? ORDER BY MRI", new Object[] {  new Integer(mri) } );
	}

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria 'ACTIVO = :activo'.
	 */
	public Registradoreventos[] findWhereActivoEquals(int activo) throws RegistradoreventosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTIVO = ? ORDER BY ACTIVO", new Object[] {  new Integer(activo) } );
	}

	/**
	 * Method 'RegistradoreventosDaoImpl'
	 * 
	 */
	public RegistradoreventosDaoImpl()
	{
	}
	
	public RegistradoreventosDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	
	public RegistradoreventosDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'RegistradoreventosDaoImpl'
	 * 
	 * @param userConn
	 */
	public RegistradoreventosDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.registradoreventos";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Registradoreventos fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Registradoreventos dto = new Registradoreventos();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Registradoreventos[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Registradoreventos dto = new Registradoreventos();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Registradoreventos ret[] = new Registradoreventos[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Registradoreventos dto, ResultSet rs) throws SQLException
	{
		dto.setIdregistrador( new Integer( rs.getInt(COLUMN_IDREGISTRADOR) ) );
		dto.setModelo( rs.getString( COLUMN_MODELO ) );
		dto.setFabricante( rs.getString( COLUMN_FABRICANTE ) );
		dto.setReferencia( rs.getString( COLUMN_REFERENCIA ) );
		dto.setRf( new Integer( rs.getInt(COLUMN_RF) ) );
		if (rs.wasNull()) {
			dto.setRf( null );
		}
		
		dto.setMri( new Integer( rs.getInt(COLUMN_MRI) ) );
		if (rs.wasNull()) {
			dto.setMri( null );
		}
		
		dto.setActivo( new Integer( rs.getInt(COLUMN_ACTIVO) ) );
		if (rs.wasNull()) {
			dto.setActivo( null );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Registradoreventos dto)
	{
	}

	/** 
	 * Returns all rows from the registradoreventos table that match the specified arbitrary SQL statement
	 */
	public Registradoreventos[] findByDynamicSelect(String sql, Object[] sqlParams) throws RegistradoreventosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RegistradoreventosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the registradoreventos table that match the specified arbitrary SQL statement
	 */
	public Registradoreventos[] findByDynamicWhere(String sql, Object[] sqlParams) throws RegistradoreventosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RegistradoreventosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
