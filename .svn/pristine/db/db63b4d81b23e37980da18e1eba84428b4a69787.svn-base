/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.ArrayList;
import java.util.Date;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface SegSeguimientoDao
{
	/** 
	 * Inserts a new row in the seg_seguimiento table.
	 */
	public SegSeguimientoPk insert(SegSeguimiento dto) throws SegSeguimientoDaoException;

	/** 
	 * Updates a single row in the seg_seguimiento table.
	 */
	public void update(SegSeguimientoPk pk, SegSeguimiento dto) throws SegSeguimientoDaoException;

	/** 
	 * Deletes a single row in the seg_seguimiento table.
	 */
	public void delete(SegSeguimientoPk pk) throws SegSeguimientoDaoException;

	/** 
	 * Returns the rows from the seg_seguimiento table that matches the specified primary-key value.
	 */
	public SegSeguimiento findByPrimaryKey(SegSeguimientoPk pk) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'IDSEG = :idseg'.
	 */
	public SegSeguimiento findByPrimaryKey(Integer idseg) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria ''.
	 */
	public SegSeguimiento[] findAll() throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'IDSEG = :idseg'.
	 */
	public SegSeguimiento[] findWhereIdsegEquals(int idseg) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'IDIMPL = :idimpl'.
	 */
	public SegSeguimiento[] findWhereIdimplEquals(int idimpl) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'IDSISTEMA = :idsistema'.
	 */
	public SegSeguimiento[] findWhereIdsistemaEquals(int idsistema) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'IDPORESTIM = :idporestim'.
	 */
	public SegSeguimiento[] findWhereIdporestimEquals(int idporestim) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'IDBLOQUEO = :idbloqueo'.
	 */
	public SegSeguimiento[] findWhereIdbloqueoEquals(int idbloqueo) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'IDOBSMP = :idobsmp'.
	 */
	public SegSeguimiento[] findWhereIdobsmpEquals(int idobsmp) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'IDOBSDAI = :idobsdai'.
	 */
	public SegSeguimiento[] findWhereIdobsdaiEquals(int idobsdai) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'TIPOSEGUIMIENTO = :tiposeguimiento'.
	 */
	public SegSeguimiento[] findWhereTiposeguimientoEquals(int tiposeguimiento) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'MOTIVONOPROG = :motivonoprog'.
	 */
	public SegSeguimiento[] findWhereMotivonoprogEquals(int motivonoprog) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'REMOTO = :remoto'.
	 */
	public SegSeguimiento[] findWhereRemotoEquals(short remoto) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'OPERADOR = :operador'.
	 */
	public SegSeguimiento[] findWhereOperadorEquals(String operador) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'FECHA = :fecha'.
	 */
	public SegSeguimiento[] findWhereFechaEquals(Date fecha) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'FECHAPROXIMOSEG = :fechaproximoseg'.
	 */
	public SegSeguimiento[] findWhereFechaproximosegEquals(Date fechaproximoseg) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'CARACTERPROXIMO = :caracterproximo'.
	 */
	public SegSeguimiento[] findWhereCaracterproximoEquals(int caracterproximo) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public SegSeguimiento[] findWhereComentariosEquals(String comentarios) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'IDEV = :idev'.
	 */
	public SegSeguimiento[] findWhereIdevEquals(int idev) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the criteria 'OPERADORENF = :operadorenf'.
	 */
	public SegSeguimiento[] findWhereOperadorenfEquals(String operadorenf) throws SegSeguimientoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the seg_seguimiento table that match the specified arbitrary SQL statement
	 */
	public SegSeguimiento[] findByDynamicSelect(String sql, Object[] sqlParams) throws SegSeguimientoDaoException;

	/** 
	 * Returns all rows from the seg_seguimiento table that match the specified arbitrary SQL statement
	 */
	public SegSeguimiento[] findByDynamicWhere(String sql, Object[] sqlParams) throws SegSeguimientoDaoException;

	public ArrayList<ArrayList<Object>> getEstadisticasSeguimiento(Integer codigo, Integer idimpgen) throws SegSeguimientoDaoException;
	public ArrayList<ArrayList<Object>> getEstadisticasElectrodosSeguimiento(Integer codigo, Date fecha_muestreo) throws SegSeguimientoDaoException;
	
}
