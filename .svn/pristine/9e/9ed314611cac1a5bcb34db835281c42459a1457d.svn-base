/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface MedComercialDao
{
	/** 
	 * Inserts a new row in the med_comercial table.
	 */
	public MedComercialPk insert(MedComercial dto) throws MedComercialDaoException;

	/** 
	 * Updates a single row in the med_comercial table.
	 */
	public void update(MedComercialPk pk, MedComercial dto) throws MedComercialDaoException;

	/** 
	 * Deletes a single row in the med_comercial table.
	 */
	public void delete(MedComercialPk pk) throws MedComercialDaoException;

	/** 
	 * Returns the rows from the med_comercial table that matches the specified primary-key value.
	 */
	public MedComercial findByPrimaryKey(MedComercialPk pk) throws MedComercialDaoException;

	/** 
	 * Returns all rows from the med_comercial table that match the criteria 'IDMEDCOM = :idmedcom'.
	 */
	public MedComercial findByPrimaryKey(Integer idmedcom) throws MedComercialDaoException;

	/** 
	 * Returns all rows from the med_comercial table that match the criteria ''.
	 */
	public MedComercial[] findAll() throws MedComercialDaoException;

	/** 
	 * Returns all rows from the med_comercial table that match the criteria 'IDMEDGEN = :idmedgen'.
	 */
	public MedComercial[] findByMedGenerico(int idmedgen) throws MedComercialDaoException;

	/** 
	 * Returns all rows from the med_comercial table that match the criteria 'IDMEDCOM = :idmedcom'.
	 */
	public MedComercial[] findWhereIdmedcomEquals(int idmedcom) throws MedComercialDaoException;

	/** 
	 * Returns all rows from the med_comercial table that match the criteria 'IDMEDGEN = :idmedgen'.
	 */
	public MedComercial[] findWhereIdmedgenEquals(int idmedgen) throws MedComercialDaoException;

	/** 
	 * Returns all rows from the med_comercial table that match the criteria 'NOMBRECOMERCIAL = :nombrecomercial'.
	 */
	public MedComercial[] findWhereNombrecomercialEquals(String nombrecomercial) throws MedComercialDaoException;

	/** 
	 * Returns all rows from the med_comercial table that match the criteria 'IDPRESENTACION = :idpresentacion'.
	 */
	public MedComercial[] findWhereIdpresentacionEquals(int idpresentacion) throws MedComercialDaoException;

	/** 
	 * Returns all rows from the med_comercial table that match the criteria 'IDVIA = :idvia'.
	 */
	public MedComercial[] findWhereIdviaEquals(int idvia) throws MedComercialDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the med_comercial table that match the specified arbitrary SQL statement
	 */
	public MedComercial[] findByDynamicSelect(String sql, Object[] sqlParams) throws MedComercialDaoException;

	/** 
	 * Returns all rows from the med_comercial table that match the specified arbitrary SQL statement
	 */
	public MedComercial[] findByDynamicWhere(String sql, Object[] sqlParams) throws MedComercialDaoException;

}
