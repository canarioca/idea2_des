/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface MedGenericoDao
{
	/** 
	 * Inserts a new row in the med_generico table.
	 */
	public MedGenericoPk insert(MedGenerico dto) throws MedGenericoDaoException;

	/** 
	 * Updates a single row in the med_generico table.
	 */
	public void update(MedGenericoPk pk, MedGenerico dto) throws MedGenericoDaoException;

	/** 
	 * Deletes a single row in the med_generico table.
	 */
	public void delete(MedGenericoPk pk) throws MedGenericoDaoException;

	/** 
	 * Returns the rows from the med_generico table that matches the specified primary-key value.
	 */
	public MedGenerico findByPrimaryKey(MedGenericoPk pk) throws MedGenericoDaoException;

	/** 
	 * Returns all rows from the med_generico table that match the criteria 'IDMEDGEN = :idmedgen'.
	 */
	public MedGenerico findByPrimaryKey(Integer idmedgen) throws MedGenericoDaoException;

	/** 
	 * Returns all rows from the med_generico table that match the criteria ''.
	 */
	public MedGenerico[] findAll() throws MedGenericoDaoException;

	/** 
	 * Returns all rows from the med_generico table that match the criteria 'IDMEDGEN = :idmedgen'.
	 */
	public MedGenerico[] findWhereIdmedgenEquals(int idmedgen) throws MedGenericoDaoException;

	/** 
	 * Returns all rows from the med_generico table that match the criteria 'TIPOMED = :tipomed'.
	 */
	public MedGenerico[] findWhereTipomedEquals(int tipomed) throws MedGenericoDaoException;

	/** 
	 * Returns all rows from the med_generico table that match the criteria 'NOMBREGENERICO = :nombregenerico'.
	 */
	public MedGenerico[] findWhereNombregenericoEquals(String nombregenerico) throws MedGenericoDaoException;

	/** 
	 * Returns all rows from the med_generico table that match the criteria 'CODIGO = :codigo'.
	 */
	public MedGenerico[] findWhereCodigoEquals(String codigo) throws MedGenericoDaoException;

	/** 
	 * Returns all rows from the med_generico table that match the criteria 'SUBCLASE1 = :subclase1'.
	 */
	public MedGenerico[] findWhereSubclase1Equals(String subclase1) throws MedGenericoDaoException;

	/** 
	 * Returns all rows from the med_generico table that match the criteria 'SUBCLASE2 = :subclase2'.
	 */
	public MedGenerico[] findWhereSubclase2Equals(String subclase2) throws MedGenericoDaoException;

	/** 
	 * Returns all rows from the med_generico table that match the criteria 'SUBCLASE3 = :subclase3'.
	 */
	public MedGenerico[] findWhereSubclase3Equals(String subclase3) throws MedGenericoDaoException;

	/** 
	 * Returns all rows from the med_generico table that match the criteria 'SUBCLASE4 = :subclase4'.
	 */
	public MedGenerico[] findWhereSubclase4Equals(String subclase4) throws MedGenericoDaoException;

	/** 
	 * Returns all rows from the med_generico table that match the criteria 'SUBCLASE5 = :subclase5'.
	 */
	public MedGenerico[] findWhereSubclase5Equals(String subclase5) throws MedGenericoDaoException;

	/** 
	 * Returns all rows from the med_generico table that match the criteria 'SUBCLASE6 = :subclase6'.
	 */
	public MedGenerico[] findWhereSubclase6Equals(String subclase6) throws MedGenericoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the med_generico table that match the specified arbitrary SQL statement
	 */
	public MedGenerico[] findByDynamicSelect(String sql, Object[] sqlParams) throws MedGenericoDaoException;

	/** 
	 * Returns all rows from the med_generico table that match the specified arbitrary SQL statement
	 */
	public MedGenerico[] findByDynamicWhere(String sql, Object[] sqlParams) throws MedGenericoDaoException;

}
