/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SegSeguimientoClinicoDaoImpl extends AbstractDAO implements SegSeguimientoClinicoDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDSEGCLIN, FECHA, TIPOSEG, PROGRAMADO, MOTIVO, OTROMOTIVO, OBSERVACIONES, COMENTARIOS, RESULTADOS, OPMED, OPENF, TIPOPROCREF, IDPROCREF FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDSEGCLIN, FECHA, TIPOSEG, PROGRAMADO, MOTIVO, OTROMOTIVO, OBSERVACIONES, COMENTARIOS, RESULTADOS, OPMED, OPENF, TIPOPROCREF, IDPROCREF ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDSEGCLIN = ?, FECHA = ?, TIPOSEG = ?, PROGRAMADO = ?, MOTIVO = ?, OTROMOTIVO = ?, OBSERVACIONES = ?, COMENTARIOS = ?, RESULTADOS = ?, OPMED = ?, OPENF = ?, TIPOPROCREF = ?, IDPROCREF = ? WHERE IDSEGCLIN = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDSEGCLIN = ?";

	/** 
	 * Index of column IDSEGCLIN
	 */
	protected static final int COLUMN_IDSEGCLIN = 1;

	/** 
	 * Index of column FECHA
	 */
	protected static final int COLUMN_FECHA = 2;

	/** 
	 * Index of column TIPOSEG
	 */
	protected static final int COLUMN_TIPOSEG = 3;

	/** 
	 * Index of column PROGRAMADO
	 */
	protected static final int COLUMN_PROGRAMADO = 4;

	/** 
	 * Index of column MOTIVO
	 */
	protected static final int COLUMN_MOTIVO = 5;

	/** 
	 * Index of column OTROMOTIVO
	 */
	protected static final int COLUMN_OTROMOTIVO = 6;

	/** 
	 * Index of column OBSERVACIONES
	 */
	protected static final int COLUMN_OBSERVACIONES = 7;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 8;

	/** 
	 * Index of column RESULTADOS
	 */
	protected static final int COLUMN_RESULTADOS = 9;

	/** 
	 * Index of column OPMED
	 */
	protected static final int COLUMN_OPMED = 10;

	/** 
	 * Index of column OPENF
	 */
	protected static final int COLUMN_OPENF = 11;

	/** 
	 * Index of column TIPOPROCREF
	 */
	protected static final int COLUMN_TIPOPROCREF = 12;

	/** 
	 * Index of column IDPROCREF
	 */
	protected static final int COLUMN_IDPROCREF = 13;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column IDSEGCLIN
	 */
	protected static final int PK_COLUMN_IDSEGCLIN = 1;

	/** 
	 * Inserts a new row in the seg_seguimiento_clinico table.
	 */
	public SegSeguimientoClinicoPk insert(SegSeguimientoClinico dto) throws SegSeguimientoClinicoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdsegclin() != null) {
				stmt.setInt( index++, dto.getIdsegclin().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			if (dto.getTiposeg() != null) {
				stmt.setInt( index++, dto.getTiposeg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProgramado() != null) {
				stmt.setInt( index++, dto.getProgramado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMotivo() != null) {
				stmt.setInt( index++, dto.getMotivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getOtromotivo() );
			stmt.setString( index++, dto.getObservaciones() );
			stmt.setString( index++, dto.getComentarios() );
			stmt.setString( index++, dto.getResultados() );
			stmt.setString( index++, dto.getOpmed() );
			stmt.setString( index++, dto.getOpenf() );
			if (dto.getTipoprocref() != null) {
				stmt.setInt( index++, dto.getTipoprocref().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdprocref() != null) {
				stmt.setInt( index++, dto.getIdprocref().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdsegclin( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSeguimientoClinicoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the seg_seguimiento_clinico table.
	 */
	public void update(SegSeguimientoClinicoPk pk, SegSeguimientoClinico dto) throws SegSeguimientoClinicoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdsegclin() != null) {
				stmt.setInt( index++, dto.getIdsegclin().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			if (dto.getTiposeg() != null) {
				stmt.setInt( index++, dto.getTiposeg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProgramado() != null) {
				stmt.setInt( index++, dto.getProgramado().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getMotivo() != null) {
				stmt.setInt( index++, dto.getMotivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getOtromotivo() );
			stmt.setString( index++, dto.getObservaciones() );
			stmt.setString( index++, dto.getComentarios() );
			stmt.setString( index++, dto.getResultados() );
			stmt.setString( index++, dto.getOpmed() );
			stmt.setString( index++, dto.getOpenf() );
			if (dto.getTipoprocref() != null) {
				stmt.setInt( index++, dto.getTipoprocref().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdprocref() != null) {
				stmt.setInt( index++, dto.getIdprocref().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (pk.getIdsegclin() != null) {
				stmt.setInt( 14, pk.getIdsegclin().intValue() );
			} else {
				stmt.setNull(14, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSeguimientoClinicoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the seg_seguimiento_clinico table.
	 */
	public void delete(SegSeguimientoClinicoPk pk) throws SegSeguimientoClinicoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdsegclin() != null) {
				stmt.setInt( 1, pk.getIdsegclin().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSeguimientoClinicoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the seg_seguimiento_clinico table that matches the specified primary-key value.
	 */
	public SegSeguimientoClinico findByPrimaryKey(SegSeguimientoClinicoPk pk) throws SegSeguimientoClinicoDaoException
	{
		return findByPrimaryKey( pk.getIdsegclin() );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the criteria 'IDSEGCLIN = :idsegclin'.
	 */
	public SegSeguimientoClinico findByPrimaryKey(Integer idsegclin) throws SegSeguimientoClinicoDaoException
	{
		SegSeguimientoClinico ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDSEGCLIN = ?", new Object[] { idsegclin } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the criteria ''.
	 */
	public SegSeguimientoClinico[] findAll() throws SegSeguimientoClinicoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDSEGCLIN", null );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the criteria 'IDSEGCLIN = :idsegclin'.
	 */
	public SegSeguimientoClinico[] findWhereIdsegclinEquals(int idsegclin) throws SegSeguimientoClinicoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDSEGCLIN = ? ORDER BY IDSEGCLIN", new Object[] {  new Integer(idsegclin) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the criteria 'FECHA = :fecha'.
	 */
	public SegSeguimientoClinico[] findWhereFechaEquals(Date fecha) throws SegSeguimientoClinicoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA = ? ORDER BY FECHA", new Object[] { fecha==null ? null : new java.sql.Date( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the criteria 'TIPOSEG = :tiposeg'.
	 */
	public SegSeguimientoClinico[] findWhereTiposegEquals(int tiposeg) throws SegSeguimientoClinicoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPOSEG = ? ORDER BY TIPOSEG", new Object[] {  new Integer(tiposeg) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the criteria 'PROGRAMADO = :programado'.
	 */
	public SegSeguimientoClinico[] findWhereProgramadoEquals(int programado) throws SegSeguimientoClinicoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROGRAMADO = ? ORDER BY PROGRAMADO", new Object[] {  new Integer(programado) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the criteria 'MOTIVO = :motivo'.
	 */
	public SegSeguimientoClinico[] findWhereMotivoEquals(int motivo) throws SegSeguimientoClinicoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOTIVO = ? ORDER BY MOTIVO", new Object[] {  new Integer(motivo) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the criteria 'OTROMOTIVO = :otromotivo'.
	 */
	public SegSeguimientoClinico[] findWhereOtromotivoEquals(String otromotivo) throws SegSeguimientoClinicoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OTROMOTIVO = ? ORDER BY OTROMOTIVO", new Object[] { otromotivo } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the criteria 'OBSERVACIONES = :observaciones'.
	 */
	public SegSeguimientoClinico[] findWhereObservacionesEquals(String observaciones) throws SegSeguimientoClinicoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OBSERVACIONES = ? ORDER BY OBSERVACIONES", new Object[] { observaciones } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public SegSeguimientoClinico[] findWhereComentariosEquals(String comentarios) throws SegSeguimientoClinicoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the criteria 'RESULTADOS = :resultados'.
	 */
	public SegSeguimientoClinico[] findWhereResultadosEquals(String resultados) throws SegSeguimientoClinicoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RESULTADOS = ? ORDER BY RESULTADOS", new Object[] { resultados } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the criteria 'OPMED = :opmed'.
	 */
	public SegSeguimientoClinico[] findWhereOpmedEquals(String opmed) throws SegSeguimientoClinicoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OPMED = ? ORDER BY OPMED", new Object[] { opmed } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the criteria 'OPENF = :openf'.
	 */
	public SegSeguimientoClinico[] findWhereOpenfEquals(String openf) throws SegSeguimientoClinicoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OPENF = ? ORDER BY OPENF", new Object[] { openf } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the criteria 'TIPOPROCREF = :tipoprocref'.
	 */
	public SegSeguimientoClinico[] findWhereTipoprocrefEquals(int tipoprocref) throws SegSeguimientoClinicoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPOPROCREF = ? ORDER BY TIPOPROCREF", new Object[] {  new Integer(tipoprocref) } );
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the criteria 'IDPROCREF = :idprocref'.
	 */
	public SegSeguimientoClinico[] findWhereIdprocrefEquals(int idprocref) throws SegSeguimientoClinicoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPROCREF = ? ORDER BY IDPROCREF", new Object[] {  new Integer(idprocref) } );
	}

	/**
	 * Method 'SegSeguimientoClinicoDaoImpl'
	 * 
	 */
	public SegSeguimientoClinicoDaoImpl()
	{
	}

	public SegSeguimientoClinicoDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public SegSeguimientoClinicoDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	/**
	 * Method 'SegSeguimientoClinicoDaoImpl'
	 * 
	 * @param userConn
	 */
	public SegSeguimientoClinicoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "seg_seguimiento_clinico";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SegSeguimientoClinico fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SegSeguimientoClinico dto = new SegSeguimientoClinico();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SegSeguimientoClinico[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SegSeguimientoClinico dto = new SegSeguimientoClinico();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SegSeguimientoClinico ret[] = new SegSeguimientoClinico[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SegSeguimientoClinico dto, ResultSet rs) throws SQLException
	{
		dto.setIdsegclin( new Integer( rs.getInt(COLUMN_IDSEGCLIN) ) );
		dto.setFecha( rs.getDate(COLUMN_FECHA ) );
		dto.setTiposeg( new Integer( rs.getInt(COLUMN_TIPOSEG) ) );
		if (rs.wasNull()) {
			dto.setTiposeg( null );
		}
		
		dto.setProgramado( new Integer( rs.getInt(COLUMN_PROGRAMADO) ) );
		if (rs.wasNull()) {
			dto.setProgramado( null );
		}
		
		dto.setMotivo( new Integer( rs.getInt(COLUMN_MOTIVO) ) );
		if (rs.wasNull()) {
			dto.setMotivo( null );
		}
		
		dto.setOtromotivo( rs.getString( COLUMN_OTROMOTIVO ) );
		dto.setObservaciones( rs.getString( COLUMN_OBSERVACIONES ) );
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setResultados( rs.getString( COLUMN_RESULTADOS ) );
		dto.setOpmed( rs.getString( COLUMN_OPMED ) );
		dto.setOpenf( rs.getString( COLUMN_OPENF ) );
		dto.setTipoprocref( new Integer( rs.getInt(COLUMN_TIPOPROCREF) ) );
		if (rs.wasNull()) {
			dto.setTipoprocref( null );
		}
		
		dto.setIdprocref( new Integer( rs.getInt(COLUMN_IDPROCREF) ) );
		if (rs.wasNull()) {
			dto.setIdprocref( null );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SegSeguimientoClinico dto)
	{
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the specified arbitrary SQL statement
	 */
	public SegSeguimientoClinico[] findByDynamicSelect(String sql, Object[] sqlParams) throws SegSeguimientoClinicoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSeguimientoClinicoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the seg_seguimiento_clinico table that match the specified arbitrary SQL statement
	 */
	public SegSeguimientoClinico[] findByDynamicWhere(String sql, Object[] sqlParams) throws SegSeguimientoClinicoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SegSeguimientoClinicoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
