/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class TestOrtostatismoActivoDaoImpl extends AbstractDAO implements TestOrtostatismoActivoDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDTEST, DEC_TAS, DEC_TAD, DEC_FC, ORT_TAS, ORT_TAD, ORT_FC, FECHA, COMENTARIOS, OPERADOR, ENFERMERIA, NPROC FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDTEST, DEC_TAS, DEC_TAD, DEC_FC, ORT_TAS, ORT_TAD, ORT_FC, FECHA, COMENTARIOS, OPERADOR, ENFERMERIA, NPROC ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDTEST = ?, DEC_TAS = ?, DEC_TAD = ?, DEC_FC = ?, ORT_TAS = ?, ORT_TAD = ?, ORT_FC = ?, FECHA = ?, COMENTARIOS = ?, OPERADOR = ?, ENFERMERIA = ?, NPROC = ? WHERE IDTEST = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDTEST = ?";

	/** 
	 * Index of column IDTEST
	 */
	protected static final int COLUMN_IDTEST = 1;

	/** 
	 * Index of column DEC_TAS
	 */
	protected static final int COLUMN_DEC_TAS = 2;

	/** 
	 * Index of column DEC_TAD
	 */
	protected static final int COLUMN_DEC_TAD = 3;

	/** 
	 * Index of column DEC_FC
	 */
	protected static final int COLUMN_DEC_FC = 4;

	/** 
	 * Index of column ORT_TAS
	 */
	protected static final int COLUMN_ORT_TAS = 5;

	/** 
	 * Index of column ORT_TAD
	 */
	protected static final int COLUMN_ORT_TAD = 6;

	/** 
	 * Index of column ORT_FC
	 */
	protected static final int COLUMN_ORT_FC = 7;

	/** 
	 * Index of column FECHA
	 */
	protected static final int COLUMN_FECHA = 8;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 9;

	/** 
	 * Index of column OPERADOR
	 */
	protected static final int COLUMN_OPERADOR = 10;

	/** 
	 * Index of column ENFERMERIA
	 */
	protected static final int COLUMN_ENFERMERIA = 11;

	/** 
	 * Index of column NPROC
	 */
	protected static final int COLUMN_NPROC = 12;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 12;

	/** 
	 * Index of primary-key column IDTEST
	 */
	protected static final int PK_COLUMN_IDTEST = 1;

	/** 
	 * Inserts a new row in the test_ortostatismo_activo table.
	 */
	public TestOrtostatismoActivoPk insert(TestOrtostatismoActivo dto) throws TestOrtostatismoActivoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdtest() != null) {
				stmt.setInt( index++, dto.getIdtest().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getDecTas() );
			stmt.setString( index++, dto.getDecTad() );
			stmt.setString( index++, dto.getDecFc() );
			stmt.setString( index++, dto.getOrtTas() );
			stmt.setString( index++, dto.getOrtTad() );
			stmt.setString( index++, dto.getOrtFc() );
			stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			stmt.setString( index++, dto.getComentarios() );
			stmt.setString( index++, dto.getOperador() );
			stmt.setString( index++, dto.getEnfermeria() );
			stmt.setString( index++, dto.getNproc() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdtest( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TestOrtostatismoActivoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the test_ortostatismo_activo table.
	 */
	public void update(TestOrtostatismoActivoPk pk, TestOrtostatismoActivo dto) throws TestOrtostatismoActivoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdtest() != null) {
				stmt.setInt( index++, dto.getIdtest().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getDecTas() );
			stmt.setString( index++, dto.getDecTad() );
			stmt.setString( index++, dto.getDecFc() );
			stmt.setString( index++, dto.getOrtTas() );
			stmt.setString( index++, dto.getOrtTad() );
			stmt.setString( index++, dto.getOrtFc() );
			stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			stmt.setString( index++, dto.getComentarios() );
			stmt.setString( index++, dto.getOperador() );
			stmt.setString( index++, dto.getEnfermeria() );
			stmt.setString( index++, dto.getNproc() );
			if (pk.getIdtest() != null) {
				stmt.setInt( 13, pk.getIdtest().intValue() );
			} else {
				stmt.setNull(13, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TestOrtostatismoActivoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the test_ortostatismo_activo table.
	 */
	public void delete(TestOrtostatismoActivoPk pk) throws TestOrtostatismoActivoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdtest() != null) {
				stmt.setInt( 1, pk.getIdtest().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(pk.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TestOrtostatismoActivoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the test_ortostatismo_activo table that matches the specified primary-key value.
	 */
	public TestOrtostatismoActivo findByPrimaryKey(TestOrtostatismoActivoPk pk) throws TestOrtostatismoActivoDaoException
	{
		return findByPrimaryKey( pk.getIdtest() );
	}

	/** 
	 * Returns all rows from the test_ortostatismo_activo table that match the criteria 'IDTEST = :idtest'.
	 */
	public TestOrtostatismoActivo findByPrimaryKey(Integer idtest) throws TestOrtostatismoActivoDaoException
	{
		TestOrtostatismoActivo ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDTEST = ?", new Object[] { idtest } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the test_ortostatismo_activo table that match the criteria ''.
	 */
	public TestOrtostatismoActivo[] findAll() throws TestOrtostatismoActivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDTEST", null );
	}

	/** 
	 * Returns all rows from the test_ortostatismo_activo table that match the criteria 'IDTEST = :idtest'.
	 */
	public TestOrtostatismoActivo[] findWhereIdtestEquals(int idtest) throws TestOrtostatismoActivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDTEST = ? ORDER BY IDTEST", new Object[] {  new Integer(idtest) } );
	}

	/** 
	 * Returns all rows from the test_ortostatismo_activo table that match the criteria 'DEC_TAS = :decTas'.
	 */
	public TestOrtostatismoActivo[] findWhereDecTasEquals(String decTas) throws TestOrtostatismoActivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DEC_TAS = ? ORDER BY DEC_TAS", new Object[] { decTas } );
	}

	/** 
	 * Returns all rows from the test_ortostatismo_activo table that match the criteria 'DEC_TAD = :decTad'.
	 */
	public TestOrtostatismoActivo[] findWhereDecTadEquals(String decTad) throws TestOrtostatismoActivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DEC_TAD = ? ORDER BY DEC_TAD", new Object[] { decTad } );
	}

	/** 
	 * Returns all rows from the test_ortostatismo_activo table that match the criteria 'DEC_FC = :decFc'.
	 */
	public TestOrtostatismoActivo[] findWhereDecFcEquals(String decFc) throws TestOrtostatismoActivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DEC_FC = ? ORDER BY DEC_FC", new Object[] { decFc } );
	}

	/** 
	 * Returns all rows from the test_ortostatismo_activo table that match the criteria 'ORT_TAS = :ortTas'.
	 */
	public TestOrtostatismoActivo[] findWhereOrtTasEquals(String ortTas) throws TestOrtostatismoActivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ORT_TAS = ? ORDER BY ORT_TAS", new Object[] { ortTas } );
	}

	/** 
	 * Returns all rows from the test_ortostatismo_activo table that match the criteria 'ORT_TAD = :ortTad'.
	 */
	public TestOrtostatismoActivo[] findWhereOrtTadEquals(String ortTad) throws TestOrtostatismoActivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ORT_TAD = ? ORDER BY ORT_TAD", new Object[] { ortTad } );
	}

	/** 
	 * Returns all rows from the test_ortostatismo_activo table that match the criteria 'ORT_FC = :ortFc'.
	 */
	public TestOrtostatismoActivo[] findWhereOrtFcEquals(String ortFc) throws TestOrtostatismoActivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ORT_FC = ? ORDER BY ORT_FC", new Object[] { ortFc } );
	}

	/** 
	 * Returns all rows from the test_ortostatismo_activo table that match the criteria 'FECHA = :fecha'.
	 */
	public TestOrtostatismoActivo[] findWhereFechaEquals(Date fecha) throws TestOrtostatismoActivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA = ? ORDER BY FECHA", new Object[] { fecha==null ? null : new java.sql.Date( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the test_ortostatismo_activo table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public TestOrtostatismoActivo[] findWhereComentariosEquals(String comentarios) throws TestOrtostatismoActivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/** 
	 * Returns all rows from the test_ortostatismo_activo table that match the criteria 'OPERADOR = :operador'.
	 */
	public TestOrtostatismoActivo[] findWhereOperadorEquals(String operador) throws TestOrtostatismoActivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OPERADOR = ? ORDER BY OPERADOR", new Object[] { operador } );
	}

	/** 
	 * Returns all rows from the test_ortostatismo_activo table that match the criteria 'ENFERMERIA = :enfermeria'.
	 */
	public TestOrtostatismoActivo[] findWhereEnfermeriaEquals(String enfermeria) throws TestOrtostatismoActivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ENFERMERIA = ? ORDER BY ENFERMERIA", new Object[] { enfermeria } );
	}

	/** 
	 * Returns all rows from the test_ortostatismo_activo table that match the criteria 'NPROC = :nproc'.
	 */
	public TestOrtostatismoActivo[] findWhereNprocEquals(String nproc) throws TestOrtostatismoActivoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NPROC = ? ORDER BY NPROC", new Object[] { nproc } );
	}

	/**
	 * Method 'TestOrtostatismoActivoDaoImpl'
	 * 
	 */
	public TestOrtostatismoActivoDaoImpl()
	{
	}
	public TestOrtostatismoActivoDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public TestOrtostatismoActivoDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	/**
	 * Method 'TestOrtostatismoActivoDaoImpl'
	 * 
	 * @param userConn
	 */
	public TestOrtostatismoActivoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "test_ortostatismo_activo";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected TestOrtostatismoActivo fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			TestOrtostatismoActivo dto = new TestOrtostatismoActivo();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected TestOrtostatismoActivo[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			TestOrtostatismoActivo dto = new TestOrtostatismoActivo();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		TestOrtostatismoActivo ret[] = new TestOrtostatismoActivo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(TestOrtostatismoActivo dto, ResultSet rs) throws SQLException
	{
		dto.setIdtest( new Integer( rs.getInt(COLUMN_IDTEST) ) );
		dto.setDecTas( rs.getString( COLUMN_DEC_TAS ) );
		dto.setDecTad( rs.getString( COLUMN_DEC_TAD ) );
		dto.setDecFc( rs.getString( COLUMN_DEC_FC ) );
		dto.setOrtTas( rs.getString( COLUMN_ORT_TAS ) );
		dto.setOrtTad( rs.getString( COLUMN_ORT_TAD ) );
		dto.setOrtFc( rs.getString( COLUMN_ORT_FC ) );
		dto.setFecha( rs.getDate(COLUMN_FECHA ) );
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setOperador( rs.getString( COLUMN_OPERADOR ) );
		dto.setEnfermeria( rs.getString( COLUMN_ENFERMERIA ) );
		dto.setNproc( rs.getString( COLUMN_NPROC ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(TestOrtostatismoActivo dto)
	{
	}

	/** 
	 * Returns all rows from the test_ortostatismo_activo table that match the specified arbitrary SQL statement
	 */
	public TestOrtostatismoActivo[] findByDynamicSelect(String sql, Object[] sqlParams) throws TestOrtostatismoActivoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TestOrtostatismoActivoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the test_ortostatismo_activo table that match the specified arbitrary SQL statement
	 */
	public TestOrtostatismoActivo[] findByDynamicWhere(String sql, Object[] sqlParams) throws TestOrtostatismoActivoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TestOrtostatismoActivoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
