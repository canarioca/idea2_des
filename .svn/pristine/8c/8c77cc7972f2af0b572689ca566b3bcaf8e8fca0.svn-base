/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.ArrayList;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface ProcedimientoDao
{
	/** 
	 * Inserts a new row in the procedimiento table.
	 */
	public ProcedimientoPk insert(Procedimiento dto) throws ProcedimientoDaoException;

	/** 
	 * Updates a single row in the procedimiento table.
	 */
	public void update(ProcedimientoPk pk, Procedimiento dto) throws ProcedimientoDaoException;

	/** 
	 * Deletes a single row in the procedimiento table.
	 */
	public void delete(ProcedimientoPk pk) throws ProcedimientoDaoException;

	/** 
	 * Returns the rows from the procedimiento table that matches the specified primary-key value.
	 */
	public Procedimiento findByPrimaryKey(ProcedimientoPk pk) throws ProcedimientoDaoException;

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'IDPROCEDIMIENTO = :idprocedimiento AND TIPOPROCEDIMIENTO = :tipoprocedimiento'.
	 */
	public Procedimiento findByPrimaryKey(Integer idprocedimiento, Integer tipoprocedimiento) throws ProcedimientoDaoException;

	/** 
	 * Returns all rows from the procedimiento table that match the criteria ''.
	 */
	public Procedimiento[] findAll() throws ProcedimientoDaoException;

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'IDPROCEDIMIENTO = :idprocedimiento'.
	 */
	public Procedimiento[] findWhereIdprocedimientoEquals(int idprocedimiento) throws ProcedimientoDaoException;

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'TIPOPROCEDIMIENTO = :tipoprocedimiento'.
	 */
	public Procedimiento[] findWhereTipoprocedimientoEquals(int tipoprocedimiento) throws ProcedimientoDaoException;

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'CODIGO = :codigo'.
	 */
	public Procedimiento[] findWhereCodigoEquals(int codigo) throws ProcedimientoDaoException;

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'IDSITCLINICA = :idsitclinica'.
	 */
	public Procedimiento[] findWhereIdsitclinicaEquals(int idsitclinica) throws ProcedimientoDaoException;

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'FECHA = :fecha'.
	 */
	public Procedimiento[] findWhereFechaEquals(Date fecha) throws ProcedimientoDaoException;

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'INTEGRADO = :integrado'.
	 */
	public Procedimiento[] findWhereIntegradoEquals(int integrado) throws ProcedimientoDaoException;

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'FECHAINTEGRACION = :fechaintegracion'.
	 */
	public Procedimiento[] findWhereFechaintegracionEquals(Date fechaintegracion) throws ProcedimientoDaoException;

	/** 
	 * Returns all rows from the procedimiento table that match the criteria 'IDEPISODIO = :idepisodio'.
	 */
	public Procedimiento[] findWhereIdepisodioEquals(int idepisodio) throws ProcedimientoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the procedimiento table that match the specified arbitrary SQL statement
	 */
	public Procedimiento[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProcedimientoDaoException;

	/** 
	 * Returns all rows from the procedimiento table that match the specified arbitrary SQL statement
	 */
	public Procedimiento[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProcedimientoDaoException;

	public ArrayList<ArrayList<Object>> getNumtotalProcedimientos(Date fechaini, Date fechafin) throws ProcedimientoDaoException;
	public ArrayList<ArrayList<Object>> getNumtotalSeguimientos(Date fechaini, Date fechafin) throws ProcedimientoDaoException;
	public ArrayList<ArrayList<Object>> getComentariosProcImp(Integer idpat) throws ProcedimientoDaoException;
	public ArrayList<ArrayList<Object>> getComentariosProcSeg(Integer idpat) throws ProcedimientoDaoException;
	public ArrayList<ArrayList<Object>> getDosisEscopiaAcumuladaEEF(Integer idpat) throws ProcedimientoDaoException;
	public ArrayList<ArrayList<Object>> getDosisEscopiaAcumuladaImplantes(Integer idpat) throws ProcedimientoDaoException;
}
