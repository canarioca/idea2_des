/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ProtSincopeAltaDaoImpl extends AbstractDAO implements ProtSincopeAltaDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDPROTSINCOPE, FECHA_ALTA, PERDCONO, RECESP, PRIMEPI, NUMEPIPREV, PRIMEREPI, PRECI_ALTA_CALOR, PRECI_ALTA_ORTO, PRECI_ALTA_ALCOHOL, PRECI_ALTA_EMOCION, PRECI_ALTA_AYUNO, PRECI_ALTA_AGLO, PRECI_ALTA_POST, PRECI_ALTA_VENOP, PRECI_ALTA_SIT, PRECI_ALTA_EMB, PROD_ALTA_MAREO, PROD_ALTA_VISION, PROD_ALTA_NAUSEA, PROD_ALTA_PALIDEZ, PROD_ALTA_DOLORAB, PROD_ALTA_PALP, PROD_ALTA_HIPERV, PROD_ALTA_FATIGA, PROD_ALTA_SUDOR, PROD_ALTA_FALTAAIRE, PROD_ALTA_FRIO, PROD_ALTA_CEFAL, PROD_ALTA_DOLORTOR, PRDIAGINI_ALTA_HC, PRDIAGINI_ALTA_SC, PRDIAGINI_ALTA_TESTORT, COMENTARIOS, PRDIAGINI_ALTA_SC_RES, OPERADOR FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDPROTSINCOPE, FECHA_ALTA, PERDCONO, RECESP, PRIMEPI, NUMEPIPREV, PRIMEREPI, PRECI_ALTA_CALOR, PRECI_ALTA_ORTO, PRECI_ALTA_ALCOHOL, PRECI_ALTA_EMOCION, PRECI_ALTA_AYUNO, PRECI_ALTA_AGLO, PRECI_ALTA_POST, PRECI_ALTA_VENOP, PRECI_ALTA_SIT, PRECI_ALTA_EMB, PROD_ALTA_MAREO, PROD_ALTA_VISION, PROD_ALTA_NAUSEA, PROD_ALTA_PALIDEZ, PROD_ALTA_DOLORAB, PROD_ALTA_PALP, PROD_ALTA_HIPERV, PROD_ALTA_FATIGA, PROD_ALTA_SUDOR, PROD_ALTA_FALTAAIRE, PROD_ALTA_FRIO, PROD_ALTA_CEFAL, PROD_ALTA_DOLORTOR, PRDIAGINI_ALTA_HC, PRDIAGINI_ALTA_SC, PRDIAGINI_ALTA_TESTORT, COMENTARIOS, PRDIAGINI_ALTA_SC_RES, OPERADOR ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDPROTSINCOPE = ?, FECHA_ALTA = ?, PERDCONO = ?, RECESP = ?, PRIMEPI = ?, NUMEPIPREV = ?, PRIMEREPI = ?, PRECI_ALTA_CALOR = ?, PRECI_ALTA_ORTO = ?, PRECI_ALTA_ALCOHOL = ?, PRECI_ALTA_EMOCION = ?, PRECI_ALTA_AYUNO = ?, PRECI_ALTA_AGLO = ?, PRECI_ALTA_POST = ?, PRECI_ALTA_VENOP = ?, PRECI_ALTA_SIT = ?, PRECI_ALTA_EMB = ?, PROD_ALTA_MAREO = ?, PROD_ALTA_VISION = ?, PROD_ALTA_NAUSEA = ?, PROD_ALTA_PALIDEZ = ?, PROD_ALTA_DOLORAB = ?, PROD_ALTA_PALP = ?, PROD_ALTA_HIPERV = ?, PROD_ALTA_FATIGA = ?, PROD_ALTA_SUDOR = ?, PROD_ALTA_FALTAAIRE = ?, PROD_ALTA_FRIO = ?, PROD_ALTA_CEFAL = ?, PROD_ALTA_DOLORTOR = ?, PRDIAGINI_ALTA_HC = ?, PRDIAGINI_ALTA_SC = ?, PRDIAGINI_ALTA_TESTORT = ?, COMENTARIOS = ?, PRDIAGINI_ALTA_SC_RES = ?, OPERADOR = ? WHERE IDPROTSINCOPE = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDPROTSINCOPE = ?";

	/** 
	 * Index of column IDPROTSINCOPE
	 */
	protected static final int COLUMN_IDPROTSINCOPE = 1;

	/** 
	 * Index of column FECHA_ALTA
	 */
	protected static final int COLUMN_FECHA_ALTA = 2;

	/** 
	 * Index of column PERDCONO
	 */
	protected static final int COLUMN_PERDCONO = 3;

	/** 
	 * Index of column RECESP
	 */
	protected static final int COLUMN_RECESP = 4;

	/** 
	 * Index of column PRIMEPI
	 */
	protected static final int COLUMN_PRIMEPI = 5;

	/** 
	 * Index of column NUMEPIPREV
	 */
	protected static final int COLUMN_NUMEPIPREV = 6;

	/** 
	 * Index of column PRIMEREPI
	 */
	protected static final int COLUMN_PRIMEREPI = 7;

	/** 
	 * Index of column PRECI_ALTA_CALOR
	 */
	protected static final int COLUMN_PRECI_ALTA_CALOR = 8;

	/** 
	 * Index of column PRECI_ALTA_ORTO
	 */
	protected static final int COLUMN_PRECI_ALTA_ORTO = 9;

	/** 
	 * Index of column PRECI_ALTA_ALCOHOL
	 */
	protected static final int COLUMN_PRECI_ALTA_ALCOHOL = 10;

	/** 
	 * Index of column PRECI_ALTA_EMOCION
	 */
	protected static final int COLUMN_PRECI_ALTA_EMOCION = 11;

	/** 
	 * Index of column PRECI_ALTA_AYUNO
	 */
	protected static final int COLUMN_PRECI_ALTA_AYUNO = 12;

	/** 
	 * Index of column PRECI_ALTA_AGLO
	 */
	protected static final int COLUMN_PRECI_ALTA_AGLO = 13;

	/** 
	 * Index of column PRECI_ALTA_POST
	 */
	protected static final int COLUMN_PRECI_ALTA_POST = 14;

	/** 
	 * Index of column PRECI_ALTA_VENOP
	 */
	protected static final int COLUMN_PRECI_ALTA_VENOP = 15;

	/** 
	 * Index of column PRECI_ALTA_SIT
	 */
	protected static final int COLUMN_PRECI_ALTA_SIT = 16;

	/** 
	 * Index of column PRECI_ALTA_EMB
	 */
	protected static final int COLUMN_PRECI_ALTA_EMB = 17;

	/** 
	 * Index of column PROD_ALTA_MAREO
	 */
	protected static final int COLUMN_PROD_ALTA_MAREO = 18;

	/** 
	 * Index of column PROD_ALTA_VISION
	 */
	protected static final int COLUMN_PROD_ALTA_VISION = 19;

	/** 
	 * Index of column PROD_ALTA_NAUSEA
	 */
	protected static final int COLUMN_PROD_ALTA_NAUSEA = 20;

	/** 
	 * Index of column PROD_ALTA_PALIDEZ
	 */
	protected static final int COLUMN_PROD_ALTA_PALIDEZ = 21;

	/** 
	 * Index of column PROD_ALTA_DOLORAB
	 */
	protected static final int COLUMN_PROD_ALTA_DOLORAB = 22;

	/** 
	 * Index of column PROD_ALTA_PALP
	 */
	protected static final int COLUMN_PROD_ALTA_PALP = 23;

	/** 
	 * Index of column PROD_ALTA_HIPERV
	 */
	protected static final int COLUMN_PROD_ALTA_HIPERV = 24;

	/** 
	 * Index of column PROD_ALTA_FATIGA
	 */
	protected static final int COLUMN_PROD_ALTA_FATIGA = 25;

	/** 
	 * Index of column PROD_ALTA_SUDOR
	 */
	protected static final int COLUMN_PROD_ALTA_SUDOR = 26;

	/** 
	 * Index of column PROD_ALTA_FALTAAIRE
	 */
	protected static final int COLUMN_PROD_ALTA_FALTAAIRE = 27;

	/** 
	 * Index of column PROD_ALTA_FRIO
	 */
	protected static final int COLUMN_PROD_ALTA_FRIO = 28;

	/** 
	 * Index of column PROD_ALTA_CEFAL
	 */
	protected static final int COLUMN_PROD_ALTA_CEFAL = 29;

	/** 
	 * Index of column PROD_ALTA_DOLORTOR
	 */
	protected static final int COLUMN_PROD_ALTA_DOLORTOR = 30;

	/** 
	 * Index of column PRDIAGINI_ALTA_HC
	 */
	protected static final int COLUMN_PRDIAGINI_ALTA_HC = 31;

	/** 
	 * Index of column PRDIAGINI_ALTA_SC
	 */
	protected static final int COLUMN_PRDIAGINI_ALTA_SC = 32;

	/** 
	 * Index of column PRDIAGINI_ALTA_TESTORT
	 */
	protected static final int COLUMN_PRDIAGINI_ALTA_TESTORT = 33;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 34;

	/** 
	 * Index of column PRDIAGINI_ALTA_SC_RES
	 */
	protected static final int COLUMN_PRDIAGINI_ALTA_SC_RES = 35;

	/** 
	 * Index of column OPERADOR
	 */
	protected static final int COLUMN_OPERADOR = 36;

	
	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 36;

	/** 
	 * Index of primary-key column IDPROTSINCOPE
	 */
	protected static final int PK_COLUMN_IDPROTSINCOPE = 1;

	/** 
	 * Inserts a new row in the prot_sincope_alta table.
	 */
	public ProtSincopeAltaPk insert(ProtSincopeAlta dto) throws ProtSincopeAltaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			if (dto.getIdprotsincope() != null) {
				stmt.setInt( index++, dto.getIdprotsincope().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFechaAlta()==null ? null : new java.sql.Date( dto.getFechaAlta().getTime() ) );
			if (dto.getPerdcono() != null) {
				stmt.setInt( index++, dto.getPerdcono().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getRecesp() != null) {
				stmt.setInt( index++, dto.getRecesp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPrimepi() != null) {
				stmt.setInt( index++, dto.getPrimepi().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNumepiprev() );
			stmt.setString( index++, dto.getPrimerepi() );
			if (dto.getPreciAltaCalor() != null) {
				stmt.setInt( index++, dto.getPreciAltaCalor().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaOrto() != null) {
				stmt.setInt( index++, dto.getPreciAltaOrto().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaAlcohol() != null) {
				stmt.setInt( index++, dto.getPreciAltaAlcohol().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaEmocion() != null) {
				stmt.setInt( index++, dto.getPreciAltaEmocion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaAyuno() != null) {
				stmt.setInt( index++, dto.getPreciAltaAyuno().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaAglo() != null) {
				stmt.setInt( index++, dto.getPreciAltaAglo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaPost() != null) {
				stmt.setInt( index++, dto.getPreciAltaPost().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaVenop() != null) {
				stmt.setInt( index++, dto.getPreciAltaVenop().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaSit() != null) {
				stmt.setInt( index++, dto.getPreciAltaSit().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaEmb() != null) {
				stmt.setInt( index++, dto.getPreciAltaEmb().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaMareo() != null) {
				stmt.setInt( index++, dto.getProdAltaMareo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaVision() != null) {
				stmt.setInt( index++, dto.getProdAltaVision().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaNausea() != null) {
				stmt.setInt( index++, dto.getProdAltaNausea().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaPalidez() != null) {
				stmt.setInt( index++, dto.getProdAltaPalidez().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaDolorab() != null) {
				stmt.setInt( index++, dto.getProdAltaDolorab().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaPalp() != null) {
				stmt.setInt( index++, dto.getProdAltaPalp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaHiperv() != null) {
				stmt.setInt( index++, dto.getProdAltaHiperv().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaFatiga() != null) {
				stmt.setInt( index++, dto.getProdAltaFatiga().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaSudor() != null) {
				stmt.setInt( index++, dto.getProdAltaSudor().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaFaltaaire() != null) {
				stmt.setInt( index++, dto.getProdAltaFaltaaire().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaFrio() != null) {
				stmt.setInt( index++, dto.getProdAltaFrio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaCefal() != null) {
				stmt.setInt( index++, dto.getProdAltaCefal().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaDolortor() != null) {
				stmt.setInt( index++, dto.getProdAltaDolortor().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPrdiaginiAltaHc() != null) {
				stmt.setInt( index++, dto.getPrdiaginiAltaHc().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPrdiaginiAltaSc() != null) {
				stmt.setInt( index++, dto.getPrdiaginiAltaSc().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPrdiaginiAltaTestort() != null) {
				stmt.setInt( index++, dto.getPrdiaginiAltaTestort().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getComentarios() );
			if (dto.getPrdiaginiAltaScRes() != null) {
				stmt.setInt( index++, dto.getPrdiaginiAltaScRes().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			stmt.setString( index++, dto.getOperador() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.insercion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProtSincopeAltaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the prot_sincope_alta table.
	 */
	public void update(ProtSincopeAltaPk pk, ProtSincopeAlta dto) throws ProtSincopeAltaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdprotsincope() != null) {
				stmt.setInt( index++, dto.getIdprotsincope().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFechaAlta()==null ? null : new java.sql.Date( dto.getFechaAlta().getTime() ) );
			if (dto.getPerdcono() != null) {
				stmt.setInt( index++, dto.getPerdcono().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getRecesp() != null) {
				stmt.setInt( index++, dto.getRecesp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPrimepi() != null) {
				stmt.setInt( index++, dto.getPrimepi().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNumepiprev() );
			stmt.setString( index++, dto.getPrimerepi() );
			if (dto.getPreciAltaCalor() != null) {
				stmt.setInt( index++, dto.getPreciAltaCalor().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaOrto() != null) {
				stmt.setInt( index++, dto.getPreciAltaOrto().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaAlcohol() != null) {
				stmt.setInt( index++, dto.getPreciAltaAlcohol().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaEmocion() != null) {
				stmt.setInt( index++, dto.getPreciAltaEmocion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaAyuno() != null) {
				stmt.setInt( index++, dto.getPreciAltaAyuno().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaAglo() != null) {
				stmt.setInt( index++, dto.getPreciAltaAglo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaPost() != null) {
				stmt.setInt( index++, dto.getPreciAltaPost().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaVenop() != null) {
				stmt.setInt( index++, dto.getPreciAltaVenop().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaSit() != null) {
				stmt.setInt( index++, dto.getPreciAltaSit().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPreciAltaEmb() != null) {
				stmt.setInt( index++, dto.getPreciAltaEmb().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaMareo() != null) {
				stmt.setInt( index++, dto.getProdAltaMareo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaVision() != null) {
				stmt.setInt( index++, dto.getProdAltaVision().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaNausea() != null) {
				stmt.setInt( index++, dto.getProdAltaNausea().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaPalidez() != null) {
				stmt.setInt( index++, dto.getProdAltaPalidez().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaDolorab() != null) {
				stmt.setInt( index++, dto.getProdAltaDolorab().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaPalp() != null) {
				stmt.setInt( index++, dto.getProdAltaPalp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaHiperv() != null) {
				stmt.setInt( index++, dto.getProdAltaHiperv().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaFatiga() != null) {
				stmt.setInt( index++, dto.getProdAltaFatiga().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaSudor() != null) {
				stmt.setInt( index++, dto.getProdAltaSudor().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaFaltaaire() != null) {
				stmt.setInt( index++, dto.getProdAltaFaltaaire().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaFrio() != null) {
				stmt.setInt( index++, dto.getProdAltaFrio().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaCefal() != null) {
				stmt.setInt( index++, dto.getProdAltaCefal().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getProdAltaDolortor() != null) {
				stmt.setInt( index++, dto.getProdAltaDolortor().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPrdiaginiAltaHc() != null) {
				stmt.setInt( index++, dto.getPrdiaginiAltaHc().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPrdiaginiAltaSc() != null) {
				stmt.setInt( index++, dto.getPrdiaginiAltaSc().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPrdiaginiAltaTestort() != null) {
				stmt.setInt( index++, dto.getPrdiaginiAltaTestort().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getComentarios() );
			if (dto.getPrdiaginiAltaScRes() != null) {
				stmt.setInt( index++, dto.getPrdiaginiAltaScRes().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			stmt.setString( index++, dto.getOperador() );
			if (pk.getIdprotsincope() != null) {
				stmt.setInt( 37, pk.getIdprotsincope().intValue() );
			} else {
				stmt.setNull(37, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProtSincopeAltaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the prot_sincope_alta table.
	 */
	public void delete(ProtSincopeAltaPk pk) throws ProtSincopeAltaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdprotsincope() != null) {
				stmt.setInt( 1, pk.getIdprotsincope().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(pk.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProtSincopeAltaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the prot_sincope_alta table that matches the specified primary-key value.
	 */
	public ProtSincopeAlta findByPrimaryKey(ProtSincopeAltaPk pk) throws ProtSincopeAltaDaoException
	{
		return findByPrimaryKey( pk.getIdprotsincope() );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'IDPROTSINCOPE = :idprotsincope'.
	 */
	public ProtSincopeAlta findByPrimaryKey(Integer idprotsincope) throws ProtSincopeAltaDaoException
	{
		ProtSincopeAlta ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDPROTSINCOPE = ?", new Object[] { idprotsincope } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria ''.
	 */
	public ProtSincopeAlta[] findAll() throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDPROTSINCOPE", null );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'IDPROTSINCOPE = :idprotsincope'.
	 */
	public ProtSincopeAlta[] findWhereIdprotsincopeEquals(int idprotsincope) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPROTSINCOPE = ? ORDER BY IDPROTSINCOPE", new Object[] {  new Integer(idprotsincope) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'FECHA_ALTA = :fechaAlta'.
	 */
	public ProtSincopeAlta[] findWhereFechaAltaEquals(Date fechaAlta) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_ALTA = ? ORDER BY FECHA_ALTA", new Object[] { fechaAlta==null ? null : new java.sql.Date( fechaAlta.getTime() ) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PERDCONO = :perdcono'.
	 */
	public ProtSincopeAlta[] findWherePerdconoEquals(int perdcono) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PERDCONO = ? ORDER BY PERDCONO", new Object[] {  new Integer(perdcono) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'RECESP = :recesp'.
	 */
	public ProtSincopeAlta[] findWhereRecespEquals(int recesp) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECESP = ? ORDER BY RECESP", new Object[] {  new Integer(recesp) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PRIMEPI = :primepi'.
	 */
	public ProtSincopeAlta[] findWherePrimepiEquals(int primepi) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRIMEPI = ? ORDER BY PRIMEPI", new Object[] {  new Integer(primepi) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'NUMEPIPREV = :numepiprev'.
	 */
	public ProtSincopeAlta[] findWhereNumepiprevEquals(String numepiprev) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMEPIPREV = ? ORDER BY NUMEPIPREV", new Object[] { numepiprev } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PRIMEREPI = :primerepi'.
	 */
	public ProtSincopeAlta[] findWherePrimerepiEquals(String primerepi) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRIMEREPI = ? ORDER BY PRIMEREPI", new Object[] { primerepi } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PRECI_ALTA_CALOR = :preciAltaCalor'.
	 */
	public ProtSincopeAlta[] findWherePreciAltaCalorEquals(int preciAltaCalor) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECI_ALTA_CALOR = ? ORDER BY PRECI_ALTA_CALOR", new Object[] {  new Integer(preciAltaCalor) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PRECI_ALTA_ORTO = :preciAltaOrto'.
	 */
	public ProtSincopeAlta[] findWherePreciAltaOrtoEquals(int preciAltaOrto) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECI_ALTA_ORTO = ? ORDER BY PRECI_ALTA_ORTO", new Object[] {  new Integer(preciAltaOrto) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PRECI_ALTA_ALCOHOL = :preciAltaAlcohol'.
	 */
	public ProtSincopeAlta[] findWherePreciAltaAlcoholEquals(int preciAltaAlcohol) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECI_ALTA_ALCOHOL = ? ORDER BY PRECI_ALTA_ALCOHOL", new Object[] {  new Integer(preciAltaAlcohol) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PRECI_ALTA_EMOCION = :preciAltaEmocion'.
	 */
	public ProtSincopeAlta[] findWherePreciAltaEmocionEquals(int preciAltaEmocion) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECI_ALTA_EMOCION = ? ORDER BY PRECI_ALTA_EMOCION", new Object[] {  new Integer(preciAltaEmocion) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PRECI_ALTA_AYUNO = :preciAltaAyuno'.
	 */
	public ProtSincopeAlta[] findWherePreciAltaAyunoEquals(int preciAltaAyuno) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECI_ALTA_AYUNO = ? ORDER BY PRECI_ALTA_AYUNO", new Object[] {  new Integer(preciAltaAyuno) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PRECI_ALTA_AGLO = :preciAltaAglo'.
	 */
	public ProtSincopeAlta[] findWherePreciAltaAgloEquals(int preciAltaAglo) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECI_ALTA_AGLO = ? ORDER BY PRECI_ALTA_AGLO", new Object[] {  new Integer(preciAltaAglo) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PRECI_ALTA_POST = :preciAltaPost'.
	 */
	public ProtSincopeAlta[] findWherePreciAltaPostEquals(int preciAltaPost) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECI_ALTA_POST = ? ORDER BY PRECI_ALTA_POST", new Object[] {  new Integer(preciAltaPost) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PRECI_ALTA_VENOP = :preciAltaVenop'.
	 */
	public ProtSincopeAlta[] findWherePreciAltaVenopEquals(int preciAltaVenop) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECI_ALTA_VENOP = ? ORDER BY PRECI_ALTA_VENOP", new Object[] {  new Integer(preciAltaVenop) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PRECI_ALTA_SIT = :preciAltaSit'.
	 */
	public ProtSincopeAlta[] findWherePreciAltaSitEquals(int preciAltaSit) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECI_ALTA_SIT = ? ORDER BY PRECI_ALTA_SIT", new Object[] {  new Integer(preciAltaSit) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PRECI_ALTA_EMB = :preciAltaEmb'.
	 */
	public ProtSincopeAlta[] findWherePreciAltaEmbEquals(int preciAltaEmb) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECI_ALTA_EMB = ? ORDER BY PRECI_ALTA_EMB", new Object[] {  new Integer(preciAltaEmb) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PROD_ALTA_MAREO = :prodAltaMareo'.
	 */
	public ProtSincopeAlta[] findWhereProdAltaMareoEquals(int prodAltaMareo) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROD_ALTA_MAREO = ? ORDER BY PROD_ALTA_MAREO", new Object[] {  new Integer(prodAltaMareo) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PROD_ALTA_VISION = :prodAltaVision'.
	 */
	public ProtSincopeAlta[] findWhereProdAltaVisionEquals(int prodAltaVision) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROD_ALTA_VISION = ? ORDER BY PROD_ALTA_VISION", new Object[] {  new Integer(prodAltaVision) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PROD_ALTA_NAUSEA = :prodAltaNausea'.
	 */
	public ProtSincopeAlta[] findWhereProdAltaNauseaEquals(int prodAltaNausea) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROD_ALTA_NAUSEA = ? ORDER BY PROD_ALTA_NAUSEA", new Object[] {  new Integer(prodAltaNausea) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PROD_ALTA_PALIDEZ = :prodAltaPalidez'.
	 */
	public ProtSincopeAlta[] findWhereProdAltaPalidezEquals(int prodAltaPalidez) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROD_ALTA_PALIDEZ = ? ORDER BY PROD_ALTA_PALIDEZ", new Object[] {  new Integer(prodAltaPalidez) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PROD_ALTA_DOLORAB = :prodAltaDolorab'.
	 */
	public ProtSincopeAlta[] findWhereProdAltaDolorabEquals(int prodAltaDolorab) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROD_ALTA_DOLORAB = ? ORDER BY PROD_ALTA_DOLORAB", new Object[] {  new Integer(prodAltaDolorab) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PROD_ALTA_PALP = :prodAltaPalp'.
	 */
	public ProtSincopeAlta[] findWhereProdAltaPalpEquals(int prodAltaPalp) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROD_ALTA_PALP = ? ORDER BY PROD_ALTA_PALP", new Object[] {  new Integer(prodAltaPalp) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PROD_ALTA_HIPERV = :prodAltaHiperv'.
	 */
	public ProtSincopeAlta[] findWhereProdAltaHipervEquals(int prodAltaHiperv) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROD_ALTA_HIPERV = ? ORDER BY PROD_ALTA_HIPERV", new Object[] {  new Integer(prodAltaHiperv) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PROD_ALTA_FATIGA = :prodAltaFatiga'.
	 */
	public ProtSincopeAlta[] findWhereProdAltaFatigaEquals(int prodAltaFatiga) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROD_ALTA_FATIGA = ? ORDER BY PROD_ALTA_FATIGA", new Object[] {  new Integer(prodAltaFatiga) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PROD_ALTA_SUDOR = :prodAltaSudor'.
	 */
	public ProtSincopeAlta[] findWhereProdAltaSudorEquals(int prodAltaSudor) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROD_ALTA_SUDOR = ? ORDER BY PROD_ALTA_SUDOR", new Object[] {  new Integer(prodAltaSudor) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PROD_ALTA_FALTAAIRE = :prodAltaFaltaaire'.
	 */
	public ProtSincopeAlta[] findWhereProdAltaFaltaaireEquals(int prodAltaFaltaaire) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROD_ALTA_FALTAAIRE = ? ORDER BY PROD_ALTA_FALTAAIRE", new Object[] {  new Integer(prodAltaFaltaaire) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PROD_ALTA_FRIO = :prodAltaFrio'.
	 */
	public ProtSincopeAlta[] findWhereProdAltaFrioEquals(int prodAltaFrio) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROD_ALTA_FRIO = ? ORDER BY PROD_ALTA_FRIO", new Object[] {  new Integer(prodAltaFrio) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PROD_ALTA_CEFAL = :prodAltaCefal'.
	 */
	public ProtSincopeAlta[] findWhereProdAltaCefalEquals(int prodAltaCefal) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROD_ALTA_CEFAL = ? ORDER BY PROD_ALTA_CEFAL", new Object[] {  new Integer(prodAltaCefal) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PROD_ALTA_DOLORTOR = :prodAltaDolortor'.
	 */
	public ProtSincopeAlta[] findWhereProdAltaDolortorEquals(int prodAltaDolortor) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROD_ALTA_DOLORTOR = ? ORDER BY PROD_ALTA_DOLORTOR", new Object[] {  new Integer(prodAltaDolortor) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PRDIAGINI_ALTA_HC = :prdiaginiAltaHc'.
	 */
	public ProtSincopeAlta[] findWherePrdiaginiAltaHcEquals(int prdiaginiAltaHc) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRDIAGINI_ALTA_HC = ? ORDER BY PRDIAGINI_ALTA_HC", new Object[] {  new Integer(prdiaginiAltaHc) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PRDIAGINI_ALTA_SC = :prdiaginiAltaSc'.
	 */
	public ProtSincopeAlta[] findWherePrdiaginiAltaScEquals(int prdiaginiAltaSc) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRDIAGINI_ALTA_SC = ? ORDER BY PRDIAGINI_ALTA_SC", new Object[] {  new Integer(prdiaginiAltaSc) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PRDIAGINI_ALTA_TESTORT = :prdiaginiAltaTestort'.
	 */
	public ProtSincopeAlta[] findWherePrdiaginiAltaTestortEquals(int prdiaginiAltaTestort) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRDIAGINI_ALTA_TESTORT = ? ORDER BY PRDIAGINI_ALTA_TESTORT", new Object[] {  new Integer(prdiaginiAltaTestort) } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ProtSincopeAlta[] findWhereComentariosEquals(String comentarios) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'PRDIAGINI_ALTA_SC_RES = :prdiaginiAltaScRes'.
	 */
	public ProtSincopeAlta[] findWherePrdiaginiAltaScResEquals(int prdiaginiAltaScRes) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRDIAGINI_ALTA_SC_RES = ? ORDER BY PRDIAGINI_ALTA_SC_RES", new Object[] {  new Integer(prdiaginiAltaScRes) } );
	}
	
	/** 
	 * Returns all rows from the prot_sincope_alta table that match the criteria 'OPERADOR = :operador'.
	 */
	public ProtSincopeAlta[] findWhereOperadorEquals(String operador) throws ProtSincopeAltaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OPERADOR = ? ORDER BY OPERADOR", new Object[] { operador } );
	}
	
	/**
	 * Method 'ProtSincopeAltaDaoImpl'
	 * 
	 */
	public ProtSincopeAltaDaoImpl()
	{
	}

	public ProtSincopeAltaDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ProtSincopeAltaDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	/**
	 * Method 'ProtSincopeAltaDaoImpl'
	 * 
	 * @param userConn
	 */
	public ProtSincopeAltaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "prot_sincope_alta";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ProtSincopeAlta fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ProtSincopeAlta dto = new ProtSincopeAlta();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ProtSincopeAlta[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ProtSincopeAlta dto = new ProtSincopeAlta();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ProtSincopeAlta ret[] = new ProtSincopeAlta[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ProtSincopeAlta dto, ResultSet rs) throws SQLException
	{
		dto.setIdprotsincope( new Integer( rs.getInt(COLUMN_IDPROTSINCOPE) ) );
		dto.setFechaAlta( rs.getDate(COLUMN_FECHA_ALTA ) );
		dto.setPerdcono( new Integer( rs.getInt(COLUMN_PERDCONO) ) );
		if (rs.wasNull()) {
			dto.setPerdcono( null );
		}
		
		dto.setRecesp( new Integer( rs.getInt(COLUMN_RECESP) ) );
		if (rs.wasNull()) {
			dto.setRecesp( null );
		}
		
		dto.setPrimepi( new Integer( rs.getInt(COLUMN_PRIMEPI) ) );
		if (rs.wasNull()) {
			dto.setPrimepi( null );
		}
		
		dto.setNumepiprev( rs.getString( COLUMN_NUMEPIPREV ) );
		dto.setPrimerepi( rs.getString( COLUMN_PRIMEREPI ) );
		dto.setPreciAltaCalor( new Integer( rs.getInt(COLUMN_PRECI_ALTA_CALOR) ) );
		if (rs.wasNull()) {
			dto.setPreciAltaCalor( null );
		}
		
		dto.setPreciAltaOrto( new Integer( rs.getInt(COLUMN_PRECI_ALTA_ORTO) ) );
		if (rs.wasNull()) {
			dto.setPreciAltaOrto( null );
		}
		
		dto.setPreciAltaAlcohol( new Integer( rs.getInt(COLUMN_PRECI_ALTA_ALCOHOL) ) );
		if (rs.wasNull()) {
			dto.setPreciAltaAlcohol( null );
		}
		
		dto.setPreciAltaEmocion( new Integer( rs.getInt(COLUMN_PRECI_ALTA_EMOCION) ) );
		if (rs.wasNull()) {
			dto.setPreciAltaEmocion( null );
		}
		
		dto.setPreciAltaAyuno( new Integer( rs.getInt(COLUMN_PRECI_ALTA_AYUNO) ) );
		if (rs.wasNull()) {
			dto.setPreciAltaAyuno( null );
		}
		
		dto.setPreciAltaAglo( new Integer( rs.getInt(COLUMN_PRECI_ALTA_AGLO) ) );
		if (rs.wasNull()) {
			dto.setPreciAltaAglo( null );
		}
		
		dto.setPreciAltaPost( new Integer( rs.getInt(COLUMN_PRECI_ALTA_POST) ) );
		if (rs.wasNull()) {
			dto.setPreciAltaPost( null );
		}
		
		dto.setPreciAltaVenop( new Integer( rs.getInt(COLUMN_PRECI_ALTA_VENOP) ) );
		if (rs.wasNull()) {
			dto.setPreciAltaVenop( null );
		}
		
		dto.setPreciAltaSit( new Integer( rs.getInt(COLUMN_PRECI_ALTA_SIT) ) );
		if (rs.wasNull()) {
			dto.setPreciAltaSit( null );
		}
		
		dto.setPreciAltaEmb( new Integer( rs.getInt(COLUMN_PRECI_ALTA_EMB) ) );
		if (rs.wasNull()) {
			dto.setPreciAltaEmb( null );
		}
		
		dto.setProdAltaMareo( new Integer( rs.getInt(COLUMN_PROD_ALTA_MAREO) ) );
		if (rs.wasNull()) {
			dto.setProdAltaMareo( null );
		}
		
		dto.setProdAltaVision( new Integer( rs.getInt(COLUMN_PROD_ALTA_VISION) ) );
		if (rs.wasNull()) {
			dto.setProdAltaVision( null );
		}
		
		dto.setProdAltaNausea( new Integer( rs.getInt(COLUMN_PROD_ALTA_NAUSEA) ) );
		if (rs.wasNull()) {
			dto.setProdAltaNausea( null );
		}
		
		dto.setProdAltaPalidez( new Integer( rs.getInt(COLUMN_PROD_ALTA_PALIDEZ) ) );
		if (rs.wasNull()) {
			dto.setProdAltaPalidez( null );
		}
		
		dto.setProdAltaDolorab( new Integer( rs.getInt(COLUMN_PROD_ALTA_DOLORAB) ) );
		if (rs.wasNull()) {
			dto.setProdAltaDolorab( null );
		}
		
		dto.setProdAltaPalp( new Integer( rs.getInt(COLUMN_PROD_ALTA_PALP) ) );
		if (rs.wasNull()) {
			dto.setProdAltaPalp( null );
		}
		
		dto.setProdAltaHiperv( new Integer( rs.getInt(COLUMN_PROD_ALTA_HIPERV) ) );
		if (rs.wasNull()) {
			dto.setProdAltaHiperv( null );
		}
		
		dto.setProdAltaFatiga( new Integer( rs.getInt(COLUMN_PROD_ALTA_FATIGA) ) );
		if (rs.wasNull()) {
			dto.setProdAltaFatiga( null );
		}
		
		dto.setProdAltaSudor( new Integer( rs.getInt(COLUMN_PROD_ALTA_SUDOR) ) );
		if (rs.wasNull()) {
			dto.setProdAltaSudor( null );
		}
		
		dto.setProdAltaFaltaaire( new Integer( rs.getInt(COLUMN_PROD_ALTA_FALTAAIRE) ) );
		if (rs.wasNull()) {
			dto.setProdAltaFaltaaire( null );
		}
		
		dto.setProdAltaFrio( new Integer( rs.getInt(COLUMN_PROD_ALTA_FRIO) ) );
		if (rs.wasNull()) {
			dto.setProdAltaFrio( null );
		}
		
		dto.setProdAltaCefal( new Integer( rs.getInt(COLUMN_PROD_ALTA_CEFAL) ) );
		if (rs.wasNull()) {
			dto.setProdAltaCefal( null );
		}
		
		dto.setProdAltaDolortor( new Integer( rs.getInt(COLUMN_PROD_ALTA_DOLORTOR) ) );
		if (rs.wasNull()) {
			dto.setProdAltaDolortor( null );
		}
		
		dto.setPrdiaginiAltaHc( new Integer( rs.getInt(COLUMN_PRDIAGINI_ALTA_HC) ) );
		if (rs.wasNull()) {
			dto.setPrdiaginiAltaHc( null );
		}
		
		dto.setPrdiaginiAltaSc( new Integer( rs.getInt(COLUMN_PRDIAGINI_ALTA_SC) ) );
		if (rs.wasNull()) {
			dto.setPrdiaginiAltaSc( null );
		}
		
		dto.setPrdiaginiAltaTestort( new Integer( rs.getInt(COLUMN_PRDIAGINI_ALTA_TESTORT) ) );
		if (rs.wasNull()) {
			dto.setPrdiaginiAltaTestort( null );
		}
		
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setPrdiaginiAltaScRes( new Integer( rs.getInt(COLUMN_PRDIAGINI_ALTA_SC_RES) ) );
		if (rs.wasNull()) {
			dto.setPrdiaginiAltaScRes( null );
		}
		
		dto.setOperador( rs.getString( COLUMN_OPERADOR ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ProtSincopeAlta dto)
	{
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the specified arbitrary SQL statement
	 */
	public ProtSincopeAlta[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProtSincopeAltaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProtSincopeAltaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the prot_sincope_alta table that match the specified arbitrary SQL statement
	 */
	public ProtSincopeAlta[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProtSincopeAltaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProtSincopeAltaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
