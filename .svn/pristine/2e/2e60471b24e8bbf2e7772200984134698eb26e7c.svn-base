/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface ComplicacionDao
{
	/** 
	 * Inserts a new row in the complicacion table.
	 */
	public ComplicacionPk insert(Complicacion dto) throws ComplicacionDaoException;

	/** 
	 * Updates a single row in the complicacion table.
	 */
	public void update(ComplicacionPk pk, Complicacion dto) throws ComplicacionDaoException;

	/** 
	 * Deletes a single row in the complicacion table.
	 */
	public void delete(ComplicacionPk pk) throws ComplicacionDaoException;

	/** 
	 * Returns the rows from the complicacion table that matches the specified primary-key value.
	 */
	public Complicacion findByPrimaryKey(ComplicacionPk pk) throws ComplicacionDaoException;

	/** 
	 * Returns all rows from the complicacion table that match the criteria 'IDCOMPL = :idcompl'.
	 */
	public Complicacion findByPrimaryKey(int idcompl) throws ComplicacionDaoException;

	/** 
	 * Returns all rows from the complicacion table that match the criteria ''.
	 */
	public Complicacion[] findAll() throws ComplicacionDaoException;

	/** 
	 * Returns all rows from the complicacion table that match the criteria 'IDCOMPL = :idcompl'.
	 */
	public Complicacion[] findWhereIdcomplEquals(int idcompl) throws ComplicacionDaoException;

	/** 
	 * Returns all rows from the complicacion table that match the criteria 'TIPO = :tipo'.
	 */
	public Complicacion[] findWhereTipoEquals(String tipo) throws ComplicacionDaoException;

	/** 
	 * Returns all rows from the complicacion table that match the criteria 'CLASE = :clase'.
	 */
	public Complicacion[] findWhereClaseEquals(String clase) throws ComplicacionDaoException;

	/** 
	 * Returns all rows from the complicacion table that match the criteria 'CARACTER = :caracter'.
	 */
	public Complicacion[] findWhereCaracterEquals(int caracter) throws ComplicacionDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the complicacion table that match the specified arbitrary SQL statement
	 */
	public Complicacion[] findByDynamicSelect(String sql, Object[] sqlParams) throws ComplicacionDaoException;

	/** 
	 * Returns all rows from the complicacion table that match the specified arbitrary SQL statement
	 */
	public Complicacion[] findByDynamicWhere(String sql, Object[] sqlParams) throws ComplicacionDaoException;

}
