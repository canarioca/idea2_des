/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.util.UtilCodifi;
import com.sorin.idea.util.UtilFechas;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ArrRegistradorDaoImpl extends AbstractDAO implements ArrRegistradorDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
	private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_PACIENTE, ID_REGISTRADOR, FECHA, NPROC, REFERIDOR, INDICACION, INDICACIONSINCOPE, INDICACIONSINCOPEN, OP_ENF, OP_MED, IMPLANTE_SALA, IMPLANTE_MODELO, IMPLANTE_ZONA, CARDIOPATIA, SHELDON_A, SHELDON_B, SHELDON_C, SHELDON_D, SHELDON_E, SHELDON_F, SHELDON_G, RES_N1, RES_N2, EXPLANTE_FECHA, EXPLANTE_OP_ENF, EXPLANTE_OPMED, EXPLANTE_DIAGNOSTICO, COMENTARIOS, COMPLICACIONES, EPISODIO, NSERIE, IDMODELOREG FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_PACIENTE, ID_REGISTRADOR, FECHA, NPROC, REFERIDOR, INDICACION, INDICACIONSINCOPE, INDICACIONSINCOPEN, OP_ENF, OP_MED, IMPLANTE_SALA, IMPLANTE_MODELO, IMPLANTE_ZONA, CARDIOPATIA, SHELDON_A, SHELDON_B, SHELDON_C, SHELDON_D, SHELDON_E, SHELDON_F, SHELDON_G, RES_N1, RES_N2, EXPLANTE_FECHA, EXPLANTE_OP_ENF, EXPLANTE_OPMED, EXPLANTE_DIAGNOSTICO, COMENTARIOS, COMPLICACIONES, EPISODIO, NSERIE, IDMODELOREG ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_PACIENTE = ?, ID_REGISTRADOR = ?, FECHA = ?, NPROC = ?, REFERIDOR = ?, INDICACION = ?, INDICACIONSINCOPE = ?, INDICACIONSINCOPEN = ?, OP_ENF = ?, OP_MED = ?, IMPLANTE_SALA = ?, IMPLANTE_MODELO = ?, IMPLANTE_ZONA = ?, CARDIOPATIA = ?, SHELDON_A = ?, SHELDON_B = ?, SHELDON_C = ?, SHELDON_D = ?, SHELDON_E = ?, SHELDON_F = ?, SHELDON_G = ?, RES_N1 = ?, RES_N2 = ?, EXPLANTE_FECHA = ?, EXPLANTE_OP_ENF = ?, EXPLANTE_OPMED = ?, EXPLANTE_DIAGNOSTICO = ?, COMENTARIOS = ?, COMPLICACIONES = ?, EPISODIO = ?, NSERIE = ?, IDMODELOREG = ? WHERE ID_REGISTRADOR = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_REGISTRADOR = ?";

	/** 
	 * Index of column ID_PACIENTE
	 */
	protected static final int COLUMN_ID_PACIENTE = 1;

	/** 
	 * Index of column ID_REGISTRADOR
	 */
	protected static final int COLUMN_ID_REGISTRADOR = 2;

	/** 
	 * Index of column FECHA
	 */
	protected static final int COLUMN_FECHA = 3;

	/** 
	 * Index of column NPROC
	 */
	protected static final int COLUMN_NPROC = 4;

	/** 
	 * Index of column REFERIDOR
	 */
	protected static final int COLUMN_REFERIDOR = 5;

	/** 
	 * Index of column INDICACION
	 */
	protected static final int COLUMN_INDICACION = 6;

	/** 
	 * Index of column INDICACIONSINCOPE
	 */
	protected static final int COLUMN_INDICACIONSINCOPE = 7;

	/** 
	 * Index of column INDICACIONSINCOPEN
	 */
	protected static final int COLUMN_INDICACIONSINCOPEN = 8;

	/** 
	 * Index of column OP_ENF
	 */
	protected static final int COLUMN_OP_ENF = 9;

	/** 
	 * Index of column OP_MED
	 */
	protected static final int COLUMN_OP_MED = 10;

	/** 
	 * Index of column IMPLANTE_SALA
	 */
	protected static final int COLUMN_IMPLANTE_SALA = 11;

	/** 
	 * Index of column IMPLANTE_MODELO
	 */
	protected static final int COLUMN_IMPLANTE_MODELO = 12;

	/** 
	 * Index of column IMPLANTE_ZONA
	 */
	protected static final int COLUMN_IMPLANTE_ZONA = 13;

	/** 
	 * Index of column CARDIOPATIA
	 */
	protected static final int COLUMN_CARDIOPATIA = 14;

	/** 
	 * Index of column SHELDON_A
	 */
	protected static final int COLUMN_SHELDON_A = 15;

	/** 
	 * Index of column SHELDON_B
	 */
	protected static final int COLUMN_SHELDON_B = 16;

	/** 
	 * Index of column SHELDON_C
	 */
	protected static final int COLUMN_SHELDON_C = 17;

	/** 
	 * Index of column SHELDON_D
	 */
	protected static final int COLUMN_SHELDON_D = 18;

	/** 
	 * Index of column SHELDON_E
	 */
	protected static final int COLUMN_SHELDON_E = 19;

	/** 
	 * Index of column SHELDON_F
	 */
	protected static final int COLUMN_SHELDON_F = 20;

	/** 
	 * Index of column SHELDON_G
	 */
	protected static final int COLUMN_SHELDON_G = 21;

	/** 
	 * Index of column RES_N1
	 */
	protected static final int COLUMN_RES_N1 = 22;

	/** 
	 * Index of column RES_N2
	 */
	protected static final int COLUMN_RES_N2 = 23;

	/** 
	 * Index of column EXPLANTE_FECHA
	 */
	protected static final int COLUMN_EXPLANTE_FECHA = 24;

	/** 
	 * Index of column EXPLANTE_OP_ENF
	 */
	protected static final int COLUMN_EXPLANTE_OP_ENF = 25;

	/** 
	 * Index of column EXPLANTE_OPMED
	 */
	protected static final int COLUMN_EXPLANTE_OPMED = 26;

	/** 
	 * Index of column EXPLANTE_DIAGNOSTICO
	 */
	protected static final int COLUMN_EXPLANTE_DIAGNOSTICO = 27;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 28;

	/** 
	 * Index of column COMPLICACIONES
	 */
	protected static final int COLUMN_COMPLICACIONES = 29;

	/** 
	 * Index of column EPISODIO
	 */
	protected static final int COLUMN_EPISODIO = 30;

	/** 
	 * Index of column NSERIE
	 */
	protected static final int COLUMN_NSERIE = 31;

	/** 
	 * Index of column IDMODELOREG
	 */
	protected static final int COLUMN_IDMODELOREG = 32;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 32;

	/** 
	 * Index of primary-key column ID_REGISTRADOR
	 */
	protected static final int PK_COLUMN_ID_REGISTRADOR = 1;

	/** 
	 * Inserts a new row in the arr_registrador table.
	 */
	public ArrRegistradorPk insert(ArrRegistrador dto) throws ArrRegistradorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdPaciente() != null) {
				stmt.setInt( index++, dto.getIdPaciente().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdRegistrador() != null) {
				stmt.setInt( index++, dto.getIdRegistrador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			stmt.setString( index++, dto.getNproc() );
			stmt.setString( index++, dto.getReferidor() );
			if (dto.getIndicacion() != null) {
				stmt.setInt( index++, dto.getIndicacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIndicacionsincope() != null) {
				stmt.setInt( index++, dto.getIndicacionsincope().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIndicacionsincopen() != null) {
				stmt.setInt( index++, dto.getIndicacionsincopen().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getOpEnf() );
			stmt.setString( index++, dto.getOpMed() );
			stmt.setString( index++, dto.getImplanteSala() );
			stmt.setString( index++, dto.getImplanteModelo() );
			if (dto.getImplanteZona() != null) {
				stmt.setInt( index++, dto.getImplanteZona().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCardiopatia() != null) {
				stmt.setInt( index++, dto.getCardiopatia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSheldonA() != null) {
				stmt.setInt( index++, dto.getSheldonA().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSheldonB() != null) {
				stmt.setInt( index++, dto.getSheldonB().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSheldonC() != null) {
				stmt.setInt( index++, dto.getSheldonC().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSheldonD() != null) {
				stmt.setInt( index++, dto.getSheldonD().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSheldonE() != null) {
				stmt.setInt( index++, dto.getSheldonE().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSheldonF() != null) {
				stmt.setInt( index++, dto.getSheldonF().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSheldonG() != null) {
				stmt.setInt( index++, dto.getSheldonG().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getResN1() != null) {
				stmt.setInt( index++, dto.getResN1().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getResN2() != null) {
				stmt.setInt( index++, dto.getResN2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getExplanteFecha()==null ? null : new java.sql.Date( dto.getExplanteFecha().getTime() ) );
			stmt.setString( index++, dto.getExplanteOpEnf() );
			stmt.setString( index++, dto.getExplanteOpmed() );
			if (dto.getExplanteDiagnostico() != null) {
				stmt.setInt( index++, dto.getExplanteDiagnostico().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getComentarios() );
			stmt.setString( index++, dto.getComplicaciones() );
			stmt.setString( index++, dto.getEpisodio() );
			stmt.setString( index++, dto.getNserie() );
			if (dto.getIdmodeloreg() != null) {
				stmt.setInt( index++, dto.getIdmodeloreg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdRegistrador( new Integer( rs.getInt(1) ) );
			}
		
			reset(dto);
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrRegistradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the arr_registrador table.
	 */
	public void update(ArrRegistradorPk pk, ArrRegistrador dto) throws ArrRegistradorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdPaciente() != null) {
				stmt.setInt( index++, dto.getIdPaciente().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdRegistrador() != null) {
				stmt.setInt( index++, dto.getIdRegistrador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			stmt.setString( index++, dto.getNproc() );
			stmt.setString( index++, dto.getReferidor() );
			if (dto.getIndicacion() != null) {
				stmt.setInt( index++, dto.getIndicacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIndicacionsincope() != null) {
				stmt.setInt( index++, dto.getIndicacionsincope().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIndicacionsincopen() != null) {
				stmt.setInt( index++, dto.getIndicacionsincopen().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getOpEnf() );
			stmt.setString( index++, dto.getOpMed() );
			stmt.setString( index++, dto.getImplanteSala() );
			stmt.setString( index++, dto.getImplanteModelo() );
			if (dto.getImplanteZona() != null) {
				stmt.setInt( index++, dto.getImplanteZona().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getCardiopatia() != null) {
				stmt.setInt( index++, dto.getCardiopatia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSheldonA() != null) {
				stmt.setInt( index++, dto.getSheldonA().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSheldonB() != null) {
				stmt.setInt( index++, dto.getSheldonB().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSheldonC() != null) {
				stmt.setInt( index++, dto.getSheldonC().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSheldonD() != null) {
				stmt.setInt( index++, dto.getSheldonD().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSheldonE() != null) {
				stmt.setInt( index++, dto.getSheldonE().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSheldonF() != null) {
				stmt.setInt( index++, dto.getSheldonF().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getSheldonG() != null) {
				stmt.setInt( index++, dto.getSheldonG().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getResN1() != null) {
				stmt.setInt( index++, dto.getResN1().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getResN2() != null) {
				stmt.setInt( index++, dto.getResN2().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setDate(index++, dto.getExplanteFecha()==null ? null : new java.sql.Date( dto.getExplanteFecha().getTime() ) );
			stmt.setString( index++, dto.getExplanteOpEnf() );
			stmt.setString( index++, dto.getExplanteOpmed() );
			if (dto.getExplanteDiagnostico() != null) {
				stmt.setInt( index++, dto.getExplanteDiagnostico().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getComentarios() );
			stmt.setString( index++, dto.getComplicaciones() );
			stmt.setString( index++, dto.getEpisodio() );
			stmt.setString( index++, dto.getNserie() );
			if (dto.getIdmodeloreg() != null) {
				stmt.setInt( index++, dto.getIdmodeloreg().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (pk.getIdRegistrador() != null) {
				stmt.setInt( 33, pk.getIdRegistrador().intValue() );
			} else {
				stmt.setNull(33, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrRegistradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the arr_registrador table.
	 */
	public void delete(ArrRegistradorPk pk) throws ArrRegistradorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdRegistrador() != null) {
				stmt.setInt( 1, pk.getIdRegistrador().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrRegistradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the arr_registrador table that matches the specified primary-key value.
	 */
	public ArrRegistrador findByPrimaryKey(ArrRegistradorPk pk) throws ArrRegistradorDaoException
	{
		return findByPrimaryKey( pk.getIdRegistrador() );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'ID_REGISTRADOR = :idRegistrador'.
	 */
	public ArrRegistrador findByPrimaryKey(Integer idRegistrador) throws ArrRegistradorDaoException
	{
		ArrRegistrador ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_REGISTRADOR = ?", new Object[] { idRegistrador } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_NO_A = :sheldonNoA'.
	 */
	public ArrRegistrador[] findWhereSheldonNoAEquals(Integer sheldonNoA) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_NO_A = ? ORDER BY SHELDON_NO_A", new Object[] { sheldonNoA } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_NO_B = :sheldonNoB'.
	 */
	public ArrRegistrador[] findWhereSheldonNoBEquals(Integer sheldonNoB) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_NO_B = ? ORDER BY SHELDON_NO_B", new Object[] { sheldonNoB } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_NO_C = :sheldonNoC'.
	 */
	public ArrRegistrador[] findWhereSheldonNoCEquals(Integer sheldonNoC) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_NO_C = ? ORDER BY SHELDON_NO_C", new Object[] { sheldonNoC } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_NO_D = :sheldonNoD'.
	 */
	public ArrRegistrador[] findWhereSheldonNoDEquals(Integer sheldonNoD) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_NO_D = ? ORDER BY SHELDON_NO_D", new Object[] { sheldonNoD } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_NO_E = :sheldonNoE'.
	 */
	public ArrRegistrador[] findWhereSheldonNoEEquals(Integer sheldonNoE) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_NO_E = ? ORDER BY SHELDON_NO_E", new Object[] { sheldonNoE } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_NO_F = :sheldonNoF'.
	 */
	public ArrRegistrador[] findWhereSheldonNoFEquals(Integer sheldonNoF) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_NO_F = ? ORDER BY SHELDON_NO_F", new Object[] { sheldonNoF } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_NO_G = :sheldonNoG'.
	 */
	public ArrRegistrador[] findWhereSheldonNoGEquals(Integer sheldonNoG) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_NO_G = ? ORDER BY SHELDON_NO_G", new Object[] { sheldonNoG } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_SI_A = :sheldonSiA'.
	 */
	public ArrRegistrador[] findWhereSheldonSiAEquals(Integer sheldonSiA) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_SI_A = ? ORDER BY SHELDON_SI_A", new Object[] { sheldonSiA } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_SI_B = :sheldonSiB'.
	 */
	public ArrRegistrador[] findWhereSheldonSiBEquals(Integer sheldonSiB) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_SI_B = ? ORDER BY SHELDON_SI_B", new Object[] { sheldonSiB } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_SI_C = :sheldonSiC'.
	 */
	public ArrRegistrador[] findWhereSheldonSiCEquals(Integer sheldonSiC) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_SI_C = ? ORDER BY SHELDON_SI_C", new Object[] { sheldonSiC } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_SI_D = :sheldonSiD'.
	 */
	public ArrRegistrador[] findWhereSheldonSiDEquals(Integer sheldonSiD) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_SI_D = ? ORDER BY SHELDON_SI_D", new Object[] { sheldonSiD } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_SI_E = :sheldonSiE'.
	 */
	public ArrRegistrador[] findWhereSheldonSiEEquals(Integer sheldonSiE) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_SI_E = ? ORDER BY SHELDON_SI_E", new Object[] { sheldonSiE } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_SI_F = :sheldonSiF'.
	 */
	public ArrRegistrador[] findWhereSheldonSiFEquals(Integer sheldonSiF) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_SI_F = ? ORDER BY SHELDON_SI_F", new Object[] { sheldonSiF } );
	}
		
	/** 
	 * Returns all rows from the arr_registrador table that match the criteria ''.
	 */
	public ArrRegistrador[] findAll() throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_REGISTRADOR", null );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'ID_PACIENTE = :idPaciente'.
	 */
	public ArrRegistrador[] findWhereIdPacienteEquals(int idPaciente) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PACIENTE = ? ORDER BY ID_PACIENTE", new Object[] {  new Integer(idPaciente) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'ID_REGISTRADOR = :idRegistrador'.
	 */
	public ArrRegistrador[] findWhereIdRegistradorEquals(int idRegistrador) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_REGISTRADOR = ? ORDER BY ID_REGISTRADOR", new Object[] {  new Integer(idRegistrador) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'FECHA = :fecha'.
	 */
	public ArrRegistrador[] findWhereFechaEquals(Date fecha) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA = ? ORDER BY FECHA", new Object[] { fecha==null ? null : new java.sql.Date( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'NPROC = :nproc'.
	 */
	public ArrRegistrador[] findWhereNprocEquals(String nproc) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NPROC = ? ORDER BY NPROC", new Object[] { nproc } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'REFERIDOR = :referidor'.
	 */
	public ArrRegistrador[] findWhereReferidorEquals(String referidor) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REFERIDOR = ? ORDER BY REFERIDOR", new Object[] { referidor } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'INDICACION = :indicacion'.
	 */
	public ArrRegistrador[] findWhereIndicacionEquals(int indicacion) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INDICACION = ? ORDER BY INDICACION", new Object[] {  new Integer(indicacion) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'INDICACIONSINCOPE = :indicacionsincope'.
	 */
	public ArrRegistrador[] findWhereIndicacionsincopeEquals(int indicacionsincope) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INDICACIONSINCOPE = ? ORDER BY INDICACIONSINCOPE", new Object[] {  new Integer(indicacionsincope) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'INDICACIONSINCOPEN = :indicacionsincopen'.
	 */
	public ArrRegistrador[] findWhereIndicacionsincopenEquals(int indicacionsincopen) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INDICACIONSINCOPEN = ? ORDER BY INDICACIONSINCOPEN", new Object[] {  new Integer(indicacionsincopen) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'OP_ENF = :opEnf'.
	 */
	public ArrRegistrador[] findWhereOpEnfEquals(String opEnf) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OP_ENF = ? ORDER BY OP_ENF", new Object[] { opEnf } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'OP_MED = :opMed'.
	 */
	public ArrRegistrador[] findWhereOpMedEquals(String opMed) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OP_MED = ? ORDER BY OP_MED", new Object[] { opMed } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'IMPLANTE_SALA = :implanteSala'.
	 */
	public ArrRegistrador[] findWhereImplanteSalaEquals(String implanteSala) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPLANTE_SALA = ? ORDER BY IMPLANTE_SALA", new Object[] { implanteSala } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'IMPLANTE_MODELO = :implanteModelo'.
	 */
	public ArrRegistrador[] findWhereImplanteModeloEquals(String implanteModelo) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPLANTE_MODELO = ? ORDER BY IMPLANTE_MODELO", new Object[] { implanteModelo } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'IMPLANTE_ZONA = :implanteZona'.
	 */
	public ArrRegistrador[] findWhereImplanteZonaEquals(int implanteZona) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPLANTE_ZONA = ? ORDER BY IMPLANTE_ZONA", new Object[] {  new Integer(implanteZona) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'CARDIOPATIA = :cardiopatia'.
	 */
	public ArrRegistrador[] findWhereCardiopatiaEquals(int cardiopatia) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CARDIOPATIA = ? ORDER BY CARDIOPATIA", new Object[] {  new Integer(cardiopatia) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_A = :sheldonA'.
	 */
	public ArrRegistrador[] findWhereSheldonAEquals(int sheldonA) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_A = ? ORDER BY SHELDON_A", new Object[] {  new Integer(sheldonA) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_B = :sheldonB'.
	 */
	public ArrRegistrador[] findWhereSheldonBEquals(int sheldonB) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_B = ? ORDER BY SHELDON_B", new Object[] {  new Integer(sheldonB) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_C = :sheldonC'.
	 */
	public ArrRegistrador[] findWhereSheldonCEquals(int sheldonC) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_C = ? ORDER BY SHELDON_C", new Object[] {  new Integer(sheldonC) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_D = :sheldonD'.
	 */
	public ArrRegistrador[] findWhereSheldonDEquals(int sheldonD) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_D = ? ORDER BY SHELDON_D", new Object[] {  new Integer(sheldonD) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_E = :sheldonE'.
	 */
	public ArrRegistrador[] findWhereSheldonEEquals(int sheldonE) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_E = ? ORDER BY SHELDON_E", new Object[] {  new Integer(sheldonE) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_F = :sheldonF'.
	 */
	public ArrRegistrador[] findWhereSheldonFEquals(int sheldonF) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_F = ? ORDER BY SHELDON_F", new Object[] {  new Integer(sheldonF) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_G = :sheldonG'.
	 */
	public ArrRegistrador[] findWhereSheldonGEquals(int sheldonG) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SHELDON_G = ? ORDER BY SHELDON_G", new Object[] {  new Integer(sheldonG) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'RES_N1 = :resN1'.
	 */
	public ArrRegistrador[] findWhereResN1Equals(int resN1) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RES_N1 = ? ORDER BY RES_N1", new Object[] {  new Integer(resN1) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'RES_N2 = :resN2'.
	 */
	public ArrRegistrador[] findWhereResN2Equals(int resN2) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RES_N2 = ? ORDER BY RES_N2", new Object[] {  new Integer(resN2) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'EXPLANTE_FECHA = :explanteFecha'.
	 */
	public ArrRegistrador[] findWhereExplanteFechaEquals(Date explanteFecha) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EXPLANTE_FECHA = ? ORDER BY EXPLANTE_FECHA", new Object[] { explanteFecha==null ? null : new java.sql.Date( explanteFecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'EXPLANTE_OP_ENF = :explanteOpEnf'.
	 */
	public ArrRegistrador[] findWhereExplanteOpEnfEquals(String explanteOpEnf) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EXPLANTE_OP_ENF = ? ORDER BY EXPLANTE_OP_ENF", new Object[] { explanteOpEnf } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'EXPLANTE_OPMED = :explanteOpmed'.
	 */
	public ArrRegistrador[] findWhereExplanteOpmedEquals(String explanteOpmed) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EXPLANTE_OPMED = ? ORDER BY EXPLANTE_OPMED", new Object[] { explanteOpmed } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'EXPLANTE_DIAGNOSTICO = :explanteDiagnostico'.
	 */
	public ArrRegistrador[] findWhereExplanteDiagnosticoEquals(int explanteDiagnostico) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EXPLANTE_DIAGNOSTICO = ? ORDER BY EXPLANTE_DIAGNOSTICO", new Object[] {  new Integer(explanteDiagnostico) } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ArrRegistrador[] findWhereComentariosEquals(String comentarios) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'COMPLICACIONES = :complicaciones'.
	 */
	public ArrRegistrador[] findWhereComplicacionesEquals(String complicaciones) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMPLICACIONES = ? ORDER BY COMPLICACIONES", new Object[] { complicaciones } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'EPISODIO = :episodio'.
	 */
	public ArrRegistrador[] findWhereEpisodioEquals(String episodio) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EPISODIO = ? ORDER BY EPISODIO", new Object[] { episodio } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'NSERIE = :nserie'.
	 */
	public ArrRegistrador[] findWhereNserieEquals(String nserie) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NSERIE = ? ORDER BY NSERIE", new Object[] { nserie } );
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'IDMODELOREG = :idmodeloreg'.
	 */
	public ArrRegistrador[] findWhereIdmodeloregEquals(int idmodeloreg) throws ArrRegistradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDMODELOREG = ? ORDER BY IDMODELOREG", new Object[] {  new Integer(idmodeloreg) } );
	}

	/**
	 * Method 'ArrRegistradorDaoImpl'
	 * 
	 */
	public ArrRegistradorDaoImpl()
	{
	}
	public ArrRegistradorDaoImpl(String usuario) {
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ArrRegistradorDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ArrRegistradorDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrRegistradorDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "arr_registrador";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrRegistrador fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrRegistrador dto = new ArrRegistrador();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrRegistrador[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrRegistrador dto = new ArrRegistrador();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrRegistrador ret[] = new ArrRegistrador[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrRegistrador dto, ResultSet rs) throws SQLException
	{
		dto.setIdPaciente( new Integer( rs.getInt(COLUMN_ID_PACIENTE) ) );
		dto.setIdRegistrador( new Integer( rs.getInt(COLUMN_ID_REGISTRADOR) ) );
		dto.setFecha( rs.getDate(COLUMN_FECHA ) );
		dto.setNproc( rs.getString( COLUMN_NPROC ) );
		dto.setReferidor( rs.getString( COLUMN_REFERIDOR ) );
		dto.setIndicacion( new Integer( rs.getInt(COLUMN_INDICACION) ) );
		if (rs.wasNull()) {
			dto.setIndicacion( null );
		}
		
		dto.setIndicacionsincope( new Integer( rs.getInt(COLUMN_INDICACIONSINCOPE) ) );
		if (rs.wasNull()) {
			dto.setIndicacionsincope( null );
		}
		
		dto.setIndicacionsincopen( new Integer( rs.getInt(COLUMN_INDICACIONSINCOPEN) ) );
		if (rs.wasNull()) {
			dto.setIndicacionsincopen( null );
		}
		
		dto.setOpEnf( rs.getString( COLUMN_OP_ENF ) );
		dto.setOpMed( rs.getString( COLUMN_OP_MED ) );
		dto.setImplanteSala( rs.getString( COLUMN_IMPLANTE_SALA ) );
		dto.setImplanteModelo( rs.getString( COLUMN_IMPLANTE_MODELO ) );
		dto.setImplanteZona( new Integer( rs.getInt(COLUMN_IMPLANTE_ZONA) ) );
		if (rs.wasNull()) {
			dto.setImplanteZona( null );
		}
		
		dto.setCardiopatia( new Integer( rs.getInt(COLUMN_CARDIOPATIA) ) );
		if (rs.wasNull()) {
			dto.setCardiopatia( null );
		}
		
		dto.setSheldonA( new Integer( rs.getInt(COLUMN_SHELDON_A) ) );
		if (rs.wasNull()) {
			dto.setSheldonA( null );
		}
		
		dto.setSheldonB( new Integer( rs.getInt(COLUMN_SHELDON_B) ) );
		if (rs.wasNull()) {
			dto.setSheldonB( null );
		}
		
		dto.setSheldonC( new Integer( rs.getInt(COLUMN_SHELDON_C) ) );
		if (rs.wasNull()) {
			dto.setSheldonC( null );
		}
		
		dto.setSheldonD( new Integer( rs.getInt(COLUMN_SHELDON_D) ) );
		if (rs.wasNull()) {
			dto.setSheldonD( null );
		}
		
		dto.setSheldonE( new Integer( rs.getInt(COLUMN_SHELDON_E) ) );
		if (rs.wasNull()) {
			dto.setSheldonE( null );
		}
		
		dto.setSheldonF( new Integer( rs.getInt(COLUMN_SHELDON_F) ) );
		if (rs.wasNull()) {
			dto.setSheldonF( null );
		}
		
		dto.setSheldonG( new Integer( rs.getInt(COLUMN_SHELDON_G) ) );
		if (rs.wasNull()) {
			dto.setSheldonG( null );
		}
		
		dto.setResN1( new Integer( rs.getInt(COLUMN_RES_N1) ) );
		if (rs.wasNull()) {
			dto.setResN1( null );
		}
		
		dto.setResN2( new Integer( rs.getInt(COLUMN_RES_N2) ) );
		if (rs.wasNull()) {
			dto.setResN2( null );
		}
		
		dto.setExplanteFecha( rs.getDate(COLUMN_EXPLANTE_FECHA ) );
		dto.setExplanteOpEnf( rs.getString( COLUMN_EXPLANTE_OP_ENF ) );
		dto.setExplanteOpmed( rs.getString( COLUMN_EXPLANTE_OPMED ) );
		dto.setExplanteDiagnostico( new Integer( rs.getInt(COLUMN_EXPLANTE_DIAGNOSTICO) ) );
		if (rs.wasNull()) {
			dto.setExplanteDiagnostico( null );
		}
		
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setComplicaciones( rs.getString( COLUMN_COMPLICACIONES ) );
		dto.setEpisodio( rs.getString( COLUMN_EPISODIO ) );
		dto.setNserie( rs.getString( COLUMN_NSERIE ) );
		dto.setIdmodeloreg( new Integer( rs.getInt(COLUMN_IDMODELOREG) ) );
		if (rs.wasNull()) {
			dto.setIdmodeloreg( null );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrRegistrador dto)
	{
	}

	/** 
	 * Returns all rows from the arr_registrador table that match the specified arbitrary SQL statement
	 */
	public ArrRegistrador[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrRegistradorDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrRegistradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	public ArrayList<ArrayList<Object>> findByDynamicSelect(String sql) throws ArrRegistradorDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return UtilCodifi.Results2Array(rs);
		}
		catch (Exception _e) {
			throw new ArrRegistradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	/** 
	 * Returns all rows from the arr_registrador table that match the specified arbitrary SQL statement
	 */
	public ArrRegistrador[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrRegistradorDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ArrRegistradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	
	

	public ArrayList<ArrayList<Object>> getEstadisticasRegistrador(Date fechaini, Date fechafin) throws ArrRegistradorDaoException{
		StringBuffer sql = new StringBuffer();
		sql.append("select reg.indicacion INDICACION, ");
		sql.append("reg.explante_diagnostico EXPLANTE_DIAGNOSTICO, ");
		sql.append("regev.idregistrador IDREGISTRADOR, ");
		sql.append("regev.modelo MODELO, ");
		sql.append("regev.fabricante FABRICANTE ");
		sql.append(" from procedimiento proc, ");
		sql.append(" arr_registrador reg, registradoreventos regev ");
		sql.append(" WHERE proc.fecha between '"+UtilFechas.getFechaString(fechaini)+"' and '"+UtilFechas.getFechaString(fechafin)+"'");
		//sql.append(" WHERE proc.fecha >='"+UtilFechas.dateToString2(new Date(fechaini.getYear(),fechaini.getMonth(),fechaini.getDay()))+"'");
		//sql.append(" and proc.fecha <='"+UtilFechas.dateToString2(new Date(fechafin.getYear(),fechafin.getMonth(),fechafin.getDay()))+"'");
		sql.append(" and proc.tipoprocedimiento = 1067 ");
		sql.append(" and proc.idprocedimiento = reg.id_registrador ");
		sql.append(" and reg.idmodeloreg = regev.idregistrador ");
		
		return findByDynamicSelect(sql.toString());
	}
	public ArrayList<ArrayList<Object>> getEstadisticas(Date fechaini, Date fechafin, int ind) throws ArrRegistradorDaoException{
		StringBuffer sql = new StringBuffer();
		sql.append("select pac.nhc PACIENTE,");
		sql.append("pac.fechanaci FECHANACI,");
		sql.append("proc.fecha FECHA,");
		sql.append("reg.indicacion INDICACION, ");
		sql.append("reg.referidor REFERIDOR,");
		sql.append("reg.indicacionsincope INDICACIONSINCOPE,");
		sql.append("reg.indicacionsincopen INDICACIONSINCOPEN,");
		sql.append("reg.op_enf OP_ENF,");
		sql.append("reg.op_med OP_MED,");
		sql.append("reg.implante_modelo IMPLANTE_MODELO,");
		sql.append("reg.implante_zona IMPLANTE_ZONA,");
		sql.append("reg.res_n1 RES_N1,");
		sql.append("reg.explante_fecha EXPLANTE_FECHA,");
		sql.append("reg.explante_op_enf EXPLANTE_OP_ENF,");
		sql.append("reg.explante_opmed EXPLANTE_OPMED,");
		sql.append("reg.explante_diagnostico EXPLANTE_DIAGNOSTICO,");
		sql.append("reg.complicaciones COMPLICACIONES,");
		sql.append("reg.nserie NSERIE,");
		sql.append("pac.nombre NOMBRE,");
		sql.append("pac.apellid1 APELLID1,");
		sql.append("pac.apellid2 APELLID2,");
		sql.append("pac.nuhsa NUHSA,");
		sql.append("reg.nproc NPROC");
		sql.append(" from procedimiento proc, ");
		sql.append(" arr_pacientes pac, ");
		sql.append(" arr_registrador reg ");
		sql.append(" WHERE proc.fecha between '"+UtilFechas.getFechaString(fechaini)+"' and '"+UtilFechas.getFechaString(fechafin)+"'");
		sql.append(" and proc.tipoprocedimiento = 1067 ");
		sql.append(" and pac.codigo = proc.codigo ");
		sql.append(" and proc.idprocedimiento = reg.id_registrador ");
		if(ind!=0)
			sql.append(" and reg.indicacion = "+ind);
		
		return findByDynamicSelect(sql.toString());
	}

	public ArrayList<ArrayList<Object>> getConsultaRegEv(String modelo, String nserie,String nserie2, String fab, Date fini, Date ffin) throws ArrRegistradorDaoException{
		StringBuffer sql = new StringBuffer();
		sql.append("select registradoreventos.modelo,");
		sql.append("arr_registrador.nserie,");
		sql.append("registradoreventos.fabricante,");
		sql.append("arr_registrador.EXPLANTE_FECHA, ");
		sql.append("procedimiento.FECHA,");
		sql.append("arr_pacientes.NHC nhc");
		sql.append(" from arr_registrador, procedimiento, arr_pacientes, registradoreventos ");
		sql.append(" WHERE procedimiento.fecha between '"+UtilFechas.getFechaString(fini)+"' and '"+UtilFechas.getFechaString(ffin)+"'");
		sql.append(" and procedimiento.tipoprocedimiento = 1067 ");
		sql.append(" and arr_pacientes.codigo = procedimiento.codigo ");
		sql.append(" and arr_registrador.id_registrador = procedimiento.idprocedimiento");
		sql.append(" and registradoreventos.idregistrador = arr_registrador.idmodeloreg");
		if(modelo!=null && !modelo.equals(""))
			sql.append(" and registradoreventos.modelo LIKE  '%"+modelo+"%'");
		if(nserie!=null && !nserie.equals("") && (nserie2==null || nserie2.equals("")))
			sql.append(" and arr_registrador.nserie like '%"+nserie+"%'");
		else if(nserie!=null && !nserie.equals("") && nserie2!=null && !nserie2.equals(""))
			sql.append(" and arr_registrador.nserie between '"+nserie+"%' and '"+nserie2+"%'");
		
		return findByDynamicSelect(sql.toString());
	}

}
