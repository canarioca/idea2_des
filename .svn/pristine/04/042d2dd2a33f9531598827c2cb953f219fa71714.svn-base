/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface ImpEvolucionDao
{
	/** 
	 * Inserts a new row in the imp_evolucion table.
	 */
	public ImpEvolucionPk insert(ImpEvolucion dto) throws ImpEvolucionDaoException;

	/** 
	 * Updates a single row in the imp_evolucion table.
	 */
	public void update(ImpEvolucionPk pk, ImpEvolucion dto) throws ImpEvolucionDaoException;

	/** 
	 * Deletes a single row in the imp_evolucion table.
	 */
	public void delete(ImpEvolucionPk pk) throws ImpEvolucionDaoException;

	/** 
	 * Returns the rows from the imp_evolucion table that matches the specified primary-key value.
	 */
	public ImpEvolucion findByPrimaryKey(ImpEvolucionPk pk) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IDEV = :idev'.
	 */
	public ImpEvolucion findByPrimaryKey(Integer idev) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria ''.
	 */
	public ImpEvolucion[] findAll() throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IDEV = :idev'.
	 */
	public ImpEvolucion[] findWhereIdevEquals(int idev) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IDSEG = :idseg'.
	 */
	public ImpEvolucion[] findWhereIdsegEquals(int idseg) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'MODOGEN = :modogen'.
	 */
	public ImpEvolucion[] findWhereModogenEquals(int modogen) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'FBASICA = :fbasica'.
	 */
	public ImpEvolucion[] findWhereFbasicaEquals(String fbasica) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'SEGREMOTO = :segremoto'.
	 */
	public ImpEvolucion[] findWhereSegremotoEquals(short segremoto) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'MEV = :mev'.
	 */
	public ImpEvolucion[] findWhereMevEquals(short mev) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'MPDEPENDIENTE = :mpdependiente'.
	 */
	public ImpEvolucion[] findWhereMpdependienteEquals(short mpdependiente) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IAVDETEC = :iavdetec'.
	 */
	public ImpEvolucion[] findWhereIavdetecEquals(String iavdetec) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IAVESTIM = :iavestim'.
	 */
	public ImpEvolucion[] findWhereIavestimEquals(String iavestim) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IAVMAX = :iavmax'.
	 */
	public ImpEvolucion[] findWhereIavmaxEquals(String iavmax) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IAVMIN = :iavmin'.
	 */
	public ImpEvolucion[] findWhereIavminEquals(String iavmin) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'SACTIVACION = :sactivacion'.
	 */
	public ImpEvolucion[] findWhereSactivacionEquals(int sactivacion) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IVV = :ivv'.
	 */
	public ImpEvolucion[] findWhereIvvEquals(String ivv) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'UMBRAL_ESTIMFREN = :umbralEstimfren'.
	 */
	public ImpEvolucion[] findWhereUmbralEstimfrenEquals(String umbralEstimfren) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'ATP = :atp'.
	 */
	public ImpEvolucion[] findWhereAtpEquals(short atp) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'NUMTERATP = :numteratp'.
	 */
	public ImpEvolucion[] findWhereNumteratpEquals(String numteratp) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'TEREFECATP = :terefecatp'.
	 */
	public ImpEvolucion[] findWhereTerefecatpEquals(short terefecatp) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'CHOQUES = :choques'.
	 */
	public ImpEvolucion[] findWhereChoquesEquals(short choques) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'ENERGIACHOQUE = :energiachoque'.
	 */
	public ImpEvolucion[] findWhereEnergiachoqueEquals(String energiachoque) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'TEREEFECCHOQ = :tereefecchoq'.
	 */
	public ImpEvolucion[] findWhereTereefecchoqEquals(short tereefecchoq) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'TCARGACHOQUE = :tcargachoque'.
	 */
	public ImpEvolucion[] findWhereTcargachoqueEquals(String tcargachoque) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'IMPCHOQUE = :impchoque'.
	 */
	public ImpEvolucion[] findWhereImpchoqueEquals(String impchoque) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'NUMCHOQUE = :numchoque'.
	 */
	public ImpEvolucion[] findWhereNumchoqueEquals(String numchoque) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'TODASEFEC = :todasefec'.
	 */
	public ImpEvolucion[] findWhereTodasefecEquals(int todasefec) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'FMAX = :fmax'.
	 */
	public ImpEvolucion[] findWhereFmaxEquals(String fmax) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'FMIN = :fmin'.
	 */
	public ImpEvolucion[] findWhereFminEquals(String fmin) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'HISTERESIS = :histeresis'.
	 */
	public ImpEvolucion[] findWhereHisteresisEquals(short histeresis) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'VALOR_HISTERESIS = :valorHisteresis'.
	 */
	public ImpEvolucion[] findWhereValorHisteresisEquals(String valorHisteresis) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'ALGPREVFA = :algprevfa'.
	 */
	public ImpEvolucion[] findWhereAlgprevfaEquals(short algprevfa) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'AMP_POSTCH = :ampPostch'.
	 */
	public ImpEvolucion[] findWhereAmpPostchEquals(String ampPostch) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'DURPULSO_POSTCH = :durpulsoPostch'.
	 */
	public ImpEvolucion[] findWhereDurpulsoPostchEquals(String durpulsoPostch) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'FREC_POSTCH = :frecPostch'.
	 */
	public ImpEvolucion[] findWhereFrecPostchEquals(String frecPostch) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'DUR_POSTCH = :durPostch'.
	 */
	public ImpEvolucion[] findWhereDurPostchEquals(String durPostch) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'CONFCH = :confch'.
	 */
	public ImpEvolucion[] findWhereConfchEquals(int confch) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'FECHAALTA = :fechaalta'.
	 */
	public ImpEvolucion[] findWhereFechaaltaEquals(Date fechaalta) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'MEDICOALTA = :medicoalta'.
	 */
	public ImpEvolucion[] findWhereMedicoaltaEquals(String medicoalta) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'MOTIVOALTA = :motivoalta'.
	 */
	public ImpEvolucion[] findWhereMotivoaltaEquals(int motivoalta) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'TIPOALTA = :tipoalta'.
	 */
	public ImpEvolucion[] findWhereTipoaltaEquals(int tipoalta) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'ESTADOALTA = :estadoalta'.
	 */
	public ImpEvolucion[] findWhereEstadoaltaEquals(int estadoalta) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ImpEvolucion[] findWhereComentariosEquals(String comentarios) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'COMPATIBLEMRI = :compatiblemri'.
	 */
	public ImpEvolucion[] findWhereCompatiblemriEquals(int compatiblemri) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'MOTIVOTERAPIAAPROPIADA = :motivoterapiaapropiada'.
	 */
	public ImpEvolucion[] findWhereMotivoterapiaapropiadaEquals(int motivoterapiaapropiada) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'NUMEPISODIOS = :numepisodios'.
	 */
	public ImpEvolucion[] findWhereNumepisodiosEquals(String numepisodios) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'NUMEPITSV = :numepitsv'.
	 */
	public ImpEvolucion[] findWhereNumepitsvEquals(String numepitsv) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'NUMEPITV = :numepitv'.
	 */
	public ImpEvolucion[] findWhereNumepitvEquals(String numepitv) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'NUMEPIFV = :numepifv'.
	 */
	public ImpEvolucion[] findWhereNumepifvEquals(String numepifv) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'NUMEPINOSOST = :numepinosost'.
	 */
	public ImpEvolucion[] findWhereNumepinosostEquals(String numepinosost) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'NUMEPIOTROS = :numepiotros'.
	 */
	public ImpEvolucion[] findWhereNumepiotrosEquals(String numepiotros) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'RESPONDEDOR = :respondedor'.
	 */
	public ImpEvolucion[] findWhereRespondedorEquals(int respondedor) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'TIPORESPONDEDOR = :tiporespondedor'.
	 */
	public ImpEvolucion[] findWhereTiporespondedorEquals(int tiporespondedor) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'VECTOR_SICD = :vectorSicd'.
	 */
	public ImpEvolucion[] findWhereVectorSicdEquals(int vectorSicd) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the criteria 'RECOMENDACIONES = :recomendaciones'.
	 */
	public ImpEvolucion[] findWhereRecomendacionesEquals(String recomendaciones) throws ImpEvolucionDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the imp_evolucion table that match the specified arbitrary SQL statement
	 */
	public ImpEvolucion[] findByDynamicSelect(String sql, Object[] sqlParams) throws ImpEvolucionDaoException;

	/** 
	 * Returns all rows from the imp_evolucion table that match the specified arbitrary SQL statement
	 */
	public ImpEvolucion[] findByDynamicWhere(String sql, Object[] sqlParams) throws ImpEvolucionDaoException;

}
