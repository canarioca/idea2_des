/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class MedComercialDaoImpl extends AbstractDAO implements MedComercialDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDMEDCOM, IDMEDGEN, NOMBRECOMERCIAL, IDPRESENTACION, IDVIA FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDMEDCOM, IDMEDGEN, NOMBRECOMERCIAL, IDPRESENTACION, IDVIA ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDMEDCOM = ?, IDMEDGEN = ?, NOMBRECOMERCIAL = ?, IDPRESENTACION = ?, IDVIA = ? WHERE IDMEDCOM = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDMEDCOM = ?";

	/** 
	 * Index of column IDMEDCOM
	 */
	protected static final int COLUMN_IDMEDCOM = 1;

	/** 
	 * Index of column IDMEDGEN
	 */
	protected static final int COLUMN_IDMEDGEN = 2;

	/** 
	 * Index of column NOMBRECOMERCIAL
	 */
	protected static final int COLUMN_NOMBRECOMERCIAL = 3;

	/** 
	 * Index of column IDPRESENTACION
	 */
	protected static final int COLUMN_IDPRESENTACION = 4;

	/** 
	 * Index of column IDVIA
	 */
	protected static final int COLUMN_IDVIA = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Index of primary-key column IDMEDCOM
	 */
	protected static final int PK_COLUMN_IDMEDCOM = 1;

	/** 
	 * Inserts a new row in the med_comercial table.
	 */
	public MedComercialPk insert(MedComercial dto) throws MedComercialDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdmedcom() != null) {
				stmt.setInt( index++, dto.getIdmedcom().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdmedgen() != null) {
				stmt.setInt( index++, dto.getIdmedgen().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNombrecomercial() );
			if (dto.getIdpresentacion() != null) {
				stmt.setInt( index++, dto.getIdpresentacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdvia() != null) {
				stmt.setInt( index++, dto.getIdvia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdmedcom( new Integer( rs.getInt(1) ) );
			}
			
			auditoriaDto.setAccion(AuditoriaDto.insercion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MedComercialDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the med_comercial table.
	 */
	public void update(MedComercialPk pk, MedComercial dto) throws MedComercialDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdmedcom() != null) {
				stmt.setInt( index++, dto.getIdmedcom().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdmedgen() != null) {
				stmt.setInt( index++, dto.getIdmedgen().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNombrecomercial() );
			if (dto.getIdpresentacion() != null) {
				stmt.setInt( index++, dto.getIdpresentacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdvia() != null) {
				stmt.setInt( index++, dto.getIdvia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (pk.getIdmedcom() != null) {
				stmt.setInt( 6, pk.getIdmedcom().intValue() );
			} else {
				stmt.setNull(6, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MedComercialDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the med_comercial table.
	 */
	public void delete(MedComercialPk pk) throws MedComercialDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdmedcom() != null) {
				stmt.setInt( 1, pk.getIdmedcom().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(pk.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MedComercialDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the med_comercial table that matches the specified primary-key value.
	 */
	public MedComercial findByPrimaryKey(MedComercialPk pk) throws MedComercialDaoException
	{
		return findByPrimaryKey( pk.getIdmedcom() );
	}

	/** 
	 * Returns all rows from the med_comercial table that match the criteria 'IDMEDCOM = :idmedcom'.
	 */
	public MedComercial findByPrimaryKey(Integer idmedcom) throws MedComercialDaoException
	{
		MedComercial ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDMEDCOM = ?", new Object[] { idmedcom } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the med_comercial table that match the criteria ''.
	 */
	public MedComercial[] findAll() throws MedComercialDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDMEDCOM", null );
	}

	/** 
	 * Returns all rows from the med_comercial table that match the criteria 'IDMEDGEN = :idmedgen'.
	 */
	public MedComercial[] findByMedGenerico(int idmedgen) throws MedComercialDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDMEDGEN = ?", new Object[] {  new Integer(idmedgen) } );
	}

	/** 
	 * Returns all rows from the med_comercial table that match the criteria 'IDMEDCOM = :idmedcom'.
	 */
	public MedComercial[] findWhereIdmedcomEquals(int idmedcom) throws MedComercialDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDMEDCOM = ? ORDER BY IDMEDCOM", new Object[] {  new Integer(idmedcom) } );
	}

	/** 
	 * Returns all rows from the med_comercial table that match the criteria 'IDMEDGEN = :idmedgen'.
	 */
	public MedComercial[] findWhereIdmedgenEquals(int idmedgen) throws MedComercialDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDMEDGEN = ? ORDER BY IDMEDGEN", new Object[] {  new Integer(idmedgen) } );
	}

	/** 
	 * Returns all rows from the med_comercial table that match the criteria 'NOMBRECOMERCIAL = :nombrecomercial'.
	 */
	public MedComercial[] findWhereNombrecomercialEquals(String nombrecomercial) throws MedComercialDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRECOMERCIAL = ? ORDER BY NOMBRECOMERCIAL", new Object[] { nombrecomercial } );
	}

	/** 
	 * Returns all rows from the med_comercial table that match the criteria 'IDPRESENTACION = :idpresentacion'.
	 */
	public MedComercial[] findWhereIdpresentacionEquals(int idpresentacion) throws MedComercialDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDPRESENTACION = ? ORDER BY IDPRESENTACION", new Object[] {  new Integer(idpresentacion) } );
	}

	/** 
	 * Returns all rows from the med_comercial table that match the criteria 'IDVIA = :idvia'.
	 */
	public MedComercial[] findWhereIdviaEquals(int idvia) throws MedComercialDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDVIA = ? ORDER BY IDVIA", new Object[] {  new Integer(idvia) } );
	}

	/**
	 * Method 'MedComercialDaoImpl'
	 * 
	 */
	public MedComercialDaoImpl()
	{
	}
	
	public MedComercialDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	
	public MedComercialDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'MedComercialDaoImpl'
	 * 
	 * @param userConn
	 */
	public MedComercialDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.med_comercial";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected MedComercial fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			MedComercial dto = new MedComercial();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected MedComercial[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			MedComercial dto = new MedComercial();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		MedComercial ret[] = new MedComercial[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(MedComercial dto, ResultSet rs) throws SQLException
	{
		dto.setIdmedcom( new Integer( rs.getInt(COLUMN_IDMEDCOM) ) );
		dto.setIdmedgen( new Integer( rs.getInt(COLUMN_IDMEDGEN) ) );
		dto.setNombrecomercial( rs.getString( COLUMN_NOMBRECOMERCIAL ) );
		dto.setIdpresentacion( new Integer( rs.getInt(COLUMN_IDPRESENTACION) ) );
		if (rs.wasNull()) {
			dto.setIdpresentacion( null );
		}
		
		dto.setIdvia( new Integer( rs.getInt(COLUMN_IDVIA) ) );
		if (rs.wasNull()) {
			dto.setIdvia( null );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(MedComercial dto)
	{
	}

	/** 
	 * Returns all rows from the med_comercial table that match the specified arbitrary SQL statement
	 */
	public MedComercial[] findByDynamicSelect(String sql, Object[] sqlParams) throws MedComercialDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MedComercialDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the med_comercial table that match the specified arbitrary SQL statement
	 */
	public MedComercial[] findByDynamicWhere(String sql, Object[] sqlParams) throws MedComercialDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MedComercialDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
