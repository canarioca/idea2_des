/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface ImpGeneradorDao
{
	/** 
	 * Inserts a new row in the imp_generador table.
	 */
	public ImpGeneradorPk insert(ImpGenerador dto) throws ImpGeneradorDaoException;

	/** 
	 * Updates a single row in the imp_generador table.
	 */
	public void update(ImpGeneradorPk pk, ImpGenerador dto) throws ImpGeneradorDaoException;

	/** 
	 * Deletes a single row in the imp_generador table.
	 */
	public void delete(ImpGeneradorPk pk) throws ImpGeneradorDaoException;

	/** 
	 * Returns the rows from the imp_generador table that matches the specified primary-key value.
	 */
	public ImpGenerador findByPrimaryKey(ImpGeneradorPk pk) throws ImpGeneradorDaoException;

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'IDIMPGENERADOR = :idimpgenerador'.
	 */
	public ImpGenerador findByPrimaryKey(Integer idimpgenerador) throws ImpGeneradorDaoException;

	/** 
	 * Returns all rows from the imp_generador table that match the criteria ''.
	 */
	public ImpGenerador[] findAll() throws ImpGeneradorDaoException;

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'IDIMPGENERADOR = :idimpgenerador'.
	 */
	public ImpGenerador[] findWhereIdimpgeneradorEquals(int idimpgenerador) throws ImpGeneradorDaoException;

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'IDHOJAIMP = :idhojaimp'.
	 */
	public ImpGenerador[] findWhereIdhojaimpEquals(int idhojaimp) throws ImpGeneradorDaoException;

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'IDGENERADOR = :idgenerador'.
	 */
	public ImpGenerador[] findWhereIdgeneradorEquals(int idgenerador) throws ImpGeneradorDaoException;

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'IDSEG = :idseg'.
	 */
	public ImpGenerador[] findWhereIdsegEquals(int idseg) throws ImpGeneradorDaoException;

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'NUMSERIE = :numserie'.
	 */
	public ImpGenerador[] findWhereNumserieEquals(String numserie) throws ImpGeneradorDaoException;

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'LOCALIZACION = :localizacion'.
	 */
	public ImpGenerador[] findWhereLocalizacionEquals(int localizacion) throws ImpGeneradorDaoException;

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'MOTIVORECAMBIO = :motivorecambio'.
	 */
	public ImpGenerador[] findWhereMotivorecambioEquals(int motivorecambio) throws ImpGeneradorDaoException;

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'MOTIVORECOLOCACION = :motivorecolocacion'.
	 */
	public ImpGenerador[] findWhereMotivorecolocacionEquals(int motivorecolocacion) throws ImpGeneradorDaoException;

	/** 
	 * Returns all rows from the imp_generador table that match the criteria 'MOTIVOEXPLANTE = :motivoexplante'.
	 */
	public ImpGenerador[] findWhereMotivoexplanteEquals(int motivoexplante) throws ImpGeneradorDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the imp_generador table that match the specified arbitrary SQL statement
	 */
	public ImpGenerador[] findByDynamicSelect(String sql, Object[] sqlParams) throws ImpGeneradorDaoException;

	/** 
	 * Returns all rows from the imp_generador table that match the specified arbitrary SQL statement
	 */
	public ImpGenerador[] findByDynamicWhere(String sql, Object[] sqlParams) throws ImpGeneradorDaoException;

}
