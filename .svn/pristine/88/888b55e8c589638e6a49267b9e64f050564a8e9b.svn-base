/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.Date;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface ArrEnfDao
{
	/** 
	 * Inserts a new row in the ARR_ENF table.
	 */
	public ArrEnfPk insert(ArrEnf dto) throws ArrEnfDaoException;

	/** 
	 * Updates a single row in the ARR_ENF table.
	 */
	public void update(ArrEnfPk pk, ArrEnf dto) throws ArrEnfDaoException;

	/** 
	 * Deletes a single row in the ARR_ENF table.
	 */
	public void delete(ArrEnfPk pk) throws ArrEnfDaoException;

	/** 
	 * Returns the rows from the ARR_ENF table that matches the specified primary-key value.
	 */
	public ArrEnf findByPrimaryKey(ArrEnfPk pk) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'ID_PACIENTE = :idPaciente AND ID_REGISTRO = :idRegistro'.
	 */
	public ArrEnf findByPrimaryKey(Integer idPaciente, Integer idRegistro) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria ''.
	 */
	public ArrEnf[] findAll() throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'ID_PACIENTE = :idPaciente'.
	 */
	public ArrEnf[] findWhereIdPacienteEquals(long idPaciente) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'ID_REGISTRO = :idRegistro'.
	 */
	public ArrEnf[] findWhereIdRegistroEquals(long idRegistro) throws ArrEnfDaoException;
	public ArrEnf findWhereIdEefEquals(long ideef) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'PESO = :peso'.
	 */
	public ArrEnf[] findWherePesoEquals(String peso) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'TALLA = :talla'.
	 */
	public ArrEnf[] findWhereTallaEquals(String talla) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'TALLEG1 = :talleg1'.
	 */
	public ArrEnf[] findWhereTalleg1Equals(String talleg1) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'TALLEG2 = :talleg2'.
	 */
	public ArrEnf[] findWhereTalleg2Equals(String talleg2) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'FCLLEG = :fclleg'.
	 */
	public ArrEnf[] findWhereFcllegEquals(String fclleg) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'TAFIN1 = :tafin1'.
	 */
	public ArrEnf[] findWhereTafin1Equals(String tafin1) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'TAFIN2 = :tafin2'.
	 */
	public ArrEnf[] findWhereTafin2Equals(String tafin2) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'FCFIN = :fcfin'.
	 */
	public ArrEnf[] findWhereFcfinEquals(String fcfin) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'TATAQ1 = :tataq1'.
	 */
	public ArrEnf[] findWhereTataq1Equals(String tataq1) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'TATAQ2 = :tataq2'.
	 */
	public ArrEnf[] findWhereTataq2Equals(String tataq2) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'FCTAQ = :fctaq'.
	 */
	public ArrEnf[] findWhereFctaqEquals(String fctaq) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'CALIBRE1 = :calibre1'.
	 */
	public ArrEnf[] findWhereCalibre1Equals(String calibre1) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'MIEMBRO = :miembro'.
	 */
	public ArrEnf[] findWhereMiembroEquals(String miembro) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'PLANTA = :planta'.
	 */
	public ArrEnf[] findWherePlantaEquals(long planta) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'NUMERO = :numero'.
	 */
	public ArrEnf[] findWhereNumeroEquals(String numero) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'CALIBRE2 = :calibre2'.
	 */
	public ArrEnf[] findWhereCalibre2Equals(String calibre2) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'DIAGNOS = :diagnos'.
	 */
	public ArrEnf[] findWhereDiagnosEquals(String diagnos) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'PUNCION = :puncion'.
	 */
	public ArrEnf[] findWherePuncionEquals(long puncion) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'MATERIAL = :material'.
	 */
	public ArrEnf[] findWhereMaterialEquals(String material) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'VESICAL = :vesical'.
	 */
	public ArrEnf[] findWhereVesicalEquals(String vesical) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'OTROS = :otros'.
	 */
	public ArrEnf[] findWhereOtrosEquals(String otros) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'VASCULAR = :vascular'.
	 */
	public ArrEnf[] findWhereVascularEquals(long vascular) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'HEMOSTASIA = :hemostasia'.
	 */
	public ArrEnf[] findWhereHemostasiaEquals(long hemostasia) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'VENDAJE = :vendaje'.
	 */
	public ArrEnf[] findWhereVendajeEquals(long vendaje) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'ZONA = :zona'.
	 */
	public ArrEnf[] findWhereZonaEquals(long zona) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'SUERO = :suero'.
	 */
	public ArrEnf[] findWhereSueroEquals(String suero) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'HEPARINA = :heparina'.
	 */
	public ArrEnf[] findWhereHeparinaEquals(String heparina) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'SEDACION = :sedacion'.
	 */
	public ArrEnf[] findWhereSedacionEquals(long sedacion) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'FARMACOS = :farmacos'.
	 */
	public ArrEnf[] findWhereFarmacosEquals(String farmacos) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'CV = :cv'.
	 */
	public ArrEnf[] findWhereCvEquals(long cv) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'CV1 = :cv1'.
	 */
	public ArrEnf[] findWhereCv1Equals(String cv1) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'CV2 = :cv2'.
	 */
	public ArrEnf[] findWhereCv2Equals(String cv2) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'CV3 = :cv3'.
	 */
	public ArrEnf[] findWhereCv3Equals(String cv3) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'CV4 = :cv4'.
	 */
	public ArrEnf[] findWhereCv4Equals(String cv4) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'MOTIVO = :motivo'.
	 */
	public ArrEnf[] findWhereMotivoEquals(long motivo) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'EXITO = :exito'.
	 */
	public ArrEnf[] findWhereExitoEquals(long exito) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'OBSERV = :observ'.
	 */
	public ArrEnf[] findWhereObservEquals(String observ) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'DESTINO = :destino'.
	 */
	public ArrEnf[] findWhereDestinoEquals(String destino) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'FECHA = :fecha'.
	 */
	public ArrEnf[] findWhereFechaEquals(Date fecha) throws ArrEnfDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ARR_ENF table that match the specified arbitrary SQL statement
	 */
	public ArrEnf[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrEnfDaoException;

	/** 
	 * Returns all rows from the ARR_ENF table that match the specified arbitrary SQL statement
	 */
	public ArrEnf[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrEnfDaoException;

}
