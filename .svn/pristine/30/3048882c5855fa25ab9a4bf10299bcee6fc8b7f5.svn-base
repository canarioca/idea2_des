/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface RegistradoreventosDao
{
	/** 
	 * Inserts a new row in the registradoreventos table.
	 */
	public RegistradoreventosPk insert(Registradoreventos dto) throws RegistradoreventosDaoException;

	/** 
	 * Updates a single row in the registradoreventos table.
	 */
	public void update(RegistradoreventosPk pk, Registradoreventos dto) throws RegistradoreventosDaoException;

	/** 
	 * Deletes a single row in the registradoreventos table.
	 */
	public void delete(RegistradoreventosPk pk) throws RegistradoreventosDaoException;

	/** 
	 * Returns the rows from the registradoreventos table that matches the specified primary-key value.
	 */
	public Registradoreventos findByPrimaryKey(RegistradoreventosPk pk) throws RegistradoreventosDaoException;

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria 'IDREGISTRADOR = :idregistrador'.
	 */
	public Registradoreventos findByPrimaryKey(Integer idregistrador) throws RegistradoreventosDaoException;

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria ''.
	 */
	public Registradoreventos[] findAll() throws RegistradoreventosDaoException;

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria 'IDREGISTRADOR = :idregistrador'.
	 */
	public Registradoreventos[] findWhereIdregistradorEquals(int idregistrador) throws RegistradoreventosDaoException;

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria 'MODELO = :modelo'.
	 */
	public Registradoreventos[] findWhereModeloEquals(String modelo) throws RegistradoreventosDaoException;

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria 'FABRICANTE = :fabricante'.
	 */
	public Registradoreventos[] findWhereFabricanteEquals(String fabricante) throws RegistradoreventosDaoException;

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria 'REFERENCIA = :referencia'.
	 */
	public Registradoreventos[] findWhereReferenciaEquals(String referencia) throws RegistradoreventosDaoException;

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria 'RF = :rf'.
	 */
	public Registradoreventos[] findWhereRfEquals(int rf) throws RegistradoreventosDaoException;

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria 'MRI = :mri'.
	 */
	public Registradoreventos[] findWhereMriEquals(int mri) throws RegistradoreventosDaoException;

	/** 
	 * Returns all rows from the registradoreventos table that match the criteria 'ACTIVO = :activo'.
	 */
	public Registradoreventos[] findWhereActivoEquals(int activo) throws RegistradoreventosDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the registradoreventos table that match the specified arbitrary SQL statement
	 */
	public Registradoreventos[] findByDynamicSelect(String sql, Object[] sqlParams) throws RegistradoreventosDaoException;

	/** 
	 * Returns all rows from the registradoreventos table that match the specified arbitrary SQL statement
	 */
	public Registradoreventos[] findByDynamicWhere(String sql, Object[] sqlParams) throws RegistradoreventosDaoException;

}
