/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface ArrEstudioResultadoDao
{
	/** 
	 * Inserts a new row in the ARR_ESTUDIO_RESULTADO table.
	 */
	public ArrEstudioResultadoPk insert(ArrEstudioResultado dto) throws ArrEstudioResultadoDaoException;

	/** 
	 * Updates a single row in the ARR_ESTUDIO_RESULTADO table.
	 */
	public void update(ArrEstudioResultadoPk pk, ArrEstudioResultado dto) throws ArrEstudioResultadoDaoException;

	/** 
	 * Deletes a single row in the ARR_ESTUDIO_RESULTADO table.
	 */
	public void delete(ArrEstudioResultadoPk pk) throws ArrEstudioResultadoDaoException;
	public void delete(Integer idestudio) throws ArrEstudioResultadoDaoException;

	/** 
	 * Returns the rows from the ARR_ESTUDIO_RESULTADO table that matches the specified primary-key value.
	 */
	public ArrEstudioResultado findByPrimaryKey(ArrEstudioResultadoPk pk) throws ArrEstudioResultadoDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_RESULTADO table that match the criteria 'IDESTUDIO = :idestudio AND IDABLACION = :idablacion'.
	 */
	public ArrEstudioResultado findByPrimaryKey(Integer idestudio, Integer idablacion) throws ArrEstudioResultadoDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_RESULTADO table that match the criteria ''.
	 */
	public ArrEstudioResultado[] findAll() throws ArrEstudioResultadoDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_RESULTADO table that match the criteria 'IDESTUDIO = :idestudio'.
	 */
	public ArrEstudioResultado[] findWhereIdestudioEquals(long idestudio) throws ArrEstudioResultadoDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_RESULTADO table that match the criteria 'IDRES = :idres'.
	 */
	public ArrEstudioResultado[] findWhereIdresEquals(long idres) throws ArrEstudioResultadoDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_RESULTADO table that match the criteria 'IDPARCIAL = :idparcial'.
	 */
	public ArrEstudioResultado[] findWhereIdparcialEquals(long idparcial) throws ArrEstudioResultadoDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_RESULTADO table that match the criteria 'IDTIN = :idtin'.
	 */
	public ArrEstudioResultado[] findWhereIdtinEquals(long idtin) throws ArrEstudioResultadoDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_RESULTADO table that match the criteria 'IDTAM = :idtam'.
	 */
	public ArrEstudioResultado[] findWhereIdtamEquals(long idtam) throws ArrEstudioResultadoDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_RESULTADO table that match the criteria 'IDFA = :idfa'.
	 */
	public ArrEstudioResultado[] findWhereIdfaEquals(long idfa) throws ArrEstudioResultadoDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_RESULTADO table that match the criteria 'IDIAM = :idiam'.
	 */
	public ArrEstudioResultado[] findWhereIdiamEquals(long idiam) throws ArrEstudioResultadoDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_RESULTADO table that match the criteria 'IDNOIAM = :idnoiam'.
	 */
	public ArrEstudioResultado[] findWhereIdnoiamEquals(long idnoiam) throws ArrEstudioResultadoDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_RESULTADO table that match the criteria 'VAC = :vac'.
	 */
	public ArrEstudioResultado[] findWhereVacEquals(long vac) throws ArrEstudioResultadoDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_RESULTADO table that match the criteria 'TAF = :taf'.
	 */
	public ArrEstudioResultado[] findWhereTafEquals(long taf) throws ArrEstudioResultadoDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_RESULTADO table that match the criteria 'TVI = :tvi'.
	 */
	public ArrEstudioResultado[] findWhereTviEquals(long tvi) throws ArrEstudioResultadoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ARR_ESTUDIO_RESULTADO table that match the specified arbitrary SQL statement
	 */
	public ArrEstudioResultado[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrEstudioResultadoDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_RESULTADO table that match the specified arbitrary SQL statement
	 */
	public ArrEstudioResultado[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrEstudioResultadoDaoException;

}
