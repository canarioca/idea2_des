/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface ArrAnualLabDao
{
	/** 
	 * Inserts a new row in the ARR_ANUAL_LAB table.
	 */
	public ArrAnualLabPk insert(ArrAnualLab dto) throws ArrAnualLabDaoException;

	/** 
	 * Updates a single row in the ARR_ANUAL_LAB table.
	 */
	public void update(ArrAnualLabPk pk, ArrAnualLab dto) throws ArrAnualLabDaoException;

	/** 
	 * Deletes a single row in the ARR_ANUAL_LAB table.
	 */
	public void delete(ArrAnualLabPk pk) throws ArrAnualLabDaoException;

	/** 
	 * Returns the rows from the ARR_ANUAL_LAB table that matches the specified primary-key value.
	 */
	public ArrAnualLab findByPrimaryKey(ArrAnualLabPk pk) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'ANIO = :anio'.
	 */
	public ArrAnualLab findByPrimaryKey(Integer anio) throws ArrAnualLabDaoException;
	public ArrAnualLab findByMaxAnio() throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria ''.
	 */
	public ArrAnualLab[] findAll() throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'ANIO = :anio'.
	 */
	public ArrAnualLab[] findWhereAnioEquals(long anio) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'PLANTILLA = :plantilla'.
	 */
	public ArrAnualLab[] findWherePlantillaEquals(String plantilla) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'PLANTILLATC = :plantillatc'.
	 */
	public ArrAnualLab[] findWherePlantillatcEquals(String plantillatc) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'BECARIOS = :becarios'.
	 */
	public ArrAnualLab[] findWhereBecariosEquals(String becarios) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'MIR = :mir'.
	 */
	public ArrAnualLab[] findWhereMirEquals(String mir) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'ATS = :ats'.
	 */
	public ArrAnualLab[] findWhereAtsEquals(String ats) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'ATR = :atr'.
	 */
	public ArrAnualLab[] findWhereAtrEquals(String atr) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'SALAC = :salac'.
	 */
	public ArrAnualLab[] findWhereSalacEquals(String salac) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'SALAD = :salad'.
	 */
	public ArrAnualLab[] findWhereSaladEquals(String salad) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'IDEXCLUSIVA = :idexclusiva'.
	 */
	public ArrAnualLab[] findWhereIdexclusivaEquals(long idexclusiva) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'EXCLUSIVAS = :exclusivas'.
	 */
	public ArrAnualLab[] findWhereExclusivasEquals(String exclusivas) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'DIAS = :dias'.
	 */
	public ArrAnualLab[] findWhereDiasEquals(String dias) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'IDMP = :idmp'.
	 */
	public ArrAnualLab[] findWhereIdmpEquals(long idmp) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'IDDAI = :iddai'.
	 */
	public ArrAnualLab[] findWhereIddaiEquals(long iddai) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'IDCVEXTERNA = :idcvexterna'.
	 */
	public ArrAnualLab[] findWhereIdcvexternaEquals(long idcvexterna) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'IDCVINTERNA = :idcvinterna'.
	 */
	public ArrAnualLab[] findWhereIdcvinternaEquals(long idcvinterna) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'PROCEDIMIENTOS = :procedimientos'.
	 */
	public ArrAnualLab[] findWhereProcedimientosEquals(String procedimientos) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'IDPOLIGRAFO = :idpoligrafo'.
	 */
	public ArrAnualLab[] findWhereIdpoligrafoEquals(long idpoligrafo) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the criteria 'POLIGRAFO = :poligrafo'.
	 */
	public ArrAnualLab[] findWherePoligrafoEquals(String poligrafo) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the arr_anual_lab table that match the criteria 'ANE = :ane'.
	 */
	public ArrAnualLab[] findWhereAneEquals(int ane) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the arr_anual_lab table that match the criteria 'NRXFIJO = :nrxfijo'.
	 */
	public ArrAnualLab[] findWhereNrxfijoEquals(String nrxfijo) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the arr_anual_lab table that match the criteria 'NRXPORTATIL = :nrxportatil'.
	 */
	public ArrAnualLab[] findWhereNrxportatilEquals(String nrxportatil) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the arr_anual_lab table that match the criteria 'IDCRT = :idcrt'.
	 */
	public ArrAnualLab[] findWhereIdcrtEquals(int idcrt) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the arr_anual_lab table that match the criteria 'IDHOLTER = :idholter'.
	 */
	public ArrAnualLab[] findWhereIdholterEquals(int idholter) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the arr_anual_lab table that match the criteria 'IDDENREN = :iddenren'.
	 */
	public ArrAnualLab[] findWhereIddenrenEquals(int iddenren) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the arr_anual_lab table that match the criteria 'IDCIEORE = :idcieore'.
	 */
	public ArrAnualLab[] findWhereIdcieoreEquals(int idcieore) throws ArrAnualLabDaoException;
	
	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the specified arbitrary SQL statement
	 */
	public ArrAnualLab[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrAnualLabDaoException;

	/** 
	 * Returns all rows from the ARR_ANUAL_LAB table that match the specified arbitrary SQL statement
	 */
	public ArrAnualLab[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrAnualLabDaoException;

}
