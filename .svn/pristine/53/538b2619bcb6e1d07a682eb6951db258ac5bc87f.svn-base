/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface SegSintomasDao
{
	/** 
	 * Inserts a new row in the seg_sintomas table.
	 */
	public SegSintomasPk insert(SegSintomas dto) throws SegSintomasDaoException;

	/** 
	 * Updates a single row in the seg_sintomas table.
	 */
	public void update(SegSintomasPk pk, SegSintomas dto) throws SegSintomasDaoException;

	/** 
	 * Deletes a single row in the seg_sintomas table.
	 */
	public void delete(SegSintomasPk pk) throws SegSintomasDaoException;

	/** 
	 * Returns the rows from the seg_sintomas table that matches the specified primary-key value.
	 */
	public SegSintomas findByPrimaryKey(SegSintomasPk pk) throws SegSintomasDaoException;

	/** 
	 * Returns all rows from the seg_sintomas table that match the criteria 'IDSITCLIN = :idsitclin AND IDSINTOMA = :idsintoma'.
	 */
	public SegSintomas findByPrimaryKey(Integer idsitclin, String idsintoma) throws SegSintomasDaoException;

	/** 
	 * Returns all rows from the seg_sintomas table that match the criteria ''.
	 */
	public SegSintomas[] findAll() throws SegSintomasDaoException;

	/** 
	 * Returns all rows from the seg_sintomas table that match the criteria 'IDSITCLIN = :idsitclin'.
	 */
	public SegSintomas[] findBySegSituacionclinica(int idsitclin) throws SegSintomasDaoException;

	/** 
	 * Returns all rows from the seg_sintomas table that match the criteria 'IDSITCLIN = :idsitclin'.
	 */
	public SegSintomas[] findWhereIdsitclinEquals(int idsitclin) throws SegSintomasDaoException;

	/** 
	 * Returns all rows from the seg_sintomas table that match the criteria 'IDSINTOMA = :idsintoma'.
	 */
	public SegSintomas[] findWhereIdsintomaEquals(String idsintoma) throws SegSintomasDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the seg_sintomas table that match the specified arbitrary SQL statement
	 */
	public SegSintomas[] findByDynamicSelect(String sql, Object[] sqlParams) throws SegSintomasDaoException;

	/** 
	 * Returns all rows from the seg_sintomas table that match the specified arbitrary SQL statement
	 */
	public SegSintomas[] findByDynamicWhere(String sql, Object[] sqlParams) throws SegSintomasDaoException;

}
