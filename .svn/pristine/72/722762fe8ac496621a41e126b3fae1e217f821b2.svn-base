/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface SegComplicacionesDao
{
	/** 
	 * Inserts a new row in the seg_complicaciones table.
	 */
	public SegComplicacionesPk insert(SegComplicaciones dto) throws SegComplicacionesDaoException;

	/** 
	 * Updates a single row in the seg_complicaciones table.
	 */
	public void update(SegComplicacionesPk pk, SegComplicaciones dto) throws SegComplicacionesDaoException;

	/** 
	 * Deletes a single row in the seg_complicaciones table.
	 */
	public void delete(SegComplicacionesPk pk) throws SegComplicacionesDaoException;

	/** 
	 * Returns the rows from the seg_complicaciones table that matches the specified primary-key value.
	 */
	public SegComplicaciones findByPrimaryKey(SegComplicacionesPk pk) throws SegComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_complicaciones table that match the criteria 'IDCOMP = :idcomp AND IDSEG = :idseg'.
	 */
	public SegComplicaciones findByPrimaryKey(Integer idcomp, Integer idseg) throws SegComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_complicaciones table that match the criteria ''.
	 */
	public SegComplicaciones[] findAll() throws SegComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_complicaciones table that match the criteria 'IDSEG = :idseg'.
	 */
	public SegComplicaciones[] findBySegSeguimiento(int idseg) throws SegComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_complicaciones table that match the criteria 'IDCOMP = :idcomp'.
	 */
	public SegComplicaciones[] findWhereIdcompEquals(int idcomp) throws SegComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_complicaciones table that match the criteria 'IDSEG = :idseg'.
	 */
	public SegComplicaciones[] findWhereIdsegEquals(int idseg) throws SegComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_complicaciones table that match the criteria 'ACTITUD = :actitud'.
	 */
	public SegComplicaciones[] findWhereActitudEquals(String actitud) throws SegComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_complicaciones table that match the criteria 'RESULTADO = :resultado'.
	 */
	public SegComplicaciones[] findWhereResultadoEquals(String resultado) throws SegComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_complicaciones table that match the criteria 'OTRA = :otra'.
	 */
	public SegComplicaciones[] findWhereOtraEquals(String otra) throws SegComplicacionesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the seg_complicaciones table that match the specified arbitrary SQL statement
	 */
	public SegComplicaciones[] findByDynamicSelect(String sql, Object[] sqlParams) throws SegComplicacionesDaoException;

	/** 
	 * Returns all rows from the seg_complicaciones table that match the specified arbitrary SQL statement
	 */
	public SegComplicaciones[] findByDynamicWhere(String sql, Object[] sqlParams) throws SegComplicacionesDaoException;

}
