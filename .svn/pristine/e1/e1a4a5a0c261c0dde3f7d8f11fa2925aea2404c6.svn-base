/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.ArrayList;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface HolterDao
{
	/** 
	 * Inserts a new row in the holter table.
	 */
	public HolterPk insert(Holter dto) throws HolterDaoException;

	/** 
	 * Updates a single row in the holter table.
	 */
	public void update(HolterPk pk, Holter dto) throws HolterDaoException;

	/** 
	 * Deletes a single row in the holter table.
	 */
	public void delete(HolterPk pk) throws HolterDaoException;

	/** 
	 * Returns the rows from the holter table that matches the specified primary-key value.
	 */
	public Holter findByPrimaryKey(HolterPk pk) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'IDHOLTER = :idholter'.
	 */
	public Holter findByPrimaryKey(Integer idholter) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria ''.
	 */
	public Holter[] findAll() throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'IDHOLTER = :idholter'.
	 */
	public Holter[] findWhereIdholterEquals(int idholter) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'FECHACOLOCACION = :fechacolocacion'.
	 */
	public Holter[] findWhereFechacolocacionEquals(Date fechacolocacion) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'FECHALECTURA = :fechalectura'.
	 */
	public Holter[] findWhereFechalecturaEquals(Date fechalectura) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'FECHARETIRADA = :fecharetirada'.
	 */
	public Holter[] findWhereFecharetiradaEquals(Date fecharetirada) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'FECHANALISIS = :fechanalisis'.
	 */
	public Holter[] findWhereFechanalisisEquals(Date fechanalisis) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'ESTADO = :estado'.
	 */
	public Holter[] findWhereEstadoEquals(int estado) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'COMENTARIOS_COL = :comentariosCol'.
	 */
	public Holter[] findWhereComentariosColEquals(String comentariosCol) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'COMENTARIOS_ANA = :comentariosAna'.
	 */
	public Holter[] findWhereComentariosAnaEquals(String comentariosAna) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'RECOMENDACIONES = :recomendaciones'.
	 */
	public Holter[] findWhereRecomendacionesEquals(String recomendaciones) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'DIAGNOSTICOINI = :diagnosticoini'.
	 */
	public Holter[] findWhereDiagnosticoiniEquals(int diagnosticoini) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'DIAGNOSTICOFIN = :diagnosticofin'.
	 */
	public Holter[] findWhereDiagnosticofinEquals(int diagnosticofin) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'REFERIDOR = :referidor'.
	 */
	public Holter[] findWhereReferidorEquals(String referidor) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'COLOCACION_ENF = :colocacionEnf'.
	 */
	public Holter[] findWhereColocacionEnfEquals(String colocacionEnf) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'COLOCACION_MED = :colocacionMed'.
	 */
	public Holter[] findWhereColocacionMedEquals(String colocacionMed) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'ANALISIS_MED = :analisisMed'.
	 */
	public Holter[] findWhereAnalisisMedEquals(String analisisMed) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'RETIRADA_ENF = :retiradaEnf'.
	 */
	public Holter[] findWhereRetiradaEnfEquals(String retiradaEnf) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'RETIRADA_MED = :retiradaMed'.
	 */
	public Holter[] findWhereRetiradaMedEquals(String retiradaMed) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'NPROC = :nproc'.
	 */
	public Holter[] findWhereNprocEquals(String nproc) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'DIAGINIOTRO = :diaginiotro'.
	 */
	public Holter[] findWhereDiaginiotroEquals(String diaginiotro) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the criteria 'DIAGFINOTRO = :diagfinotro'.
	 */
	public Holter[] findWhereDiagfinotroEquals(String diagfinotro) throws HolterDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the holter table that match the specified arbitrary SQL statement
	 */
	public Holter[] findByDynamicSelect(String sql, Object[] sqlParams) throws HolterDaoException;

	/** 
	 * Returns all rows from the holter table that match the specified arbitrary SQL statement
	 */
	public Holter[] findByDynamicWhere(String sql, Object[] sqlParams) throws HolterDaoException;

	public ArrayList<ArrayList<Object>> getEstadisticasHolter(Date fechaini, Date fechafin) throws HolterDaoException;
	
	public ArrayList<ArrayList<Object>> getEstadisticas(Date fechaini, Date fechafin, int ind)throws HolterDaoException;
	
}
