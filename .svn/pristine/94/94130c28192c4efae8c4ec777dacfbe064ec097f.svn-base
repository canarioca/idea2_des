/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface ArrAccesoDao
{
	/** 
	 * Inserts a new row in the arr_acceso table.
	 */
	public ArrAccesoPk insert(ArrAcceso dto) throws ArrAccesoDaoException;

	/** 
	 * Updates a single row in the arr_acceso table.
	 */
	public void update(ArrAccesoPk pk, ArrAcceso dto) throws ArrAccesoDaoException;

	/** 
	 * Deletes a single row in the arr_acceso table.
	 */
	public void delete(ArrAccesoPk pk) throws ArrAccesoDaoException;

	/** 
	 * Returns the rows from the arr_acceso table that matches the specified primary-key value.
	 */
	public ArrAcceso findByPrimaryKey(ArrAccesoPk pk) throws ArrAccesoDaoException;

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'USUARIO = :usuario'.
	 */
	public ArrAcceso findByPrimaryKey(String usuario) throws ArrAccesoDaoException;
	public ArrAcceso findByPrimaryUsuarioPass(String usuario, String pass) throws ArrAccesoDaoException;

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria ''.
	 */
	public ArrAcceso[] findAll() throws ArrAccesoDaoException;

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'USUARIO = :usuario'.
	 */
	public ArrAcceso[] findWhereUsuarioEquals(String usuario) throws ArrAccesoDaoException;

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'IDROLACCESO = :idrolacceso'.
	 */
	public ArrAcceso[] findWhereIdrolaccesoEquals(int idrolacceso) throws ArrAccesoDaoException;

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'PASS = :pass'.
	 */
	public ArrAcceso[] findWherePassEquals(String pass) throws ArrAccesoDaoException;

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'FECHAULTACC = :fechaultacc'.
	 */
	public ArrAcceso[] findWhereFechaultaccEquals(Date fechaultacc) throws ArrAccesoDaoException;

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'FECHAREV = :fecharev'.
	 */
	public ArrAcceso[] findWhereFecharevEquals(Date fecharev) throws ArrAccesoDaoException;

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'CONTADOR = :contador'.
	 */
	public ArrAcceso[] findWhereContadorEquals(int contador) throws ArrAccesoDaoException;

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'NOMBRE = :nombre'.
	 */
	public ArrAcceso[] findWhereNombreEquals(String nombre) throws ArrAccesoDaoException;

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'APELLIDO1 = :apellido1'.
	 */
	public ArrAcceso[] findWhereApellido1Equals(String apellido1) throws ArrAccesoDaoException;

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'APELLIDO2 = :apellido2'.
	 */
	public ArrAcceso[] findWhereApellido2Equals(String apellido2) throws ArrAccesoDaoException;

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'CORREO = :correo'.
	 */
	public ArrAcceso[] findWhereCorreoEquals(String correo) throws ArrAccesoDaoException;

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'ACTIVO = :activo'.
	 */
	public ArrAcceso[] findWhereActivoEquals(int activo) throws ArrAccesoDaoException;

	/** 
	 * Returns all rows from the arr_acceso table that match the criteria 'CODIGO = :codigo'.
	 */
	public ArrAcceso[] findWhereCodigoEquals(String codigo) throws ArrAccesoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the arr_acceso table that match the specified arbitrary SQL statement
	 */
	public ArrAcceso[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrAccesoDaoException;

	/** 
	 * Returns all rows from the arr_acceso table that match the specified arbitrary SQL statement
	 */
	public ArrAcceso[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrAccesoDaoException;

}
