/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface PlanMedProcDao
{
	/** 
	 * Inserts a new row in the plan_med_proc table.
	 */
	public PlanMedProcPk insert(PlanMedProc dto) throws PlanMedProcDaoException;

	/** 
	 * Updates a single row in the plan_med_proc table.
	 */
	public void update(PlanMedProcPk pk, PlanMedProc dto) throws PlanMedProcDaoException;

	/** 
	 * Deletes a single row in the plan_med_proc table.
	 */
	public void delete(PlanMedProcPk pk) throws PlanMedProcDaoException;

	/** 
	 * Returns the rows from the plan_med_proc table that matches the specified primary-key value.
	 */
	public PlanMedProc findByPrimaryKey(PlanMedProcPk pk) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'IDPLANMEDPROC = :idplanmedproc'.
	 */
	public PlanMedProc findByPrimaryKey(Integer idplanmedproc) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria ''.
	 */
	public PlanMedProc[] findAll() throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'IDPLANMEDPROC = :idplanmedproc'.
	 */
	public PlanMedProc[] findWhereIdplanmedprocEquals(int idplanmedproc) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'IDPROCEDIMIENTO = :idprocedimiento'.
	 */
	public PlanMedProc[] findWhereIdprocedimientoEquals(int idprocedimiento) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'TIPOPROCEDIMIENTO = :tipoprocedimiento'.
	 */
	public PlanMedProc[] findWhereTipoprocedimientoEquals(int tipoprocedimiento) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'IDMEDGEN = :idmedgen'.
	 */
	public PlanMedProc[] findWhereIdmedgenEquals(int idmedgen) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'IDMEDCOM = :idmedcom'.
	 */
	public PlanMedProc[] findWhereIdmedcomEquals(int idmedcom) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'DOSIS = :dosis'.
	 */
	public PlanMedProc[] findWhereDosisEquals(String dosis) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'UNIDAD = :unidad'.
	 */
	public PlanMedProc[] findWhereUnidadEquals(String unidad) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'ADMINISTRACION = :administracion'.
	 */
	public PlanMedProc[] findWhereAdministracionEquals(String administracion) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'IDVIA = :idvia'.
	 */
	public PlanMedProc[] findWhereIdviaEquals(int idvia) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'FECHAPRESCRIPCION = :fechaprescripcion'.
	 */
	public PlanMedProc[] findWhereFechaprescripcionEquals(Date fechaprescripcion) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'FECHAINICIO = :fechainicio'.
	 */
	public PlanMedProc[] findWhereFechainicioEquals(Date fechainicio) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'FECHAMOD = :fechamod'.
	 */
	public PlanMedProc[] findWhereFechamodEquals(Date fechamod) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'FECHASUSPENSION = :fechasuspension'.
	 */
	public PlanMedProc[] findWhereFechasuspensionEquals(Date fechasuspension) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'MOTIVOSUSPENSION = :motivosuspension'.
	 */
	public PlanMedProc[] findWhereMotivosuspensionEquals(String motivosuspension) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'PRESCRIPTOR = :prescriptor'.
	 */
	public PlanMedProc[] findWherePrescriptorEquals(String prescriptor) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public PlanMedProc[] findWhereComentariosEquals(String comentarios) throws PlanMedProcDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the plan_med_proc table that match the specified arbitrary SQL statement
	 */
	public PlanMedProc[] findByDynamicSelect(String sql, Object[] sqlParams) throws PlanMedProcDaoException;

	/** 
	 * Returns all rows from the plan_med_proc table that match the specified arbitrary SQL statement
	 */
	public PlanMedProc[] findByDynamicWhere(String sql, Object[] sqlParams) throws PlanMedProcDaoException;

}
