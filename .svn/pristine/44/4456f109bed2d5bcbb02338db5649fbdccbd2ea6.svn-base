/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.util.UtilCodifi;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class GeneradorDaoImpl extends AbstractDAO implements GeneradorDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDGENERADOR, MODELO, FABRICANTE, TIPO, MODO, CONECTORAD, CONECTORVD, CONECTORVI, RF, MRI, CODIGO, CONECTOR_VD2, CONECTORVCS, NUMEROMODELO, GS128, IDRX, ACTIVO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDGENERADOR, MODELO, FABRICANTE, TIPO, MODO, CONECTORAD, CONECTORVD, CONECTORVI, RF, MRI, CODIGO, CONECTOR_VD2, CONECTORVCS, NUMEROMODELO, GS128, IDRX, ACTIVO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDGENERADOR = ?, MODELO = ?, FABRICANTE = ?, TIPO = ?, MODO = ?, CONECTORAD = ?, CONECTORVD = ?, CONECTORVI = ?, RF = ?, MRI = ?, CODIGO = ?, CONECTOR_VD2 = ?, CONECTORVCS = ?, NUMEROMODELO = ?, GS128 = ?, IDRX = ?, ACTIVO = ? WHERE IDGENERADOR = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDGENERADOR = ?";

	/** 
	 * Index of column IDGENERADOR
	 */
	protected static final int COLUMN_IDGENERADOR = 1;

	/** 
	 * Index of column MODELO
	 */
	protected static final int COLUMN_MODELO = 2;

	/** 
	 * Index of column FABRICANTE
	 */
	protected static final int COLUMN_FABRICANTE = 3;

	/** 
	 * Index of column TIPO
	 */
	protected static final int COLUMN_TIPO = 4;

	/** 
	 * Index of column MODO
	 */
	protected static final int COLUMN_MODO = 5;

	/** 
	 * Index of column CONECTORAD
	 */
	protected static final int COLUMN_CONECTORAD = 6;

	/** 
	 * Index of column CONECTORVD
	 */
	protected static final int COLUMN_CONECTORVD = 7;

	/** 
	 * Index of column CONECTORVI
	 */
	protected static final int COLUMN_CONECTORVI = 8;

	/** 
	 * Index of column RF
	 */
	protected static final int COLUMN_RF = 9;

	/** 
	 * Index of column MRI
	 */
	protected static final int COLUMN_MRI = 10;

	/** 
	 * Index of column CODIGO
	 */
	protected static final int COLUMN_CODIGO = 11;

	/** 
	 * Index of column CONECTOR_VD2
	 */
	protected static final int COLUMN_CONECTOR_VD2 = 12;

	/** 
	 * Index of column CONECTORVCS
	 */
	protected static final int COLUMN_CONECTORVCS = 13;

	/** 
	 * Index of column NUMEROMODELO
	 */
	protected static final int COLUMN_NUMEROMODELO = 14;

	/** 
	 * Index of column GS128
	 */
	protected static final int COLUMN_GS128 = 15;

	/** 
	 * Index of column IDRX
	 */
	protected static final int COLUMN_IDRX = 16;

	/** 
	 * Index of column ACTIVO
	 */
	protected static final int COLUMN_ACTIVO = 17;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 17;

	/** 
	 * Index of primary-key column IDGENERADOR
	 */
	protected static final int PK_COLUMN_IDGENERADOR = 1;

	/** 
	 * Inserts a new row in the generador table.
	 */
	public GeneradorPk insert(Generador dto) throws GeneradorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdgenerador() != null) {
				stmt.setInt( index++, dto.getIdgenerador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getModelo() );
			stmt.setString( index++, dto.getFabricante() );
			stmt.setString( index++, dto.getTipo() );
			stmt.setString( index++, dto.getModo() );
			stmt.setString( index++, dto.getConectorad() );
			stmt.setString( index++, dto.getConectorvd() );
			stmt.setString( index++, dto.getConectorvi() );
			if (dto.getRf() != null) {
				stmt.setShort( index++, dto.getRf().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getMri() != null) {
				stmt.setShort( index++, dto.getMri().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getCodigo() );
			stmt.setString( index++, dto.getConectorVd2() );
			stmt.setString( index++, dto.getConectorvcs() );
			stmt.setString( index++, dto.getNumeromodelo() );
			stmt.setString( index++, dto.getGs128() );
			stmt.setString( index++, dto.getIdrx() );
			if (dto.getActivo() != null) {
				stmt.setInt( index++, dto.getActivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdgenerador( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GeneradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the generador table.
	 */
	public void update(GeneradorPk pk, Generador dto) throws GeneradorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdgenerador() != null) {
				stmt.setInt( index++, dto.getIdgenerador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getModelo() );
			stmt.setString( index++, dto.getFabricante() );
			stmt.setString( index++, dto.getTipo() );
			stmt.setString( index++, dto.getModo() );
			stmt.setString( index++, dto.getConectorad() );
			stmt.setString( index++, dto.getConectorvd() );
			stmt.setString( index++, dto.getConectorvi() );
			if (dto.getRf() != null) {
				stmt.setShort( index++, dto.getRf().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			if (dto.getMri() != null) {
				stmt.setShort( index++, dto.getMri().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getCodigo() );
			stmt.setString( index++, dto.getConectorVd2() );
			stmt.setString( index++, dto.getConectorvcs() );
			stmt.setString( index++, dto.getNumeromodelo() );
			stmt.setString( index++, dto.getGs128() );
			stmt.setString( index++, dto.getIdrx() );
			if (dto.getActivo() != null) {
				stmt.setInt( index++, dto.getActivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (pk.getIdgenerador() != null) {
				stmt.setInt( 18, pk.getIdgenerador().intValue() );
			} else {
				stmt.setNull(18, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GeneradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the generador table.
	 */
	public void delete(GeneradorPk pk) throws GeneradorDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdgenerador() != null) {
				stmt.setInt( 1, pk.getIdgenerador().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GeneradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the generador table that matches the specified primary-key value.
	 */
	public Generador findByPrimaryKey(GeneradorPk pk) throws GeneradorDaoException
	{
		return findByPrimaryKey( pk.getIdgenerador() );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'IDGENERADOR = :idgenerador'.
	 */
	public Generador findByPrimaryKey(Integer idgenerador) throws GeneradorDaoException
	{
		Generador ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDGENERADOR = ?", new Object[] { idgenerador } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the generador table that match the criteria ''.
	 */
	public Generador[] findAll() throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDGENERADOR", null );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'IDGENERADOR = :idgenerador'.
	 */
	public Generador[] findWhereIdgeneradorEquals(int idgenerador) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDGENERADOR = ? ORDER BY IDGENERADOR", new Object[] {  new Integer(idgenerador) } );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'MODELO = :modelo'.
	 */
	public Generador[] findWhereModeloEquals(String modelo) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MODELO = ? ORDER BY MODELO", new Object[] { modelo } );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'FABRICANTE = :fabricante'.
	 */
	public Generador[] findWhereFabricanteEquals(String fabricante) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FABRICANTE = ? ORDER BY FABRICANTE", new Object[] { fabricante } );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'TIPO = :tipo'.
	 */
	public Generador[] findWhereTipoEquals(String tipo) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TIPO = ? ORDER BY TIPO", new Object[] { tipo } );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'MODO = :modo'.
	 */
	public Generador[] findWhereModoEquals(String modo) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MODO = ? ORDER BY MODO", new Object[] { modo } );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'CONECTORAD = :conectorad'.
	 */
	public Generador[] findWhereConectoradEquals(String conectorad) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONECTORAD = ? ORDER BY CONECTORAD", new Object[] { conectorad } );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'CONECTORVD = :conectorvd'.
	 */
	public Generador[] findWhereConectorvdEquals(String conectorvd) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONECTORVD = ? ORDER BY CONECTORVD", new Object[] { conectorvd } );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'CONECTORVI = :conectorvi'.
	 */
	public Generador[] findWhereConectorviEquals(String conectorvi) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONECTORVI = ? ORDER BY CONECTORVI", new Object[] { conectorvi } );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'RF = :rf'.
	 */
	public Generador[] findWhereRfEquals(short rf) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RF = ? ORDER BY RF", new Object[] {  new Short(rf) } );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'MRI = :mri'.
	 */
	public Generador[] findWhereMriEquals(short mri) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MRI = ? ORDER BY MRI", new Object[] {  new Short(mri) } );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'CODIGO = :codigo'.
	 */
	public Generador[] findWhereCodigoEquals(String codigo) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CODIGO = ? ORDER BY CODIGO", new Object[] { codigo } );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'CONECTOR_VD2 = :conectorVd2'.
	 */
	public Generador[] findWhereConectorVd2Equals(String conectorVd2) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONECTOR_VD2 = ? ORDER BY CONECTOR_VD2", new Object[] { conectorVd2 } );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'CONECTORVCS = :conectorvcs'.
	 */
	public Generador[] findWhereConectorvcsEquals(String conectorvcs) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONECTORVCS = ? ORDER BY CONECTORVCS", new Object[] { conectorvcs } );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'NUMEROMODELO = :numeromodelo'.
	 */
	public Generador[] findWhereNumeromodeloEquals(String numeromodelo) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMEROMODELO = ? ORDER BY NUMEROMODELO", new Object[] { numeromodelo } );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'GS128 = :gs128'.
	 */
	public Generador[] findWhereGs128Equals(String gs128) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GS128 = ? ORDER BY GS128", new Object[] { gs128 } );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'IDRX = :idrx'.
	 */
	public Generador[] findWhereIdrxEquals(String idrx) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDRX = ? ORDER BY IDRX", new Object[] { idrx } );
	}

	/** 
	 * Returns all rows from the generador table that match the criteria 'ACTIVO = :activo'.
	 */
	public Generador[] findWhereActivoEquals(int activo) throws GeneradorDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTIVO = ? ORDER BY ACTIVO", new Object[] {  new Integer(activo) } );
	}

	/**
	 * Method 'GeneradorDaoImpl'
	 * 
	 */
	public GeneradorDaoImpl()
	{
	}
	public GeneradorDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public GeneradorDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'GeneradorDaoImpl'
	 * 
	 * @param userConn
	 */
	public GeneradorDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.generador";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Generador fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Generador dto = new Generador();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Generador[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Generador dto = new Generador();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Generador ret[] = new Generador[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Generador dto, ResultSet rs) throws SQLException
	{
		dto.setIdgenerador( new Integer( rs.getInt(COLUMN_IDGENERADOR) ) );
		dto.setModelo( rs.getString( COLUMN_MODELO ) );
		dto.setFabricante( rs.getString( COLUMN_FABRICANTE ) );
		dto.setTipo( rs.getString( COLUMN_TIPO ) );
		dto.setModo( rs.getString( COLUMN_MODO ) );
		dto.setConectorad( rs.getString( COLUMN_CONECTORAD ) );
		dto.setConectorvd( rs.getString( COLUMN_CONECTORVD ) );
		dto.setConectorvi( rs.getString( COLUMN_CONECTORVI ) );
		dto.setRf( new Short( rs.getShort(COLUMN_RF) ) );
		if (rs.wasNull()) {
			dto.setRf( null );
		}
		
		dto.setMri( new Short( rs.getShort(COLUMN_MRI) ) );
		if (rs.wasNull()) {
			dto.setMri( null );
		}
		
		dto.setCodigo( rs.getString( COLUMN_CODIGO ) );
		dto.setConectorVd2( rs.getString( COLUMN_CONECTOR_VD2 ) );
		dto.setConectorvcs( rs.getString( COLUMN_CONECTORVCS ) );
		dto.setNumeromodelo( rs.getString( COLUMN_NUMEROMODELO ) );
		dto.setGs128( rs.getString( COLUMN_GS128 ) );
		dto.setIdrx( rs.getString( COLUMN_IDRX ) );
		dto.setActivo( new Integer( rs.getInt(COLUMN_ACTIVO) ) );
		if (rs.wasNull()) {
			dto.setActivo( null );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Generador dto)
	{
	}

	/** 
	 * Returns all rows from the generador table that match the specified arbitrary SQL statement
	 */
	public Generador[] findByDynamicSelect(String sql, Object[] sqlParams) throws GeneradorDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GeneradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the generador table that match the specified arbitrary SQL statement
	 */
	public Generador[] findByDynamicWhere(String sql, Object[] sqlParams) throws GeneradorDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new GeneradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	public ArrayList<ArrayList<Object>> findByDynamicSelect(String sql) throws GeneradorDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return UtilCodifi.Results2Array(rs);
		}
		catch (Exception _e) {
			throw new GeneradorDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
	public ArrayList<ArrayList<Object>> getGeneradorProcedimiento(int id) throws GeneradorDaoException{
		StringBuffer sql = new StringBuffer();
		sql.append("select gen.modelo MODELO, ");
		sql.append(" gen.tipo TIPO ");
		sql.append(" from imp_implante imp, ");
		sql.append(" imp_hoja_implante himp, ");
		sql.append(" imp_generador impgen, ");
		sql.append(" generador gen ");
		sql.append(" WHERE imp.idimplante = "+id);
		sql.append(" and himp.idhojaimp = imp.idhojaimp ");
		sql.append(" and impgen.idhojaimp = himp.idhojaimp ");
		sql.append(" and impgen.motivoexplante IS NULL");
		sql.append(" and gen.idgenerador = impgen.idgenerador ");
		return findByDynamicSelect(sql.toString());
	}

}
