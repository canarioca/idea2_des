/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.sql.ResultSet;
import java.util.ArrayList;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface ArrEstudioAblacionDao
{
	/** 
	 * Inserts a new row in the ARR_ESTUDIO_ABLACION table.
	 */
	public ArrEstudioAblacionPk insert(ArrEstudioAblacion dto) throws ArrEstudioAblacionDaoException;

	/** 
	 * Updates a single row in the ARR_ESTUDIO_ABLACION table.
	 */
	public void update(ArrEstudioAblacionPk pk, ArrEstudioAblacion dto) throws ArrEstudioAblacionDaoException;

	/** 
	 * Deletes a single row in the ARR_ESTUDIO_ABLACION table.
	 */
	public void delete(ArrEstudioAblacionPk pk) throws ArrEstudioAblacionDaoException;
	public void delete(Integer idestudio) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns the rows from the ARR_ESTUDIO_ABLACION table that matches the specified primary-key value.
	 */
	public ArrEstudioAblacion findByPrimaryKey(ArrEstudioAblacionPk pk) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDABLACION = :idablacion'.
	 */
	public ArrEstudioAblacion findByPrimaryKey(Integer idestudio, Integer sustrato) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria ''.
	 */
	public ArrEstudioAblacion[] findAll() throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDESTUDIO = :idestudio'.
	 */
	public ArrEstudioAblacion[] findWhereIdestudioEquals(long idestudio) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'SUSTRATO = :sustrato'.
	 */
	public ArrEstudioAblacion[] findWhereSustratoEquals(long sustrato) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDABORDAJE = :idabordaje'.
	 */
	public ArrEstudioAblacion[] findWhereIdabordajeEquals(long idabordaje) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDENERGIA = :idenergia'.
	 */
	public ArrEstudioAblacion[] findWhereIdenergiaEquals(long idenergia) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'TRADIO = :tradio'.
	 */
	public ArrEstudioAblacion[] findWhereTradioEquals(String tradio) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'TCRIO = :tcrio'.
	 */
	public ArrEstudioAblacion[] findWhereTcrioEquals(String tcrio) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDNODO = :idnodo'.
	 */
	public ArrEstudioAblacion[] findWhereIdnodoEquals(long idnodo) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDDCHA = :iddcha'.
	 */
	public ArrEstudioAblacion[] findWhereIddchaEquals(long iddcha) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDPARASEP = :idparasep'.
	 */
	public ArrEstudioAblacion[] findWhereIdparasepEquals(long idparasep) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDIZDA = :idizda'.
	 */
	public ArrEstudioAblacion[] findWhereIdizdaEquals(long idizda) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDEPI = :idepi'.
	 */
	public ArrEstudioAblacion[] findWhereIdepiEquals(long idepi) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDFLUTER = :idfluter'.
	 */
	public ArrEstudioAblacion[] findWhereIdfluterEquals(long idfluter) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDFIBRI = :idfibri'.
	 */
	public ArrEstudioAblacion[] findWhereIdfibriEquals(long idfibri) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDSEGMEN = :idsegmen'.
	 */
	public ArrEstudioAblacion[] findWhereIdsegmenEquals(long idsegmen) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDTV = :idtv'.
	 */
	public ArrEstudioAblacion[] findWhereIdtvEquals(long idtv) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDIAM = :idiam'.
	 */
	public ArrEstudioAblacion[] findWhereIdiamEquals(long idiam) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDCONVENC = :idconvenc'.
	 */
	public ArrEstudioAblacion[] findWhereIdconvencEquals(long idconvenc) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDNOIAM = :idnoiam'.
	 */
	public ArrEstudioAblacion[] findWhereIdnoiamEquals(long idnoiam) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'IDDAVD = :iddavd'.
	 */
	public ArrEstudioAblacion[] findWhereIddavdEquals(long iddavd) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the criteria 'OTRO = :otro'.
	 */
	public ArrEstudioAblacion[] findWhereOtroEquals(String otro) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the arr_estudio_ablacion table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ArrEstudioAblacion[] findWhereComentariosEquals(String comentarios) throws ArrEstudioAblacionDaoException;
	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the specified arbitrary SQL statement
	 */
	public ArrEstudioAblacion[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrEstudioAblacionDaoException;
	public ArrayList<ArrayList<Object>> findByDynamicSelect(String sql) throws ArrEstudioAblacionDaoException;

	/** 
	 * Returns all rows from the ARR_ESTUDIO_ABLACION table that match the specified arbitrary SQL statement
	 */
	public ArrEstudioAblacion[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrEstudioAblacionDaoException;
	
	/**
	 * ESTADISTICAS
	 */
	public ArrayList<ArrayList<Object>> getEstadisticas(ArrEstudioAblacion ablacion) throws ArrEstudioAblacionDaoException;

}
