/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.ArrayList;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface ComplicacionesPacientesDao
{
	/** 
	 * Inserts a new row in the complicaciones_pacientes table.
	 */
	public ComplicacionesPacientesPk insert(ComplicacionesPacientes dto) throws ComplicacionesPacientesDaoException;

	/** 
	 * Updates a single row in the complicaciones_pacientes table.
	 */
	public void update(ComplicacionesPacientesPk pk, ComplicacionesPacientes dto) throws ComplicacionesPacientesDaoException;

	/** 
	 * Deletes a single row in the complicaciones_pacientes table.
	 */
	public void delete(ComplicacionesPacientesPk pk) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns the rows from the complicaciones_pacientes table that matches the specified primary-key value.
	 */
	public ComplicacionesPacientes findByPrimaryKey(ComplicacionesPacientesPk pk) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'IDCOMPAC = :idcompac'.
	 */
	public ComplicacionesPacientes findByPrimaryKey(Integer idcompac) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria ''.
	 */
	public ComplicacionesPacientes[] findAll() throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'IDCOMPAC = :idcompac'.
	 */
	public ComplicacionesPacientes[] findWhereIdcompacEquals(int idcompac) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'IDPACIENTE = :idpaciente'.
	 */
	public ComplicacionesPacientes[] findWhereIdpacienteEquals(int idpaciente) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'TIPO = :tipo'.
	 */
	public ComplicacionesPacientes[] findWhereTipoEquals(int tipo) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'TIPOPROCEDIMIENTO = :tipoprocedimiento'.
	 */
	public ComplicacionesPacientes[] findWhereTipoprocedimientoEquals(int tipoprocedimiento) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'IDPROCEDIMIENTO = :idprocedimiento'.
	 */
	public ComplicacionesPacientes[] findWhereIdprocedimientoEquals(int idprocedimiento) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'COMPLICACION = :complicacion'.
	 */
	public ComplicacionesPacientes[] findWhereComplicacionEquals(int complicacion) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'COMPLICACION1 = :complicacion1'.
	 */
	public ComplicacionesPacientes[] findWhereComplicacion1Equals(int complicacion1) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'COMPLICACION_OTRA = :complicacionOtra'.
	 */
	public ComplicacionesPacientes[] findWhereComplicacionOtraEquals(String complicacionOtra) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'IDRELACION = :idrelacion'.
	 */
	public ComplicacionesPacientes[] findWhereIdrelacionEquals(int idrelacion) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'IDLUGAR = :idlugar'.
	 */
	public ComplicacionesPacientes[] findWhereIdlugarEquals(int idlugar) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'FECHAINI = :fechaini'.
	 */
	public ComplicacionesPacientes[] findWhereFechainiEquals(Date fechaini) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'FECHAFIN = :fechafin'.
	 */
	public ComplicacionesPacientes[] findWhereFechafinEquals(Date fechafin) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'RESUELTA = :resuelta'.
	 */
	public ComplicacionesPacientes[] findWhereResueltaEquals(int resuelta) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'RESUELTA_OTROS = :resueltaOtros'.
	 */
	public ComplicacionesPacientes[] findWhereResueltaOtrosEquals(String resueltaOtros) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'TRATAMIENTO = :tratamiento'.
	 */
	public ComplicacionesPacientes[] findWhereTratamientoEquals(int tratamiento) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'TRATAMIENTO_TIPO = :tratamientoTipo'.
	 */
	public ComplicacionesPacientes[] findWhereTratamientoTipoEquals(int tratamientoTipo) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'TRATAMIENTO_DESCR = :tratamientoDescr'.
	 */
	public ComplicacionesPacientes[] findWhereTratamientoDescrEquals(String tratamientoDescr) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'INGRESO = :ingreso'.
	 */
	public ComplicacionesPacientes[] findWhereIngresoEquals(int ingreso) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'DESCRIPCION = :descripcion'.
	 */
	public ComplicacionesPacientes[] findWhereDescripcionEquals(String descripcion) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the criteria 'COMPLICACION2 = :complicacion2'.
	 */
	public ComplicacionesPacientes[] findWhereComplicacion2Equals(int complicacion2) throws ComplicacionesPacientesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the specified arbitrary SQL statement
	 */
	public ComplicacionesPacientes[] findByDynamicSelect(String sql, Object[] sqlParams) throws ComplicacionesPacientesDaoException;

	/** 
	 * Returns all rows from the complicaciones_pacientes table that match the specified arbitrary SQL statement
	 */
	public ComplicacionesPacientes[] findByDynamicWhere(String sql, Object[] sqlParams) throws ComplicacionesPacientesDaoException;

	public ArrayList<ArrayList<Object>> getComplicacionesTipoProc(Integer idrelacion, Date fechaini, Date fechafin) throws ComplicacionesPacientesDaoException;
	
}
