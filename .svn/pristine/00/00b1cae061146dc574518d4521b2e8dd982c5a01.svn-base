/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface SegObservacionesDaiDao
{
	/** 
	 * Inserts a new row in the seg_observaciones_dai table.
	 */
	public SegObservacionesDaiPk insert(SegObservacionesDai dto) throws SegObservacionesDaiDaoException;

	/** 
	 * Updates a single row in the seg_observaciones_dai table.
	 */
	public void update(SegObservacionesDaiPk pk, SegObservacionesDai dto) throws SegObservacionesDaiDaoException;

	/** 
	 * Deletes a single row in the seg_observaciones_dai table.
	 */
	public void delete(SegObservacionesDaiPk pk) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns the rows from the seg_observaciones_dai table that matches the specified primary-key value.
	 */
	public SegObservacionesDai findByPrimaryKey(SegObservacionesDaiPk pk) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'IDOBSDAI = :idobsdai'.
	 */
	public SegObservacionesDai findByPrimaryKey(Integer idobsdai) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria ''.
	 */
	public SegObservacionesDai[] findAll() throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'IDOBSDAI = :idobsdai'.
	 */
	public SegObservacionesDai[] findWhereIdobsdaiEquals(int idobsdai) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'NUMEPISODIOS = :numepisodios'.
	 */
	public SegObservacionesDai[] findWhereNumepisodiosEquals(String numepisodios) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'NUMEPITSV = :numepitsv'.
	 */
	public SegObservacionesDai[] findWhereNumepitsvEquals(String numepitsv) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'NUMEPITV = :numepitv'.
	 */
	public SegObservacionesDai[] findWhereNumepitvEquals(String numepitv) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'NUMEPIFV = :numepifv'.
	 */
	public SegObservacionesDai[] findWhereNumepifvEquals(String numepifv) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'NUMEPINOSOST = :numepinosost'.
	 */
	public SegObservacionesDai[] findWhereNumepinosostEquals(String numepinosost) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'NUMEPINOESP = :numepinoesp'.
	 */
	public SegObservacionesDai[] findWhereNumepinoespEquals(String numepinoesp) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'ATP = :atp'.
	 */
	public SegObservacionesDai[] findWhereAtpEquals(short atp) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'NUMTERATP = :numteratp'.
	 */
	public SegObservacionesDai[] findWhereNumteratpEquals(String numteratp) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'TODASEFECATP = :todasefecatp'.
	 */
	public SegObservacionesDai[] findWhereTodasefecatpEquals(short todasefecatp) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'CHOQ = :choq'.
	 */
	public SegObservacionesDai[] findWhereChoqEquals(short choq) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'NUMTERCHOQ = :numterchoq'.
	 */
	public SegObservacionesDai[] findWhereNumterchoqEquals(String numterchoq) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'TODASEFECTCHOQ = :todasefectchoq'.
	 */
	public SegObservacionesDai[] findWhereTodasefectchoqEquals(short todasefectchoq) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'ULTCHOQENERGIA = :ultchoqenergia'.
	 */
	public SegObservacionesDai[] findWhereUltchoqenergiaEquals(String ultchoqenergia) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'ULTCHOQTCARGA = :ultchoqtcarga'.
	 */
	public SegObservacionesDai[] findWhereUltchoqtcargaEquals(String ultchoqtcarga) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'ULTCHOQIMPEDANCIA = :ultchoqimpedancia'.
	 */
	public SegObservacionesDai[] findWhereUltchoqimpedanciaEquals(String ultchoqimpedancia) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'TODASAPROPIADAS = :todasapropiadas'.
	 */
	public SegObservacionesDai[] findWhereTodasapropiadasEquals(int todasapropiadas) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'MOTIVOTODASAPROPIADAS = :motivotodasapropiadas'.
	 */
	public SegObservacionesDai[] findWhereMotivotodasapropiadasEquals(int motivotodasapropiadas) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the criteria 'EPIRUIDO = :epiruido'.
	 */
	public SegObservacionesDai[] findWhereEpiruidoEquals(short epiruido) throws SegObservacionesDaiDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the specified arbitrary SQL statement
	 */
	public SegObservacionesDai[] findByDynamicSelect(String sql, Object[] sqlParams) throws SegObservacionesDaiDaoException;

	/** 
	 * Returns all rows from the seg_observaciones_dai table that match the specified arbitrary SQL statement
	 */
	public SegObservacionesDai[] findByDynamicWhere(String sql, Object[] sqlParams) throws SegObservacionesDaiDaoException;

}
