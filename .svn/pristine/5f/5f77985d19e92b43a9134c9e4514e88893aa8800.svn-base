/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.util.ArrayList;
import java.util.Date;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface ArrRegistradorDao
{
	/** 
	 * Inserts a new row in the arr_registrador table.
	 */
	public ArrRegistradorPk insert(ArrRegistrador dto) throws ArrRegistradorDaoException;

	/** 
	 * Updates a single row in the arr_registrador table.
	 */
	public void update(ArrRegistradorPk pk, ArrRegistrador dto) throws ArrRegistradorDaoException;

	/** 
	 * Deletes a single row in the arr_registrador table.
	 */
	public void delete(ArrRegistradorPk pk) throws ArrRegistradorDaoException;

	/** 
	 * Returns the rows from the arr_registrador table that matches the specified primary-key value.
	 */
	public ArrRegistrador findByPrimaryKey(ArrRegistradorPk pk) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'ID_REGISTRADOR = :idRegistrador'.
	 */
	public ArrRegistrador findByPrimaryKey(Integer idRegistrador) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria ''.
	 */
	public ArrRegistrador[] findAll() throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'ID_PACIENTE = :idPaciente'.
	 */
	public ArrRegistrador[] findWhereIdPacienteEquals(int idPaciente) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'ID_REGISTRADOR = :idRegistrador'.
	 */
	public ArrRegistrador[] findWhereIdRegistradorEquals(int idRegistrador) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'FECHA = :fecha'.
	 */
	public ArrRegistrador[] findWhereFechaEquals(Date fecha) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'NPROC = :nproc'.
	 */
	public ArrRegistrador[] findWhereNprocEquals(String nproc) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'REFERIDOR = :referidor'.
	 */
	public ArrRegistrador[] findWhereReferidorEquals(String referidor) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'INDICACION = :indicacion'.
	 */
	public ArrRegistrador[] findWhereIndicacionEquals(int indicacion) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'INDICACIONSINCOPE = :indicacionsincope'.
	 */
	public ArrRegistrador[] findWhereIndicacionsincopeEquals(int indicacionsincope) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'INDICACIONSINCOPEN = :indicacionsincopen'.
	 */
	public ArrRegistrador[] findWhereIndicacionsincopenEquals(int indicacionsincopen) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'OP_ENF = :opEnf'.
	 */
	public ArrRegistrador[] findWhereOpEnfEquals(String opEnf) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'OP_MED = :opMed'.
	 */
	public ArrRegistrador[] findWhereOpMedEquals(String opMed) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'IMPLANTE_SALA = :implanteSala'.
	 */
	public ArrRegistrador[] findWhereImplanteSalaEquals(String implanteSala) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'IMPLANTE_MODELO = :implanteModelo'.
	 */
	public ArrRegistrador[] findWhereImplanteModeloEquals(String implanteModelo) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'IMPLANTE_ZONA = :implanteZona'.
	 */
	public ArrRegistrador[] findWhereImplanteZonaEquals(int implanteZona) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'CARDIOPATIA = :cardiopatia'.
	 */
	public ArrRegistrador[] findWhereCardiopatiaEquals(int cardiopatia) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_A = :sheldonA'.
	 */
	public ArrRegistrador[] findWhereSheldonAEquals(int sheldonA) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_B = :sheldonB'.
	 */
	public ArrRegistrador[] findWhereSheldonBEquals(int sheldonB) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_C = :sheldonC'.
	 */
	public ArrRegistrador[] findWhereSheldonCEquals(int sheldonC) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_D = :sheldonD'.
	 */
	public ArrRegistrador[] findWhereSheldonDEquals(int sheldonD) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_E = :sheldonE'.
	 */
	public ArrRegistrador[] findWhereSheldonEEquals(int sheldonE) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_F = :sheldonF'.
	 */
	public ArrRegistrador[] findWhereSheldonFEquals(int sheldonF) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'SHELDON_G = :sheldonG'.
	 */
	public ArrRegistrador[] findWhereSheldonGEquals(int sheldonG) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'RES_N1 = :resN1'.
	 */
	public ArrRegistrador[] findWhereResN1Equals(int resN1) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'RES_N2 = :resN2'.
	 */
	public ArrRegistrador[] findWhereResN2Equals(int resN2) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'EXPLANTE_FECHA = :explanteFecha'.
	 */
	public ArrRegistrador[] findWhereExplanteFechaEquals(Date explanteFecha) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'EXPLANTE_OP_ENF = :explanteOpEnf'.
	 */
	public ArrRegistrador[] findWhereExplanteOpEnfEquals(String explanteOpEnf) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'EXPLANTE_OPMED = :explanteOpmed'.
	 */
	public ArrRegistrador[] findWhereExplanteOpmedEquals(String explanteOpmed) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'EXPLANTE_DIAGNOSTICO = :explanteDiagnostico'.
	 */
	public ArrRegistrador[] findWhereExplanteDiagnosticoEquals(int explanteDiagnostico) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ArrRegistrador[] findWhereComentariosEquals(String comentarios) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'COMPLICACIONES = :complicaciones'.
	 */
	public ArrRegistrador[] findWhereComplicacionesEquals(String complicaciones) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'EPISODIO = :episodio'.
	 */
	public ArrRegistrador[] findWhereEpisodioEquals(String episodio) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'NSERIE = :nserie'.
	 */
	public ArrRegistrador[] findWhereNserieEquals(String nserie) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the criteria 'IDMODELOREG = :idmodeloreg'.
	 */
	public ArrRegistrador[] findWhereIdmodeloregEquals(int idmodeloreg) throws ArrRegistradorDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the arr_registrador table that match the specified arbitrary SQL statement
	 */
	public ArrRegistrador[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrRegistradorDaoException;

	/** 
	 * Returns all rows from the arr_registrador table that match the specified arbitrary SQL statement
	 */
	public ArrRegistrador[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrRegistradorDaoException;
	public ArrayList<ArrayList<Object>> getEstadisticasRegistrador(Date fechaini, Date fechafin) throws ArrRegistradorDaoException;
	public ArrayList<ArrayList<Object>> getEstadisticas(Date fechaini, Date fechafin, int ind) throws ArrRegistradorDaoException;
	public ArrayList<ArrayList<Object>> getConsultaRegEv(String modelo, String nserie,String nserie2, String fab, Date fini, Date ffin) throws ArrRegistradorDaoException;
}
