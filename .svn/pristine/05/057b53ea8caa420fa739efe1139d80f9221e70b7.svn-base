/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface ArrAccesoModulosDao
{
	/** 
	 * Inserts a new row in the arr_acceso_modulos table.
	 */
	public ArrAccesoModulosPk insert(ArrAccesoModulos dto) throws ArrAccesoModulosDaoException;

	/** 
	 * Updates a single row in the arr_acceso_modulos table.
	 */
	public void update(ArrAccesoModulosPk pk, ArrAccesoModulos dto) throws ArrAccesoModulosDaoException;

	/** 
	 * Deletes a single row in the arr_acceso_modulos table.
	 */
	public void delete(ArrAccesoModulosPk pk) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns the rows from the arr_acceso_modulos table that matches the specified primary-key value.
	 */
	public ArrAccesoModulos findByPrimaryKey(ArrAccesoModulosPk pk) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'USUARIO = :usuario'.
	 */
	public ArrAccesoModulos findByPrimaryKey(String usuario) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria ''.
	 */
	public ArrAccesoModulos[] findAll() throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'USUARIO = :usuario'.
	 */
	public ArrAccesoModulos[] findWhereUsuarioEquals(String usuario) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'EEF = :eef'.
	 */
	public ArrAccesoModulos[] findWhereEefEquals(int eef) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'IMPLANTE = :implante'.
	 */
	public ArrAccesoModulos[] findWhereImplanteEquals(int implante) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'REGISTRADOR = :registrador'.
	 */
	public ArrAccesoModulos[] findWhereRegistradorEquals(int registrador) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'MESA = :mesa'.
	 */
	public ArrAccesoModulos[] findWhereMesaEquals(int mesa) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'TEST = :test'.
	 */
	public ArrAccesoModulos[] findWhereTestEquals(int test) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'ESTADISTICAS = :estadisticas'.
	 */
	public ArrAccesoModulos[] findWhereEstadisticasEquals(int estadisticas) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'ADMINISTRACION = :administracion'.
	 */
	public ArrAccesoModulos[] findWhereAdministracionEquals(int administracion) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'CV = :cv'.
	 */
	public ArrAccesoModulos[] findWhereCvEquals(int cv) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'LESPERA = :lespera'.
	 */
	public ArrAccesoModulos[] findWhereLesperaEquals(int lespera) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'HOLTER = :holter'.
	 */
	public ArrAccesoModulos[] findWhereHolterEquals(int holter) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'ELR = :elr'.
	 */
	public ArrAccesoModulos[] findWhereElrEquals(int elr) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'PROTOCOLOS = :protocolos'.
	 */
	public ArrAccesoModulos[] findWhereProtocolosEquals(int protocolos) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the criteria 'TEST_ORTO = :testOrto'.
	 */
	public ArrAccesoModulos[] findWhereTestOrtoEquals(int testOrto) throws ArrAccesoModulosDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the specified arbitrary SQL statement
	 */
	public ArrAccesoModulos[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrAccesoModulosDaoException;

	/** 
	 * Returns all rows from the arr_acceso_modulos table that match the specified arbitrary SQL statement
	 */
	public ArrAccesoModulos[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrAccesoModulosDaoException;

}
