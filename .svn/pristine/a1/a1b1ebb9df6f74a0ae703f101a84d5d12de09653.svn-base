/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import java.util.Date;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class RcPsicologiaDaoImpl extends AbstractDAO implements RcPsicologiaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_RC_PSICOLOGIA, FECHA, ID_ESTADO_CIVIL, PROFESION, ID_NIVEL_ESTUDIOS, ID_SITUACION_LABORAL, ID_SITUACION_ECONOMICA, ID_CALIDAD_SUENO, ANTEC_PSIQ_PERS, ANTEC_PSIQ_PERS_DIAG, ANTEC_PSIQ_FAM, ANTEC_PSIQ_FAM_DIAG, ANTEC_PSIQ_FAM_FINAL, ID_APOYO_SOCIAL, NUM_HIJOS, ID_FAMILIA, ID_NIVEL_IRRITABILIDAD, ID_NIVEL_SATISFACCION, ID_VIDA_SEXUAL, PARAMETRO_DBI_II, PARAMETRO_STAI, PARAMETRO_AE, PARAMETRO_AR, PARAMETRO_FSP, PARAMETRO_AFN, PARAMETRO_REP, PARAMETRO_EEA, PARAMETRO_EVI, PARAMETRO_BAS, PARAMETRO_RLG FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_RC_PSICOLOGIA, FECHA, ID_ESTADO_CIVIL, PROFESION, ID_NIVEL_ESTUDIOS, ID_SITUACION_LABORAL, ID_SITUACION_ECONOMICA, ID_CALIDAD_SUENO, ANTEC_PSIQ_PERS, ANTEC_PSIQ_PERS_DIAG, ANTEC_PSIQ_FAM, ANTEC_PSIQ_FAM_DIAG, ANTEC_PSIQ_FAM_FINAL, ID_APOYO_SOCIAL, NUM_HIJOS, ID_FAMILIA, ID_NIVEL_IRRITABILIDAD, ID_NIVEL_SATISFACCION, ID_VIDA_SEXUAL, PARAMETRO_DBI_II, PARAMETRO_STAI, PARAMETRO_AE, PARAMETRO_AR, PARAMETRO_FSP, PARAMETRO_AFN, PARAMETRO_REP, PARAMETRO_EEA, PARAMETRO_EVI, PARAMETRO_BAS, PARAMETRO_RLG ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_RC_PSICOLOGIA = ?, FECHA = ?, ID_ESTADO_CIVIL = ?, PROFESION = ?, ID_NIVEL_ESTUDIOS = ?, ID_SITUACION_LABORAL = ?, ID_SITUACION_ECONOMICA = ?, ID_CALIDAD_SUENO = ?, ANTEC_PSIQ_PERS = ?, ANTEC_PSIQ_PERS_DIAG = ?, ANTEC_PSIQ_FAM = ?, ANTEC_PSIQ_FAM_DIAG = ?, ANTEC_PSIQ_FAM_FINAL = ?, ID_APOYO_SOCIAL = ?, NUM_HIJOS = ?, ID_FAMILIA = ?, ID_NIVEL_IRRITABILIDAD = ?, ID_NIVEL_SATISFACCION = ?, ID_VIDA_SEXUAL = ?, PARAMETRO_DBI_II = ?, PARAMETRO_STAI = ?, PARAMETRO_AE = ?, PARAMETRO_AR = ?, PARAMETRO_FSP = ?, PARAMETRO_AFN = ?, PARAMETRO_REP = ?, PARAMETRO_EEA = ?, PARAMETRO_EVI = ?, PARAMETRO_BAS = ?, PARAMETRO_RLG = ? WHERE ID_RC_PSICOLOGIA = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_RC_PSICOLOGIA = ?";

	/** 
	 * Index of column ID_RC_PSICOLOGIA
	 */
	protected static final int COLUMN_ID_RC_PSICOLOGIA = 1;

	/** 
	 * Index of column FECHA
	 */
	protected static final int COLUMN_FECHA = 2;

	/** 
	 * Index of column ID_ESTADO_CIVIL
	 */
	protected static final int COLUMN_ID_ESTADO_CIVIL = 3;

	/** 
	 * Index of column PROFESION
	 */
	protected static final int COLUMN_PROFESION = 4;

	/** 
	 * Index of column ID_NIVEL_ESTUDIOS
	 */
	protected static final int COLUMN_ID_NIVEL_ESTUDIOS = 5;

	/** 
	 * Index of column ID_SITUACION_LABORAL
	 */
	protected static final int COLUMN_ID_SITUACION_LABORAL = 6;

	/** 
	 * Index of column ID_SITUACION_ECONOMICA
	 */
	protected static final int COLUMN_ID_SITUACION_ECONOMICA = 7;

	/** 
	 * Index of column ID_CALIDAD_SUENO
	 */
	protected static final int COLUMN_ID_CALIDAD_SUENO = 8;

	/** 
	 * Index of column ANTEC_PSIQ_PERS
	 */
	protected static final int COLUMN_ANTEC_PSIQ_PERS = 9;

	/** 
	 * Index of column ANTEC_PSIQ_PERS_DIAG
	 */
	protected static final int COLUMN_ANTEC_PSIQ_PERS_DIAG = 10;

	/** 
	 * Index of column ANTEC_PSIQ_FAM
	 */
	protected static final int COLUMN_ANTEC_PSIQ_FAM = 11;

	/** 
	 * Index of column ANTEC_PSIQ_FAM_DIAG
	 */
	protected static final int COLUMN_ANTEC_PSIQ_FAM_DIAG = 12;

	/** 
	 * Index of column ANTEC_PSIQ_FAM_FINAL
	 */
	protected static final int COLUMN_ANTEC_PSIQ_FAM_FINAL = 13;

	/** 
	 * Index of column ID_APOYO_SOCIAL
	 */
	protected static final int COLUMN_ID_APOYO_SOCIAL = 14;

	/** 
	 * Index of column NUM_HIJOS
	 */
	protected static final int COLUMN_NUM_HIJOS = 15;

	/** 
	 * Index of column ID_FAMILIA
	 */
	protected static final int COLUMN_ID_FAMILIA = 16;

	/** 
	 * Index of column ID_NIVEL_IRRITABILIDAD
	 */
	protected static final int COLUMN_ID_NIVEL_IRRITABILIDAD = 17;

	/** 
	 * Index of column ID_NIVEL_SATISFACCION
	 */
	protected static final int COLUMN_ID_NIVEL_SATISFACCION = 18;

	/** 
	 * Index of column ID_VIDA_SEXUAL
	 */
	protected static final int COLUMN_ID_VIDA_SEXUAL = 19;

	/** 
	 * Index of column PARAMETRO_DBI_II
	 */
	protected static final int COLUMN_PARAMETRO_DBI_II = 20;

	/** 
	 * Index of column PARAMETRO_STAI
	 */
	protected static final int COLUMN_PARAMETRO_STAI = 21;

	/** 
	 * Index of column PARAMETRO_AE
	 */
	protected static final int COLUMN_PARAMETRO_AE = 22;

	/** 
	 * Index of column PARAMETRO_AR
	 */
	protected static final int COLUMN_PARAMETRO_AR = 23;

	/** 
	 * Index of column PARAMETRO_FSP
	 */
	protected static final int COLUMN_PARAMETRO_FSP = 24;

	/** 
	 * Index of column PARAMETRO_AFN
	 */
	protected static final int COLUMN_PARAMETRO_AFN = 25;

	/** 
	 * Index of column PARAMETRO_REP
	 */
	protected static final int COLUMN_PARAMETRO_REP = 26;

	/** 
	 * Index of column PARAMETRO_EEA
	 */
	protected static final int COLUMN_PARAMETRO_EEA = 27;

	/** 
	 * Index of column PARAMETRO_EVI
	 */
	protected static final int COLUMN_PARAMETRO_EVI = 28;

	/** 
	 * Index of column PARAMETRO_BAS
	 */
	protected static final int COLUMN_PARAMETRO_BAS = 29;

	/** 
	 * Index of column PARAMETRO_RLG
	 */
	protected static final int COLUMN_PARAMETRO_RLG = 30;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 30;

	/** 
	 * Index of primary-key column ID_RC_PSICOLOGIA
	 */
	protected static final int PK_COLUMN_ID_RC_PSICOLOGIA = 1;

	/** 
	 * Inserts a new row in the rc_psicologia table.
	 */
	public RcPsicologiaPk insert(RcPsicologia dto) throws RcPsicologiaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdRcPsicologiaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_RC_PSICOLOGIA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstadoCivilModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTADO_CIVIL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isProfesionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PROFESION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdNivelEstudiosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_NIVEL_ESTUDIOS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdSituacionLaboralModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_SITUACION_LABORAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdSituacionEconomicaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_SITUACION_ECONOMICA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdCalidadSuenoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CALIDAD_SUENO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAntecPsiqPersModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ANTEC_PSIQ_PERS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAntecPsiqPersDiagModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ANTEC_PSIQ_PERS_DIAG" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAntecPsiqFamModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ANTEC_PSIQ_FAM" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAntecPsiqFamDiagModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ANTEC_PSIQ_FAM_DIAG" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isAntecPsiqFamFinalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ANTEC_PSIQ_FAM_FINAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdApoyoSocialModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_APOYO_SOCIAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumHijosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NUM_HIJOS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdFamiliaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_FAMILIA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdNivelIrritabilidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_NIVEL_IRRITABILIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdNivelSatisfaccionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_NIVEL_SATISFACCION" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdVidaSexualModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_VIDA_SEXUAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isParametroDbiIiModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PARAMETRO_DBI_II" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isParametroStaiModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PARAMETRO_STAI" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isParametroAeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PARAMETRO_AE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isParametroArModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PARAMETRO_AR" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isParametroFspModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PARAMETRO_FSP" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isParametroAfnModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PARAMETRO_AFN" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isParametroRepModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PARAMETRO_REP" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isParametroEeaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PARAMETRO_EEA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isParametroEviModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PARAMETRO_EVI" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isParametroBasModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PARAMETRO_BAS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isParametroRlgModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PARAMETRO_RLG" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdRcPsicologiaModified()) {
				stmt.setInt( index++, dto.getIdRcPsicologia() );
			}
		
			if (dto.isFechaModified()) {
				stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			}
		
			if (dto.isIdEstadoCivilModified()) {
				if (dto.isIdEstadoCivilNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstadoCivil() );
				}
		
			}
		
			if (dto.isProfesionModified()) {
				stmt.setString( index++, dto.getProfesion() );
			}
		
			if (dto.isIdNivelEstudiosModified()) {
				if (dto.isIdNivelEstudiosNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdNivelEstudios() );
				}
		
			}
		
			if (dto.isIdSituacionLaboralModified()) {
				if (dto.isIdSituacionLaboralNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSituacionLaboral() );
				}
		
			}
		
			if (dto.isIdSituacionEconomicaModified()) {
				if (dto.isIdSituacionEconomicaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSituacionEconomica() );
				}
		
			}
		
			if (dto.isIdCalidadSuenoModified()) {
				if (dto.isIdCalidadSuenoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCalidadSueno() );
				}
		
			}
		
			if (dto.isAntecPsiqPersModified()) {
				if (dto.isAntecPsiqPersNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAntecPsiqPers() );
				}
		
			}
		
			if (dto.isAntecPsiqPersDiagModified()) {
				stmt.setString( index++, dto.getAntecPsiqPersDiag() );
			}
		
			if (dto.isAntecPsiqFamModified()) {
				if (dto.isAntecPsiqFamNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAntecPsiqFam() );
				}
		
			}
		
			if (dto.isAntecPsiqFamDiagModified()) {
				stmt.setString( index++, dto.getAntecPsiqFamDiag() );
			}
		
			if (dto.isAntecPsiqFamFinalModified()) {
				stmt.setString( index++, dto.getAntecPsiqFamFinal() );
			}
		
			if (dto.isIdApoyoSocialModified()) {
				if (dto.isIdApoyoSocialNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdApoyoSocial() );
				}
		
			}
		
			if (dto.isNumHijosModified()) {
				if (dto.isNumHijosNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getNumHijos() );
				}
		
			}
		
			if (dto.isIdFamiliaModified()) {
				if (dto.isIdFamiliaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdFamilia() );
				}
		
			}
		
			if (dto.isIdNivelIrritabilidadModified()) {
				if (dto.isIdNivelIrritabilidadNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdNivelIrritabilidad() );
				}
		
			}
		
			if (dto.isIdNivelSatisfaccionModified()) {
				if (dto.isIdNivelSatisfaccionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdNivelSatisfaccion() );
				}
		
			}
		
			if (dto.isIdVidaSexualModified()) {
				if (dto.isIdVidaSexualNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdVidaSexual() );
				}
		
			}
		
			if (dto.isParametroDbiIiModified()) {
				stmt.setString( index++, dto.getParametroDbiIi() );
			}
		
			if (dto.isParametroStaiModified()) {
				stmt.setString( index++, dto.getParametroStai() );
			}
		
			if (dto.isParametroAeModified()) {
				stmt.setString( index++, dto.getParametroAe() );
			}
		
			if (dto.isParametroArModified()) {
				stmt.setString( index++, dto.getParametroAr() );
			}
		
			if (dto.isParametroFspModified()) {
				stmt.setString( index++, dto.getParametroFsp() );
			}
		
			if (dto.isParametroAfnModified()) {
				stmt.setString( index++, dto.getParametroAfn() );
			}
		
			if (dto.isParametroRepModified()) {
				stmt.setString( index++, dto.getParametroRep() );
			}
		
			if (dto.isParametroEeaModified()) {
				stmt.setString( index++, dto.getParametroEea() );
			}
		
			if (dto.isParametroEviModified()) {
				stmt.setString( index++, dto.getParametroEvi() );
			}
		
			if (dto.isParametroBasModified()) {
				stmt.setString( index++, dto.getParametroBas() );
			}
		
			if (dto.isParametroRlgModified()) {
				stmt.setString( index++, dto.getParametroRlg() );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdRcPsicologia( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RcPsicologiaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the rc_psicologia table.
	 */
	public void update(RcPsicologiaPk pk, RcPsicologia dto) throws RcPsicologiaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdRcPsicologiaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_RC_PSICOLOGIA=?" );
				modified=true;
			}
		
			if (dto.isFechaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA=?" );
				modified=true;
			}
		
			if (dto.isIdEstadoCivilModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTADO_CIVIL=?" );
				modified=true;
			}
		
			if (dto.isProfesionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PROFESION=?" );
				modified=true;
			}
		
			if (dto.isIdNivelEstudiosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_NIVEL_ESTUDIOS=?" );
				modified=true;
			}
		
			if (dto.isIdSituacionLaboralModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_SITUACION_LABORAL=?" );
				modified=true;
			}
		
			if (dto.isIdSituacionEconomicaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_SITUACION_ECONOMICA=?" );
				modified=true;
			}
		
			if (dto.isIdCalidadSuenoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CALIDAD_SUENO=?" );
				modified=true;
			}
		
			if (dto.isAntecPsiqPersModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ANTEC_PSIQ_PERS=?" );
				modified=true;
			}
		
			if (dto.isAntecPsiqPersDiagModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ANTEC_PSIQ_PERS_DIAG=?" );
				modified=true;
			}
		
			if (dto.isAntecPsiqFamModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ANTEC_PSIQ_FAM=?" );
				modified=true;
			}
		
			if (dto.isAntecPsiqFamDiagModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ANTEC_PSIQ_FAM_DIAG=?" );
				modified=true;
			}
		
			if (dto.isAntecPsiqFamFinalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ANTEC_PSIQ_FAM_FINAL=?" );
				modified=true;
			}
		
			if (dto.isIdApoyoSocialModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_APOYO_SOCIAL=?" );
				modified=true;
			}
		
			if (dto.isNumHijosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NUM_HIJOS=?" );
				modified=true;
			}
		
			if (dto.isIdFamiliaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_FAMILIA=?" );
				modified=true;
			}
		
			if (dto.isIdNivelIrritabilidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_NIVEL_IRRITABILIDAD=?" );
				modified=true;
			}
		
			if (dto.isIdNivelSatisfaccionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_NIVEL_SATISFACCION=?" );
				modified=true;
			}
		
			if (dto.isIdVidaSexualModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_VIDA_SEXUAL=?" );
				modified=true;
			}
		
			if (dto.isParametroDbiIiModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PARAMETRO_DBI_II=?" );
				modified=true;
			}
		
			if (dto.isParametroStaiModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PARAMETRO_STAI=?" );
				modified=true;
			}
		
			if (dto.isParametroAeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PARAMETRO_AE=?" );
				modified=true;
			}
		
			if (dto.isParametroArModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PARAMETRO_AR=?" );
				modified=true;
			}
		
			if (dto.isParametroFspModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PARAMETRO_FSP=?" );
				modified=true;
			}
		
			if (dto.isParametroAfnModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PARAMETRO_AFN=?" );
				modified=true;
			}
		
			if (dto.isParametroRepModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PARAMETRO_REP=?" );
				modified=true;
			}
		
			if (dto.isParametroEeaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PARAMETRO_EEA=?" );
				modified=true;
			}
		
			if (dto.isParametroEviModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PARAMETRO_EVI=?" );
				modified=true;
			}
		
			if (dto.isParametroBasModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PARAMETRO_BAS=?" );
				modified=true;
			}
		
			if (dto.isParametroRlgModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PARAMETRO_RLG=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_RC_PSICOLOGIA=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdRcPsicologiaModified()) {
				stmt.setInt( index++, dto.getIdRcPsicologia() );
			}
		
			if (dto.isFechaModified()) {
				stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			}
		
			if (dto.isIdEstadoCivilModified()) {
				if (dto.isIdEstadoCivilNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstadoCivil() );
				}
		
			}
		
			if (dto.isProfesionModified()) {
				stmt.setString( index++, dto.getProfesion() );
			}
		
			if (dto.isIdNivelEstudiosModified()) {
				if (dto.isIdNivelEstudiosNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdNivelEstudios() );
				}
		
			}
		
			if (dto.isIdSituacionLaboralModified()) {
				if (dto.isIdSituacionLaboralNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSituacionLaboral() );
				}
		
			}
		
			if (dto.isIdSituacionEconomicaModified()) {
				if (dto.isIdSituacionEconomicaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdSituacionEconomica() );
				}
		
			}
		
			if (dto.isIdCalidadSuenoModified()) {
				if (dto.isIdCalidadSuenoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCalidadSueno() );
				}
		
			}
		
			if (dto.isAntecPsiqPersModified()) {
				if (dto.isAntecPsiqPersNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAntecPsiqPers() );
				}
		
			}
		
			if (dto.isAntecPsiqPersDiagModified()) {
				stmt.setString( index++, dto.getAntecPsiqPersDiag() );
			}
		
			if (dto.isAntecPsiqFamModified()) {
				if (dto.isAntecPsiqFamNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getAntecPsiqFam() );
				}
		
			}
		
			if (dto.isAntecPsiqFamDiagModified()) {
				stmt.setString( index++, dto.getAntecPsiqFamDiag() );
			}
		
			if (dto.isAntecPsiqFamFinalModified()) {
				stmt.setString( index++, dto.getAntecPsiqFamFinal() );
			}
		
			if (dto.isIdApoyoSocialModified()) {
				if (dto.isIdApoyoSocialNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdApoyoSocial() );
				}
		
			}
		
			if (dto.isNumHijosModified()) {
				if (dto.isNumHijosNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getNumHijos() );
				}
		
			}
		
			if (dto.isIdFamiliaModified()) {
				if (dto.isIdFamiliaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdFamilia() );
				}
		
			}
		
			if (dto.isIdNivelIrritabilidadModified()) {
				if (dto.isIdNivelIrritabilidadNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdNivelIrritabilidad() );
				}
		
			}
		
			if (dto.isIdNivelSatisfaccionModified()) {
				if (dto.isIdNivelSatisfaccionNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdNivelSatisfaccion() );
				}
		
			}
		
			if (dto.isIdVidaSexualModified()) {
				if (dto.isIdVidaSexualNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdVidaSexual() );
				}
		
			}
		
			if (dto.isParametroDbiIiModified()) {
				stmt.setString( index++, dto.getParametroDbiIi() );
			}
		
			if (dto.isParametroStaiModified()) {
				stmt.setString( index++, dto.getParametroStai() );
			}
		
			if (dto.isParametroAeModified()) {
				stmt.setString( index++, dto.getParametroAe() );
			}
		
			if (dto.isParametroArModified()) {
				stmt.setString( index++, dto.getParametroAr() );
			}
		
			if (dto.isParametroFspModified()) {
				stmt.setString( index++, dto.getParametroFsp() );
			}
		
			if (dto.isParametroAfnModified()) {
				stmt.setString( index++, dto.getParametroAfn() );
			}
		
			if (dto.isParametroRepModified()) {
				stmt.setString( index++, dto.getParametroRep() );
			}
		
			if (dto.isParametroEeaModified()) {
				stmt.setString( index++, dto.getParametroEea() );
			}
		
			if (dto.isParametroEviModified()) {
				stmt.setString( index++, dto.getParametroEvi() );
			}
		
			if (dto.isParametroBasModified()) {
				stmt.setString( index++, dto.getParametroBas() );
			}
		
			if (dto.isParametroRlgModified()) {
				stmt.setString( index++, dto.getParametroRlg() );
			}
		
			stmt.setInt( index++, pk.getIdRcPsicologia() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RcPsicologiaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the rc_psicologia table.
	 */
	public void delete(RcPsicologiaPk pk) throws RcPsicologiaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdRcPsicologia() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RcPsicologiaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the rc_psicologia table that matches the specified primary-key value.
	 */
	public RcPsicologia findByPrimaryKey(RcPsicologiaPk pk) throws RcPsicologiaDaoException
	{
		return findByPrimaryKey( pk.getIdRcPsicologia() );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ID_RC_PSICOLOGIA = :idRcPsicologia'.
	 */
	public RcPsicologia findByPrimaryKey(int idRcPsicologia) throws RcPsicologiaDaoException
	{
		RcPsicologia ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_RC_PSICOLOGIA = ?", new Object[] {  new Integer(idRcPsicologia) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria ''.
	 */
	public RcPsicologia[] findAll() throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_RC_PSICOLOGIA", null );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ID_RC_PSICOLOGIA = :idRcPsicologia'.
	 */
	public RcPsicologia[] findWhereIdRcPsicologiaEquals(int idRcPsicologia) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_RC_PSICOLOGIA = ? ORDER BY ID_RC_PSICOLOGIA", new Object[] {  new Integer(idRcPsicologia) } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'FECHA = :fecha'.
	 */
	public RcPsicologia[] findWhereFechaEquals(Date fecha) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA = ? ORDER BY FECHA", new Object[] { fecha==null ? null : new java.sql.Date( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ID_ESTADO_CIVIL = :idEstadoCivil'.
	 */
	public RcPsicologia[] findWhereIdEstadoCivilEquals(int idEstadoCivil) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTADO_CIVIL = ? ORDER BY ID_ESTADO_CIVIL", new Object[] {  new Integer(idEstadoCivil) } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'PROFESION = :profesion'.
	 */
	public RcPsicologia[] findWhereProfesionEquals(String profesion) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROFESION = ? ORDER BY PROFESION", new Object[] { profesion } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ID_NIVEL_ESTUDIOS = :idNivelEstudios'.
	 */
	public RcPsicologia[] findWhereIdNivelEstudiosEquals(int idNivelEstudios) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_NIVEL_ESTUDIOS = ? ORDER BY ID_NIVEL_ESTUDIOS", new Object[] {  new Integer(idNivelEstudios) } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ID_SITUACION_LABORAL = :idSituacionLaboral'.
	 */
	public RcPsicologia[] findWhereIdSituacionLaboralEquals(int idSituacionLaboral) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_SITUACION_LABORAL = ? ORDER BY ID_SITUACION_LABORAL", new Object[] {  new Integer(idSituacionLaboral) } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ID_SITUACION_ECONOMICA = :idSituacionEconomica'.
	 */
	public RcPsicologia[] findWhereIdSituacionEconomicaEquals(int idSituacionEconomica) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_SITUACION_ECONOMICA = ? ORDER BY ID_SITUACION_ECONOMICA", new Object[] {  new Integer(idSituacionEconomica) } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ID_CALIDAD_SUENO = :idCalidadSueno'.
	 */
	public RcPsicologia[] findWhereIdCalidadSuenoEquals(int idCalidadSueno) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CALIDAD_SUENO = ? ORDER BY ID_CALIDAD_SUENO", new Object[] {  new Integer(idCalidadSueno) } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ANTEC_PSIQ_PERS = :antecPsiqPers'.
	 */
	public RcPsicologia[] findWhereAntecPsiqPersEquals(int antecPsiqPers) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANTEC_PSIQ_PERS = ? ORDER BY ANTEC_PSIQ_PERS", new Object[] {  new Integer(antecPsiqPers) } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ANTEC_PSIQ_PERS_DIAG = :antecPsiqPersDiag'.
	 */
	public RcPsicologia[] findWhereAntecPsiqPersDiagEquals(String antecPsiqPersDiag) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANTEC_PSIQ_PERS_DIAG = ? ORDER BY ANTEC_PSIQ_PERS_DIAG", new Object[] { antecPsiqPersDiag } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ANTEC_PSIQ_FAM = :antecPsiqFam'.
	 */
	public RcPsicologia[] findWhereAntecPsiqFamEquals(int antecPsiqFam) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANTEC_PSIQ_FAM = ? ORDER BY ANTEC_PSIQ_FAM", new Object[] {  new Integer(antecPsiqFam) } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ANTEC_PSIQ_FAM_DIAG = :antecPsiqFamDiag'.
	 */
	public RcPsicologia[] findWhereAntecPsiqFamDiagEquals(String antecPsiqFamDiag) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANTEC_PSIQ_FAM_DIAG = ? ORDER BY ANTEC_PSIQ_FAM_DIAG", new Object[] { antecPsiqFamDiag } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ANTEC_PSIQ_FAM_FINAL = :antecPsiqFamFinal'.
	 */
	public RcPsicologia[] findWhereAntecPsiqFamFinalEquals(String antecPsiqFamFinal) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ANTEC_PSIQ_FAM_FINAL = ? ORDER BY ANTEC_PSIQ_FAM_FINAL", new Object[] { antecPsiqFamFinal } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ID_APOYO_SOCIAL = :idApoyoSocial'.
	 */
	public RcPsicologia[] findWhereIdApoyoSocialEquals(int idApoyoSocial) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_APOYO_SOCIAL = ? ORDER BY ID_APOYO_SOCIAL", new Object[] {  new Integer(idApoyoSocial) } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'NUM_HIJOS = :numHijos'.
	 */
	public RcPsicologia[] findWhereNumHijosEquals(int numHijos) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUM_HIJOS = ? ORDER BY NUM_HIJOS", new Object[] {  new Integer(numHijos) } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ID_FAMILIA = :idFamilia'.
	 */
	public RcPsicologia[] findWhereIdFamiliaEquals(int idFamilia) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_FAMILIA = ? ORDER BY ID_FAMILIA", new Object[] {  new Integer(idFamilia) } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ID_NIVEL_IRRITABILIDAD = :idNivelIrritabilidad'.
	 */
	public RcPsicologia[] findWhereIdNivelIrritabilidadEquals(int idNivelIrritabilidad) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_NIVEL_IRRITABILIDAD = ? ORDER BY ID_NIVEL_IRRITABILIDAD", new Object[] {  new Integer(idNivelIrritabilidad) } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ID_NIVEL_SATISFACCION = :idNivelSatisfaccion'.
	 */
	public RcPsicologia[] findWhereIdNivelSatisfaccionEquals(int idNivelSatisfaccion) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_NIVEL_SATISFACCION = ? ORDER BY ID_NIVEL_SATISFACCION", new Object[] {  new Integer(idNivelSatisfaccion) } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'ID_VIDA_SEXUAL = :idVidaSexual'.
	 */
	public RcPsicologia[] findWhereIdVidaSexualEquals(int idVidaSexual) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_VIDA_SEXUAL = ? ORDER BY ID_VIDA_SEXUAL", new Object[] {  new Integer(idVidaSexual) } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'PARAMETRO_DBI_II = :parametroDbiIi'.
	 */
	public RcPsicologia[] findWhereParametroDbiIiEquals(String parametroDbiIi) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARAMETRO_DBI_II = ? ORDER BY PARAMETRO_DBI_II", new Object[] { parametroDbiIi } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'PARAMETRO_STAI = :parametroStai'.
	 */
	public RcPsicologia[] findWhereParametroStaiEquals(String parametroStai) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARAMETRO_STAI = ? ORDER BY PARAMETRO_STAI", new Object[] { parametroStai } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'PARAMETRO_AE = :parametroAe'.
	 */
	public RcPsicologia[] findWhereParametroAeEquals(String parametroAe) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARAMETRO_AE = ? ORDER BY PARAMETRO_AE", new Object[] { parametroAe } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'PARAMETRO_AR = :parametroAr'.
	 */
	public RcPsicologia[] findWhereParametroArEquals(String parametroAr) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARAMETRO_AR = ? ORDER BY PARAMETRO_AR", new Object[] { parametroAr } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'PARAMETRO_FSP = :parametroFsp'.
	 */
	public RcPsicologia[] findWhereParametroFspEquals(String parametroFsp) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARAMETRO_FSP = ? ORDER BY PARAMETRO_FSP", new Object[] { parametroFsp } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'PARAMETRO_AFN = :parametroAfn'.
	 */
	public RcPsicologia[] findWhereParametroAfnEquals(String parametroAfn) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARAMETRO_AFN = ? ORDER BY PARAMETRO_AFN", new Object[] { parametroAfn } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'PARAMETRO_REP = :parametroRep'.
	 */
	public RcPsicologia[] findWhereParametroRepEquals(String parametroRep) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARAMETRO_REP = ? ORDER BY PARAMETRO_REP", new Object[] { parametroRep } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'PARAMETRO_EEA = :parametroEea'.
	 */
	public RcPsicologia[] findWhereParametroEeaEquals(String parametroEea) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARAMETRO_EEA = ? ORDER BY PARAMETRO_EEA", new Object[] { parametroEea } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'PARAMETRO_EVI = :parametroEvi'.
	 */
	public RcPsicologia[] findWhereParametroEviEquals(String parametroEvi) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARAMETRO_EVI = ? ORDER BY PARAMETRO_EVI", new Object[] { parametroEvi } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'PARAMETRO_BAS = :parametroBas'.
	 */
	public RcPsicologia[] findWhereParametroBasEquals(String parametroBas) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARAMETRO_BAS = ? ORDER BY PARAMETRO_BAS", new Object[] { parametroBas } );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the criteria 'PARAMETRO_RLG = :parametroRlg'.
	 */
	public RcPsicologia[] findWhereParametroRlgEquals(String parametroRlg) throws RcPsicologiaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARAMETRO_RLG = ? ORDER BY PARAMETRO_RLG", new Object[] { parametroRlg } );
	}

	/**
	 * Method 'RcPsicologiaDaoImpl'
	 * 
	 */
	public RcPsicologiaDaoImpl()
	{
	}

	/**
	 * Method 'RcPsicologiaDaoImpl'
	 * 
	 * @param userConn
	 */
	public RcPsicologiaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.rc_psicologia";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected RcPsicologia fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			RcPsicologia dto = new RcPsicologia();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected RcPsicologia[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			RcPsicologia dto = new RcPsicologia();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		RcPsicologia ret[] = new RcPsicologia[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(RcPsicologia dto, ResultSet rs) throws SQLException
	{
		dto.setIdRcPsicologia( rs.getInt( COLUMN_ID_RC_PSICOLOGIA ) );
		dto.setFecha( rs.getDate(COLUMN_FECHA ) );
		dto.setIdEstadoCivil( rs.getInt( COLUMN_ID_ESTADO_CIVIL ) );
		if (rs.wasNull()) {
			dto.setIdEstadoCivilNull( true );
		}
		
		dto.setProfesion( rs.getString( COLUMN_PROFESION ) );
		dto.setIdNivelEstudios( rs.getInt( COLUMN_ID_NIVEL_ESTUDIOS ) );
		if (rs.wasNull()) {
			dto.setIdNivelEstudiosNull( true );
		}
		
		dto.setIdSituacionLaboral( rs.getInt( COLUMN_ID_SITUACION_LABORAL ) );
		if (rs.wasNull()) {
			dto.setIdSituacionLaboralNull( true );
		}
		
		dto.setIdSituacionEconomica( rs.getInt( COLUMN_ID_SITUACION_ECONOMICA ) );
		if (rs.wasNull()) {
			dto.setIdSituacionEconomicaNull( true );
		}
		
		dto.setIdCalidadSueno( rs.getInt( COLUMN_ID_CALIDAD_SUENO ) );
		if (rs.wasNull()) {
			dto.setIdCalidadSuenoNull( true );
		}
		
		dto.setAntecPsiqPers( rs.getInt( COLUMN_ANTEC_PSIQ_PERS ) );
		if (rs.wasNull()) {
			dto.setAntecPsiqPersNull( true );
		}
		
		dto.setAntecPsiqPersDiag( rs.getString( COLUMN_ANTEC_PSIQ_PERS_DIAG ) );
		dto.setAntecPsiqFam( rs.getInt( COLUMN_ANTEC_PSIQ_FAM ) );
		if (rs.wasNull()) {
			dto.setAntecPsiqFamNull( true );
		}
		
		dto.setAntecPsiqFamDiag( rs.getString( COLUMN_ANTEC_PSIQ_FAM_DIAG ) );
		dto.setAntecPsiqFamFinal( rs.getString( COLUMN_ANTEC_PSIQ_FAM_FINAL ) );
		dto.setIdApoyoSocial( rs.getInt( COLUMN_ID_APOYO_SOCIAL ) );
		if (rs.wasNull()) {
			dto.setIdApoyoSocialNull( true );
		}
		
		dto.setNumHijos( rs.getInt( COLUMN_NUM_HIJOS ) );
		if (rs.wasNull()) {
			dto.setNumHijosNull( true );
		}
		
		dto.setIdFamilia( rs.getInt( COLUMN_ID_FAMILIA ) );
		if (rs.wasNull()) {
			dto.setIdFamiliaNull( true );
		}
		
		dto.setIdNivelIrritabilidad( rs.getInt( COLUMN_ID_NIVEL_IRRITABILIDAD ) );
		if (rs.wasNull()) {
			dto.setIdNivelIrritabilidadNull( true );
		}
		
		dto.setIdNivelSatisfaccion( rs.getInt( COLUMN_ID_NIVEL_SATISFACCION ) );
		if (rs.wasNull()) {
			dto.setIdNivelSatisfaccionNull( true );
		}
		
		dto.setIdVidaSexual( rs.getInt( COLUMN_ID_VIDA_SEXUAL ) );
		if (rs.wasNull()) {
			dto.setIdVidaSexualNull( true );
		}
		
		dto.setParametroDbiIi( rs.getString( COLUMN_PARAMETRO_DBI_II ) );
		dto.setParametroStai( rs.getString( COLUMN_PARAMETRO_STAI ) );
		dto.setParametroAe( rs.getString( COLUMN_PARAMETRO_AE ) );
		dto.setParametroAr( rs.getString( COLUMN_PARAMETRO_AR ) );
		dto.setParametroFsp( rs.getString( COLUMN_PARAMETRO_FSP ) );
		dto.setParametroAfn( rs.getString( COLUMN_PARAMETRO_AFN ) );
		dto.setParametroRep( rs.getString( COLUMN_PARAMETRO_REP ) );
		dto.setParametroEea( rs.getString( COLUMN_PARAMETRO_EEA ) );
		dto.setParametroEvi( rs.getString( COLUMN_PARAMETRO_EVI ) );
		dto.setParametroBas( rs.getString( COLUMN_PARAMETRO_BAS ) );
		dto.setParametroRlg( rs.getString( COLUMN_PARAMETRO_RLG ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(RcPsicologia dto)
	{
		dto.setIdRcPsicologiaModified( false );
		dto.setFechaModified( false );
		dto.setIdEstadoCivilModified( false );
		dto.setProfesionModified( false );
		dto.setIdNivelEstudiosModified( false );
		dto.setIdSituacionLaboralModified( false );
		dto.setIdSituacionEconomicaModified( false );
		dto.setIdCalidadSuenoModified( false );
		dto.setAntecPsiqPersModified( false );
		dto.setAntecPsiqPersDiagModified( false );
		dto.setAntecPsiqFamModified( false );
		dto.setAntecPsiqFamDiagModified( false );
		dto.setAntecPsiqFamFinalModified( false );
		dto.setIdApoyoSocialModified( false );
		dto.setNumHijosModified( false );
		dto.setIdFamiliaModified( false );
		dto.setIdNivelIrritabilidadModified( false );
		dto.setIdNivelSatisfaccionModified( false );
		dto.setIdVidaSexualModified( false );
		dto.setParametroDbiIiModified( false );
		dto.setParametroStaiModified( false );
		dto.setParametroAeModified( false );
		dto.setParametroArModified( false );
		dto.setParametroFspModified( false );
		dto.setParametroAfnModified( false );
		dto.setParametroRepModified( false );
		dto.setParametroEeaModified( false );
		dto.setParametroEviModified( false );
		dto.setParametroBasModified( false );
		dto.setParametroRlgModified( false );
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the specified arbitrary SQL statement
	 */
	public RcPsicologia[] findByDynamicSelect(String sql, Object[] sqlParams) throws RcPsicologiaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RcPsicologiaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the rc_psicologia table that match the specified arbitrary SQL statement
	 */
	public RcPsicologia[] findByDynamicWhere(String sql, Object[] sqlParams) throws RcPsicologiaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new RcPsicologiaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
