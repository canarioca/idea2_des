/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import java.util.Date;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import org.apache.tomcat.dbcp.dbcp.DelegatingPreparedStatement;

import com.sorin.idea.dao.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import com.sorin.idea.factory.*;

import oracle.jdbc.OracleTypes;


public class ArrEnfDaoImpl extends AbstractDAO implements ArrEnfDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_PACIENTE, ID_REGISTRO, PESO, TALLA, TALLEG1, TALLEG2, FCLLEG, TAFIN1, TAFIN2, FCFIN, TATAQ1, TATAQ2, FCTAQ, CALIBRE1, MIEMBRO, PLANTA, NUMERO, CALIBRE2, DIAGNOS, PUNCION, MATERIAL, VESICAL, OTROS, VASCULAR, HEMOSTASIA, VENDAJE, ZONA, SUERO, HEPARINA, SEDACION, FARMACOS, CV, CV1, CV2, CV3, CV4, MOTIVO, EXITO, OBSERV, DESTINO, FECHA, HEMOSTR, ID_EEF, DIURESIS, CUIDADOS, INR, HEMOSTASIAV, HEMOSTRV FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_PACIENTE, ID_REGISTRO, PESO, TALLA, TALLEG1, TALLEG2, FCLLEG, TAFIN1, TAFIN2, FCFIN, TATAQ1, TATAQ2, FCTAQ, CALIBRE1, MIEMBRO, PLANTA, NUMERO, CALIBRE2, DIAGNOS, PUNCION, MATERIAL, VESICAL, OTROS, VASCULAR, HEMOSTASIA, VENDAJE, ZONA, SUERO, HEPARINA, SEDACION, FARMACOS, CV, CV1, CV2, CV3, CV4, MOTIVO, EXITO, OBSERV, DESTINO, FECHA, HEMOSTR, ID_EEF, DIURESIS, CUIDADOS, INR, HEMOSTASIAV, HEMOSTRV ) VALUES ( ?, null, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_PACIENTE = ?, ID_REGISTRO = ?, PESO = ?, TALLA = ?, TALLEG1 = ?, TALLEG2 = ?, FCLLEG = ?, TAFIN1 = ?, TAFIN2 = ?, FCFIN = ?, TATAQ1 = ?, TATAQ2 = ?, FCTAQ = ?, CALIBRE1 = ?, MIEMBRO = ?, PLANTA = ?, NUMERO = ?, CALIBRE2 = ?, DIAGNOS = ?, PUNCION = ?, MATERIAL = ?, VESICAL = ?, OTROS = ?, VASCULAR = ?, HEMOSTASIA = ?, VENDAJE = ?, ZONA = ?, SUERO = ?, HEPARINA = ?, SEDACION = ?, FARMACOS = ?, CV = ?, CV1 = ?, CV2 = ?, CV3 = ?, CV4 = ?, MOTIVO = ?, EXITO = ?, OBSERV = ?, DESTINO = ?, FECHA = ?, HEMOSTR = ?, ID_EEF = ?, DIURESIS = ?, CUIDADOS = ?, INR = ?, HEMOSTASIAV = ?, HEMOSTRV = ? WHERE ID_PACIENTE = ? AND ID_REGISTRO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_PACIENTE = ? AND ID_REGISTRO = ?";

	/** 
	 * Index of column ID_PACIENTE
	 */
	protected static final int COLUMN_ID_PACIENTE = 1;

	/** 
	 * Index of column ID_REGISTRO
	 */
	protected static final int COLUMN_ID_REGISTRO = 2;

	/** 
	 * Index of column PESO
	 */
	protected static final int COLUMN_PESO = 3;

	/** 
	 * Index of column TALLA
	 */
	protected static final int COLUMN_TALLA = 4;

	/** 
	 * Index of column TALLEG1
	 */
	protected static final int COLUMN_TALLEG1 = 5;

	/** 
	 * Index of column TALLEG2
	 */
	protected static final int COLUMN_TALLEG2 = 6;

	/** 
	 * Index of column FCLLEG
	 */
	protected static final int COLUMN_FCLLEG = 7;

	/** 
	 * Index of column TAFIN1
	 */
	protected static final int COLUMN_TAFIN1 = 8;

	/** 
	 * Index of column TAFIN2
	 */
	protected static final int COLUMN_TAFIN2 = 9;

	/** 
	 * Index of column FCFIN
	 */
	protected static final int COLUMN_FCFIN = 10;

	/** 
	 * Index of column TATAQ1
	 */
	protected static final int COLUMN_TATAQ1 = 11;

	/** 
	 * Index of column TATAQ2
	 */
	protected static final int COLUMN_TATAQ2 = 12;

	/** 
	 * Index of column FCTAQ
	 */
	protected static final int COLUMN_FCTAQ = 13;

	/** 
	 * Index of column CALIBRE1
	 */
	protected static final int COLUMN_CALIBRE1 = 14;

	/** 
	 * Index of column MIEMBRO
	 */
	protected static final int COLUMN_MIEMBRO = 15;

	/** 
	 * Index of column PLANTA
	 */
	protected static final int COLUMN_PLANTA = 16;

	/** 
	 * Index of column NUMERO
	 */
	protected static final int COLUMN_NUMERO = 17;

	/** 
	 * Index of column CALIBRE2
	 */
	protected static final int COLUMN_CALIBRE2 = 18;

	/** 
	 * Index of column DIAGNOS
	 */
	protected static final int COLUMN_DIAGNOS = 19;

	/** 
	 * Index of column PUNCION
	 */
	protected static final int COLUMN_PUNCION = 20;

	/** 
	 * Index of column MATERIAL
	 */
	protected static final int COLUMN_MATERIAL = 21;

	/** 
	 * Index of column VESICAL
	 */
	protected static final int COLUMN_VESICAL = 22;

	/** 
	 * Index of column OTROS
	 */
	protected static final int COLUMN_OTROS = 23;

	/** 
	 * Index of column VASCULAR
	 */
	protected static final int COLUMN_VASCULAR = 24;

	/** 
	 * Index of column HEMOSTASIA
	 */
	protected static final int COLUMN_HEMOSTASIA = 25;

	/** 
	 * Index of column VENDAJE
	 */
	protected static final int COLUMN_VENDAJE = 26;

	/** 
	 * Index of column ZONA
	 */
	protected static final int COLUMN_ZONA = 27;

	/** 
	 * Index of column SUERO
	 */
	protected static final int COLUMN_SUERO = 28;

	/** 
	 * Index of column HEPARINA
	 */
	protected static final int COLUMN_HEPARINA = 29;

	/** 
	 * Index of column SEDACION
	 */
	protected static final int COLUMN_SEDACION = 30;

	/** 
	 * Index of column FARMACOS
	 */
	protected static final int COLUMN_FARMACOS = 31;

	/** 
	 * Index of column CV
	 */
	protected static final int COLUMN_CV = 32;

	/** 
	 * Index of column CV1
	 */
	protected static final int COLUMN_CV1 = 33;

	/** 
	 * Index of column CV2
	 */
	protected static final int COLUMN_CV2 = 34;

	/** 
	 * Index of column CV3
	 */
	protected static final int COLUMN_CV3 = 35;

	/** 
	 * Index of column CV4
	 */
	protected static final int COLUMN_CV4 = 36;

	/** 
	 * Index of column MOTIVO
	 */
	protected static final int COLUMN_MOTIVO = 37;

	/** 
	 * Index of column EXITO
	 */
	protected static final int COLUMN_EXITO = 38;

	/** 
	 * Index of column OBSERV
	 */
	protected static final int COLUMN_OBSERV = 39;

	/** 
	 * Index of column DESTINO
	 */
	protected static final int COLUMN_DESTINO = 40;

	/** 
	 * Index of column FECHA
	 */
	protected static final int COLUMN_FECHA = 41;
	
	protected static final int COLUMN_HEMOSTR = 42;
	
	protected static final int COLUMN_IDEEF = 43;
	
	protected static final int COLUMN_DIURESIS = 44;
	
	protected static final int COLUMN_CUIDADOS = 45;
	
	protected static final int COLUMN_INR = 46;
	
	protected static final int COLUMN_HEMOSTASIAV = 47;
	
	protected static final int COLUMN_HEMOSTRV = 48;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 48;

	/** 
	 * Index of primary-key column ID_PACIENTE
	 */
	protected static final int PK_COLUMN_ID_PACIENTE = 1;

	/** 
	 * Index of primary-key column ID_REGISTRO
	 */
	protected static final int PK_COLUMN_ID_REGISTRO = 2;

	/** 
	 * Inserts a new row in the ARR_ENF table.
	 */
	public ArrEnfPk insert(ArrEnf dto) throws ArrEnfDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			
			int index = 1;
			if (dto.getIdPaciente() != null) {
				stmt.setInt( index++, dto.getIdPaciente().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPeso() );
			stmt.setString( index++, dto.getTalla() );
			stmt.setString( index++, dto.getTalleg1() );
			stmt.setString( index++, dto.getTalleg2() );
			stmt.setString( index++, dto.getFclleg() );
			stmt.setString( index++, dto.getTafin1() );
			stmt.setString( index++, dto.getTafin2() );
			stmt.setString( index++, dto.getFcfin() );
			stmt.setString( index++, dto.getTataq1() );
			stmt.setString( index++, dto.getTataq2() );
			stmt.setString( index++, dto.getFctaq() );
			stmt.setString( index++, dto.getCalibre1() );
			stmt.setString( index++, dto.getMiembro() );
			if (dto.getPlanta() != null) {
				stmt.setInt( index++, dto.getPlanta().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNumero() );
			stmt.setString( index++, dto.getCalibre2() );
			stmt.setString( index++, dto.getDiagnos() );
			if (dto.getPuncion() != null) {
				stmt.setInt( index++, dto.getPuncion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getMaterial() );
			stmt.setString( index++, dto.getVesical() );
			stmt.setString( index++, dto.getOtros() );
			stmt.setString( index++, dto.getVascular() );
		
			if (dto.getHemostasia() != null) {
				stmt.setInt( index++, dto.getHemostasia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getVendaje() != null) {
				stmt.setInt( index++, dto.getVendaje().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getZona() != null) {
				stmt.setInt( index++, dto.getZona().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getSuero() );
			stmt.setString( index++, dto.getHeparina() );
			stmt.setString( index++, dto.getSedacion() );
		
			stmt.setString( index++, dto.getFarmacos() );
			if (dto.getCv() != null) {
				stmt.setInt( index++, dto.getCv().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getCv1() );
			stmt.setString( index++, dto.getCv2() );
			stmt.setString( index++, dto.getCv3() );
			stmt.setString( index++, dto.getCv4() );
			if (dto.getMotivo() != null) {
				stmt.setInt( index++, dto.getMotivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getExito() != null) {
				stmt.setInt( index++, dto.getExito().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getObserv() );
			stmt.setString( index++, dto.getDestino() );
			stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			stmt.setString( index++, dto.getHemostr() );
			if (dto.getIdeef() != null) {
				stmt.setInt( index++, dto.getIdeef().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			stmt.setString( index++, dto.getDiuresis() );
			stmt.setString( index++, dto.getCuidados() );
			stmt.setString( index++, dto.getInr() );
			
			if (dto.getHemostasiav() != null) {
				stmt.setInt( index++, dto.getHemostasiav().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			stmt.setString( index++, dto.getHemostrv() );
			
			int rows = stmt.executeUpdate();
			stmt = null;
			stmt = conn.prepareStatement("SELECT LAST_INSERT_ID() id");
			ResultSet a = stmt.executeQuery();
			while (a.next()) {
				dto.setIdRegistro((int) a.getLong(1));
			}
			long t2 = System.currentTimeMillis();
			auditoriaDto.setAccion(AuditoriaDto.insercion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			throw new ArrEnfDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the ARR_ENF table.
	 */
	public void update(ArrEnfPk pk, ArrEnf dto) throws ArrEnfDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdPaciente() != null) {
				stmt.setInt( index++, dto.getIdPaciente().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getIdRegistro() != null) {
				stmt.setInt( index++, dto.getIdRegistro().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getPeso() );
			stmt.setString( index++, dto.getTalla() );
			stmt.setString( index++, dto.getTalleg1() );
			stmt.setString( index++, dto.getTalleg2() );
			stmt.setString( index++, dto.getFclleg() );
			stmt.setString( index++, dto.getTafin1() );
			stmt.setString( index++, dto.getTafin2() );
			stmt.setString( index++, dto.getFcfin() );
			stmt.setString( index++, dto.getTataq1() );
			stmt.setString( index++, dto.getTataq2() );
			stmt.setString( index++, dto.getFctaq() );
			stmt.setString( index++, dto.getCalibre1() );
			stmt.setString( index++, dto.getMiembro() );
			if (dto.getPlanta() != null) {
				stmt.setInt( index++, dto.getPlanta().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getNumero() );
			stmt.setString( index++, dto.getCalibre2() );
			stmt.setString( index++, dto.getDiagnos() );
			if (dto.getPuncion() != null) {
				stmt.setInt( index++, dto.getPuncion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getMaterial() );
			stmt.setString( index++, dto.getVesical() );
			stmt.setString( index++, dto.getOtros() );
			stmt.setString( index++, dto.getVascular() );
		
			if (dto.getHemostasia() != null) {
				stmt.setInt( index++, dto.getHemostasia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getVendaje() != null) {
				stmt.setInt( index++, dto.getVendaje().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getZona() != null) {
				stmt.setInt( index++, dto.getZona().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getSuero() );
			stmt.setString( index++, dto.getHeparina() );
			stmt.setString( index++, dto.getSedacion() );
		
			stmt.setString( index++, dto.getFarmacos() );
			if (dto.getCv() != null) {
				stmt.setInt( index++, dto.getCv().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getCv1() );
			stmt.setString( index++, dto.getCv2() );
			stmt.setString( index++, dto.getCv3() );
			stmt.setString( index++, dto.getCv4() );
			if (dto.getMotivo() != null) {
				stmt.setInt( index++, dto.getMotivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getExito() != null) {
				stmt.setInt( index++, dto.getExito().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getObserv() );
			stmt.setString( index++, dto.getDestino() );
			stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			stmt.setString( index++, dto.getHemostr() );
			if (dto.getIdeef() != null) {
				stmt.setInt( index++, dto.getIdeef().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			stmt.setString( index++, dto.getDiuresis() );
			stmt.setString( index++, dto.getCuidados() );
			stmt.setString( index++, dto.getInr() );
			
			if (dto.getHemostasiav() != null) {
				stmt.setInt( index++, dto.getHemostasiav().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
			stmt.setString( index++, dto.getHemostrv() );
			
			if (pk.getIdPaciente() != null) {
				stmt.setInt( 49, pk.getIdPaciente().intValue() );
			} else {
				stmt.setNull(49, java.sql.Types.INTEGER);
			}
		
			if (pk.getIdRegistro() != null) {
				stmt.setInt( 50, pk.getIdRegistro().intValue() );
			} else {
				stmt.setNull(50, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
	        auditoriaDto.setDescri(dto.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrEnfDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the ARR_ENF table.
	 */
	public void delete(ArrEnfPk pk) throws ArrEnfDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdPaciente() != null) {
				stmt.setInt( 1, pk.getIdPaciente().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			if (pk.getIdRegistro() != null) {
				stmt.setInt( 2, pk.getIdRegistro().intValue() );
			} else {
				stmt.setNull(2, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.borrado);
	        auditoriaDto.setDescri(pk.toString());
	        auditoriaDao.escribeAuditoria(auditoriaDto);
			long t2 = System.currentTimeMillis();
		}
		catch (Exception _e) {
			throw new ArrEnfDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the ARR_ENF table that matches the specified primary-key value.
	 */
	public ArrEnf findByPrimaryKey(ArrEnfPk pk) throws ArrEnfDaoException
	{
		return findByPrimaryKey( pk.getIdPaciente(), pk.getIdRegistro() );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'ID_PACIENTE = :idPaciente AND ID_REGISTRO = :idRegistro'.
	 */
	public ArrEnf findByPrimaryKey(Integer idPaciente, Integer idRegistro) throws ArrEnfDaoException
	{
		ArrEnf ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_PACIENTE = ? AND ID_REGISTRO = ?", new Object[] { idPaciente, idRegistro } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria ''.
	 */
	public ArrEnf[] findAll() throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_PACIENTE, ID_REGISTRO", null );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'ID_PACIENTE = :idPaciente'.
	 */
	public ArrEnf[] findWhereIdPacienteEquals(long idPaciente) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_PACIENTE = ? ORDER BY fecha desc", new Object[] {  new Long(idPaciente) } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'ID_REGISTRO = :idRegistro'.
	 */
	public ArrEnf[] findWhereIdRegistroEquals(long idRegistro) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_REGISTRO = ? ORDER BY ID_REGISTRO", new Object[] {  new Long(idRegistro) } );
	}
	
	public ArrEnf findWhereIdEefEquals(long ideef) throws ArrEnfDaoException
	{
		ArrEnf ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_EEF = ? ", new Object[] { ideef } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'PESO = :peso'.
	 */
	public ArrEnf[] findWherePesoEquals(String peso) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PESO = ? ORDER BY PESO", new Object[] { peso } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'TALLA = :talla'.
	 */
	public ArrEnf[] findWhereTallaEquals(String talla) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TALLA = ? ORDER BY TALLA", new Object[] { talla } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'TALLEG1 = :talleg1'.
	 */
	public ArrEnf[] findWhereTalleg1Equals(String talleg1) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TALLEG1 = ? ORDER BY TALLEG1", new Object[] { talleg1 } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'TALLEG2 = :talleg2'.
	 */
	public ArrEnf[] findWhereTalleg2Equals(String talleg2) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TALLEG2 = ? ORDER BY TALLEG2", new Object[] { talleg2 } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'FCLLEG = :fclleg'.
	 */
	public ArrEnf[] findWhereFcllegEquals(String fclleg) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FCLLEG = ? ORDER BY FCLLEG", new Object[] { fclleg } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'TAFIN1 = :tafin1'.
	 */
	public ArrEnf[] findWhereTafin1Equals(String tafin1) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TAFIN1 = ? ORDER BY TAFIN1", new Object[] { tafin1 } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'TAFIN2 = :tafin2'.
	 */
	public ArrEnf[] findWhereTafin2Equals(String tafin2) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TAFIN2 = ? ORDER BY TAFIN2", new Object[] { tafin2 } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'FCFIN = :fcfin'.
	 */
	public ArrEnf[] findWhereFcfinEquals(String fcfin) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FCFIN = ? ORDER BY FCFIN", new Object[] { fcfin } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'TATAQ1 = :tataq1'.
	 */
	public ArrEnf[] findWhereTataq1Equals(String tataq1) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TATAQ1 = ? ORDER BY TATAQ1", new Object[] { tataq1 } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'TATAQ2 = :tataq2'.
	 */
	public ArrEnf[] findWhereTataq2Equals(String tataq2) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TATAQ2 = ? ORDER BY TATAQ2", new Object[] { tataq2 } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'FCTAQ = :fctaq'.
	 */
	public ArrEnf[] findWhereFctaqEquals(String fctaq) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FCTAQ = ? ORDER BY FCTAQ", new Object[] { fctaq } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'CALIBRE1 = :calibre1'.
	 */
	public ArrEnf[] findWhereCalibre1Equals(String calibre1) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CALIBRE1 = ? ORDER BY CALIBRE1", new Object[] { calibre1 } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'MIEMBRO = :miembro'.
	 */
	public ArrEnf[] findWhereMiembroEquals(String miembro) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MIEMBRO = ? ORDER BY MIEMBRO", new Object[] { miembro } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'PLANTA = :planta'.
	 */
	public ArrEnf[] findWherePlantaEquals(long planta) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PLANTA = ? ORDER BY PLANTA", new Object[] {  new Long(planta) } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'NUMERO = :numero'.
	 */
	public ArrEnf[] findWhereNumeroEquals(String numero) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMERO = ? ORDER BY NUMERO", new Object[] { numero } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'CALIBRE2 = :calibre2'.
	 */
	public ArrEnf[] findWhereCalibre2Equals(String calibre2) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CALIBRE2 = ? ORDER BY CALIBRE2", new Object[] { calibre2 } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'DIAGNOS = :diagnos'.
	 */
	public ArrEnf[] findWhereDiagnosEquals(String diagnos) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DIAGNOS = ? ORDER BY DIAGNOS", new Object[] { diagnos } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'PUNCION = :puncion'.
	 */
	public ArrEnf[] findWherePuncionEquals(long puncion) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PUNCION = ? ORDER BY PUNCION", new Object[] {  new Long(puncion) } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'MATERIAL = :material'.
	 */
	public ArrEnf[] findWhereMaterialEquals(String material) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MATERIAL = ? ORDER BY MATERIAL", new Object[] { material } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'VESICAL = :vesical'.
	 */
	public ArrEnf[] findWhereVesicalEquals(String vesical) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VESICAL = ? ORDER BY VESICAL", new Object[] { vesical } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'OTROS = :otros'.
	 */
	public ArrEnf[] findWhereOtrosEquals(String otros) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OTROS = ? ORDER BY OTROS", new Object[] { otros } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'VASCULAR = :vascular'.
	 */
	public ArrEnf[] findWhereVascularEquals(long vascular) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VASCULAR = ? ORDER BY VASCULAR", new Object[] {  new Long(vascular) } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'HEMOSTASIA = :hemostasia'.
	 */
	public ArrEnf[] findWhereHemostasiaEquals(long hemostasia) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HEMOSTASIA = ? ORDER BY HEMOSTASIA", new Object[] {  new Long(hemostasia) } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'VENDAJE = :vendaje'.
	 */
	public ArrEnf[] findWhereVendajeEquals(long vendaje) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VENDAJE = ? ORDER BY VENDAJE", new Object[] {  new Long(vendaje) } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'ZONA = :zona'.
	 */
	public ArrEnf[] findWhereZonaEquals(long zona) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ZONA = ? ORDER BY ZONA", new Object[] {  new Long(zona) } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'SUERO = :suero'.
	 */
	public ArrEnf[] findWhereSueroEquals(String suero) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUERO = ? ORDER BY SUERO", new Object[] { suero } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'HEPARINA = :heparina'.
	 */
	public ArrEnf[] findWhereHeparinaEquals(String heparina) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HEPARINA = ? ORDER BY HEPARINA", new Object[] { heparina } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'SEDACION = :sedacion'.
	 */
	public ArrEnf[] findWhereSedacionEquals(long sedacion) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SEDACION = ? ORDER BY SEDACION", new Object[] {  new Long(sedacion) } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'FARMACOS = :farmacos'.
	 */
	public ArrEnf[] findWhereFarmacosEquals(String farmacos) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FARMACOS = ? ORDER BY FARMACOS", new Object[] { farmacos } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'CV = :cv'.
	 */
	public ArrEnf[] findWhereCvEquals(long cv) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CV = ? ORDER BY CV", new Object[] {  new Long(cv) } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'CV1 = :cv1'.
	 */
	public ArrEnf[] findWhereCv1Equals(String cv1) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CV1 = ? ORDER BY CV1", new Object[] { cv1 } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'CV2 = :cv2'.
	 */
	public ArrEnf[] findWhereCv2Equals(String cv2) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CV2 = ? ORDER BY CV2", new Object[] { cv2 } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'CV3 = :cv3'.
	 */
	public ArrEnf[] findWhereCv3Equals(String cv3) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CV3 = ? ORDER BY CV3", new Object[] { cv3 } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'CV4 = :cv4'.
	 */
	public ArrEnf[] findWhereCv4Equals(String cv4) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CV4 = ? ORDER BY CV4", new Object[] { cv4 } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'MOTIVO = :motivo'.
	 */
	public ArrEnf[] findWhereMotivoEquals(long motivo) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOTIVO = ? ORDER BY MOTIVO", new Object[] {  new Long(motivo) } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'EXITO = :exito'.
	 */
	public ArrEnf[] findWhereExitoEquals(long exito) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EXITO = ? ORDER BY EXITO", new Object[] {  new Long(exito) } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'OBSERV = :observ'.
	 */
	public ArrEnf[] findWhereObservEquals(String observ) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OBSERV = ? ORDER BY OBSERV", new Object[] { observ } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'DESTINO = :destino'.
	 */
	public ArrEnf[] findWhereDestinoEquals(String destino) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESTINO = ? ORDER BY DESTINO", new Object[] { destino } );
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the criteria 'FECHA = :fecha'.
	 */
	public ArrEnf[] findWhereFechaEquals(Date fecha) throws ArrEnfDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA = ? ORDER BY FECHA", new Object[] { fecha==null ? null : new java.sql.Timestamp( fecha.getTime() ) } );
	}

	/**
	 * Method 'ArrEnfDaoImpl'
	 * 
	 */
	public ArrEnfDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ArrEnfDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ArrEnfDaoImpl'
	 * 
	 * @param userConn
	 */
	public ArrEnfDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		//return "idea.ARR_ENF";
		return "idea.arr_enf";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ArrEnf fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ArrEnf dto = new ArrEnf();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ArrEnf[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ArrEnf dto = new ArrEnf();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ArrEnf ret[] = new ArrEnf[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ArrEnf dto, ResultSet rs) throws SQLException
	{
		dto.setIdPaciente( new Integer( rs.getInt(COLUMN_ID_PACIENTE) ) );
		dto.setIdRegistro( new Integer( rs.getInt(COLUMN_ID_REGISTRO) ) );
		dto.setPeso( rs.getString( COLUMN_PESO ) );
		dto.setTalla( rs.getString( COLUMN_TALLA ) );
		dto.setTalleg1( rs.getString( COLUMN_TALLEG1 ) );
		dto.setTalleg2( rs.getString( COLUMN_TALLEG2 ) );
		dto.setFclleg( rs.getString( COLUMN_FCLLEG ) );
		dto.setTafin1( rs.getString( COLUMN_TAFIN1 ) );
		dto.setTafin2( rs.getString( COLUMN_TAFIN2 ) );
		dto.setFcfin( rs.getString( COLUMN_FCFIN ) );
		dto.setTataq1( rs.getString( COLUMN_TATAQ1 ) );
		dto.setTataq2( rs.getString( COLUMN_TATAQ2 ) );
		dto.setFctaq( rs.getString( COLUMN_FCTAQ ) );
		dto.setCalibre1( rs.getString( COLUMN_CALIBRE1 ) );
		dto.setMiembro( rs.getString( COLUMN_MIEMBRO ) );
		dto.setPlanta( new Integer( rs.getInt(COLUMN_PLANTA) ) );
		if (rs.wasNull()) {
			dto.setPlanta( null );
		}
		
		dto.setNumero( rs.getString( COLUMN_NUMERO ) );
		dto.setCalibre2( rs.getString( COLUMN_CALIBRE2 ) );
		dto.setDiagnos( rs.getString( COLUMN_DIAGNOS ) );
		dto.setPuncion( new Integer( rs.getInt(COLUMN_PUNCION) ) );
		if (rs.wasNull()) {
			dto.setPuncion( null );
		}
		
		dto.setMaterial( rs.getString( COLUMN_MATERIAL ) );
		dto.setVesical( rs.getString( COLUMN_VESICAL ) );
		dto.setOtros( rs.getString( COLUMN_OTROS ) );
		dto.setVascular( rs.getString(COLUMN_VASCULAR) );
		
		dto.setHemostasia( new Integer( rs.getInt(COLUMN_HEMOSTASIA) ) );
		if (rs.wasNull()) {
			dto.setHemostasia( null );
		}
		
		dto.setVendaje( new Integer( rs.getInt(COLUMN_VENDAJE) ) );
		if (rs.wasNull()) {
			dto.setVendaje( null );
		}
		
		dto.setZona( new Integer( rs.getInt(COLUMN_ZONA) ) );
		if (rs.wasNull()) {
			dto.setZona( null );
		}
		
		dto.setSuero( rs.getString( COLUMN_SUERO ) );
		dto.setHeparina( rs.getString( COLUMN_HEPARINA ) );
		dto.setSedacion( rs.getString(COLUMN_SEDACION) );
		
		dto.setFarmacos( rs.getString( COLUMN_FARMACOS ) );
		dto.setCv( new Integer( rs.getInt(COLUMN_CV) ) );
		if (rs.wasNull()) {
			dto.setCv( null );
		}
		
		dto.setCv1( rs.getString( COLUMN_CV1 ) );
		dto.setCv2( rs.getString( COLUMN_CV2 ) );
		dto.setCv3( rs.getString( COLUMN_CV3 ) );
		dto.setCv4( rs.getString( COLUMN_CV4 ) );
		dto.setMotivo( new Integer( rs.getInt(COLUMN_MOTIVO) ) );
		if (rs.wasNull()) {
			dto.setMotivo( null );
		}
		
		dto.setExito( new Integer( rs.getInt(COLUMN_EXITO) ) );
		if (rs.wasNull()) {
			dto.setExito( null );
		}
		
		dto.setObserv( rs.getString( COLUMN_OBSERV ) );
		dto.setDestino( rs.getString( COLUMN_DESTINO ) );
		dto.setFecha( rs.getTimestamp(COLUMN_FECHA ) );
		dto.setHemostr( rs.getString( COLUMN_HEMOSTR ) );
		dto.setIdeef( new Integer( rs.getInt(COLUMN_IDEEF) ) );
		if (rs.wasNull()) {
			dto.setIdeef( null );
		}
		dto.setDiuresis( rs.getString( COLUMN_DIURESIS ) );
		dto.setCuidados( rs.getString( COLUMN_CUIDADOS ) );
		dto.setInr( rs.getString( COLUMN_INR ) );
		
		dto.setHemostasiav( new Integer( rs.getInt(COLUMN_HEMOSTASIAV) ) );
		if (rs.wasNull()) {
			dto.setHemostasiav( null );
		}
		dto.setHemostrv( rs.getString( COLUMN_HEMOSTRV ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ArrEnf dto)
	{
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the specified arbitrary SQL statement
	 */
	public ArrEnf[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrEnfDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrEnfDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the ARR_ENF table that match the specified arbitrary SQL statement
	 */
	public ArrEnf[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrEnfDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			throw new ArrEnfDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
