/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.jdbc;

import com.sorin.idea.dao.*;
import com.sorin.idea.factory.*;
import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ImpHojaImplanteDaoImpl extends AbstractDAO implements ImpHojaImplanteDao
{
	private AuditoriaDao auditoriaDao = new AuditoriaDao();
    private AuditoriaDto auditoriaDto = null;
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT IDHOJAIMP, IMPLANTADOR, TESTIND, ENERGIATEST, IMPTEST, NUMCHOQTEST, PRIORIDAD, TESCOPIA, HLLEGADA, HINICIO, HFIN, HSALIDA, INTERES, LUGARIMP, TANESTESIA, TINDICACION, COMENTARIOS, INCISIONES_SICD, TESTIND_EFECTIVO, TESTIND_DESFIB, POLARIDAD_TEST, DOSIS_ESCOPIA FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( IDHOJAIMP, IMPLANTADOR, TESTIND, ENERGIATEST, IMPTEST, NUMCHOQTEST, PRIORIDAD, TESCOPIA, HLLEGADA, HINICIO, HFIN, HSALIDA, INTERES, LUGARIMP, TANESTESIA, TINDICACION, COMENTARIOS, INCISIONES_SICD, TESTIND_EFECTIVO, TESTIND_DESFIB, POLARIDAD_TEST, DOSIS_ESCOPIA ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET IDHOJAIMP = ?, IMPLANTADOR = ?, TESTIND = ?, ENERGIATEST = ?, IMPTEST = ?, NUMCHOQTEST = ?, PRIORIDAD = ?, TESCOPIA = ?, HLLEGADA = ?, HINICIO = ?, HFIN = ?, HSALIDA = ?, INTERES = ?, LUGARIMP = ?, TANESTESIA = ?, TINDICACION = ?, COMENTARIOS = ?, INCISIONES_SICD = ?, TESTIND_EFECTIVO = ?, TESTIND_DESFIB = ?, POLARIDAD_TEST = ?, DOSIS_ESCOPIA = ? WHERE IDHOJAIMP = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE IDHOJAIMP = ?";

	/** 
	 * Index of column IDHOJAIMP
	 */
	protected static final int COLUMN_IDHOJAIMP = 1;

	/** 
	 * Index of column IMPLANTADOR
	 */
	protected static final int COLUMN_IMPLANTADOR = 2;

	/** 
	 * Index of column TESTIND
	 */
	protected static final int COLUMN_TESTIND = 3;

	/** 
	 * Index of column ENERGIATEST
	 */
	protected static final int COLUMN_ENERGIATEST = 4;

	/** 
	 * Index of column IMPTEST
	 */
	protected static final int COLUMN_IMPTEST = 5;

	/** 
	 * Index of column NUMCHOQTEST
	 */
	protected static final int COLUMN_NUMCHOQTEST = 6;

	/** 
	 * Index of column PRIORIDAD
	 */
	protected static final int COLUMN_PRIORIDAD = 7;

	/** 
	 * Index of column TESCOPIA
	 */
	protected static final int COLUMN_TESCOPIA = 8;

	/** 
	 * Index of column HLLEGADA
	 */
	protected static final int COLUMN_HLLEGADA = 9;

	/** 
	 * Index of column HINICIO
	 */
	protected static final int COLUMN_HINICIO = 10;

	/** 
	 * Index of column HFIN
	 */
	protected static final int COLUMN_HFIN = 11;

	/** 
	 * Index of column HSALIDA
	 */
	protected static final int COLUMN_HSALIDA = 12;

	/** 
	 * Index of column INTERES
	 */
	protected static final int COLUMN_INTERES = 13;

	/** 
	 * Index of column LUGARIMP
	 */
	protected static final int COLUMN_LUGARIMP = 14;

	/** 
	 * Index of column TANESTESIA
	 */
	protected static final int COLUMN_TANESTESIA = 15;

	/** 
	 * Index of column TINDICACION
	 */
	protected static final int COLUMN_TINDICACION = 16;

	/** 
	 * Index of column COMENTARIOS
	 */
	protected static final int COLUMN_COMENTARIOS = 17;

	/** 
	 * Index of column INCISIONES_SICD
	 */
	protected static final int COLUMN_INCISIONES_SICD = 18;

	/** 
	 * Index of column TESTIND_EFECTIVO
	 */
	protected static final int COLUMN_TESTIND_EFECTIVO = 19;

	/** 
	 * Index of column TESTIND_DESFIB
	 */
	protected static final int COLUMN_TESTIND_DESFIB = 20;

	/** 
	 * Index of column POLARIDAD_TEST
	 */
	protected static final int COLUMN_POLARIDAD_TEST = 21;

	/** 
	 * Index of column DOSIS_ESCOPIA
	 */
	protected static final int COLUMN_DOSIS_ESCOPIA = 22;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 22;

	/** 
	 * Index of primary-key column IDHOJAIMP
	 */
	protected static final int PK_COLUMN_IDHOJAIMP = 1;

	/** 
	 * Inserts a new row in the imp_hoja_implante table.
	 */
	public ImpHojaImplantePk insert(ImpHojaImplante dto) throws ImpHojaImplanteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.getIdhojaimp() != null) {
				stmt.setInt( index++, dto.getIdhojaimp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getImplantador() != null) {
				stmt.setInt( index++, dto.getImplantador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTestind() != null) {
				stmt.setShort( index++, dto.getTestind().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getEnergiatest() );
			stmt.setString( index++, dto.getImptest() );
			stmt.setString( index++, dto.getNumchoqtest() );
			if (dto.getPrioridad() != null) {
				stmt.setInt( index++, dto.getPrioridad().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getTescopia() );
			stmt.setString( index++, dto.getHllegada() );
			stmt.setString( index++, dto.getHinicio() );
			stmt.setString( index++, dto.getHfin() );
			stmt.setString( index++, dto.getHsalida() );
			if (dto.getInteres() != null) {
				stmt.setInt( index++, dto.getInteres().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getLugarimp() != null) {
				stmt.setInt( index++, dto.getLugarimp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTanestesia() != null) {
				stmt.setInt( index++, dto.getTanestesia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTindicacion() != null) {
				stmt.setInt( index++, dto.getTindicacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getComentarios() );
			if (dto.getIncisionesSicd() != null) {
				stmt.setInt( index++, dto.getIncisionesSicd().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTestindEfectivo() != null) {
				stmt.setInt( index++, dto.getTestindEfectivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTestindDesfib() != null) {
				stmt.setInt( index++, dto.getTestindDesfib().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPolaridadTest() != null) {
				stmt.setInt( index++, dto.getPolaridadTest().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getDosisEscopia() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdhojaimp( new Integer( rs.getInt(1) ) );
			}
			auditoriaDto.setAccion(AuditoriaDto.insercion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpHojaImplanteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the imp_hoja_implante table.
	 */
	public void update(ImpHojaImplantePk pk, ImpHojaImplante dto) throws ImpHojaImplanteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			if (dto.getIdhojaimp() != null) {
				stmt.setInt( index++, dto.getIdhojaimp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getImplantador() != null) {
				stmt.setInt( index++, dto.getImplantador().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTestind() != null) {
				stmt.setShort( index++, dto.getTestind().shortValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.SMALLINT);
			}
		
			stmt.setString( index++, dto.getEnergiatest() );
			stmt.setString( index++, dto.getImptest() );
			stmt.setString( index++, dto.getNumchoqtest() );
			if (dto.getPrioridad() != null) {
				stmt.setInt( index++, dto.getPrioridad().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getTescopia() );
			stmt.setString( index++, dto.getHllegada() );
			stmt.setString( index++, dto.getHinicio() );
			stmt.setString( index++, dto.getHfin() );
			stmt.setString( index++, dto.getHsalida() );
			if (dto.getInteres() != null) {
				stmt.setInt( index++, dto.getInteres().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getLugarimp() != null) {
				stmt.setInt( index++, dto.getLugarimp().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTanestesia() != null) {
				stmt.setInt( index++, dto.getTanestesia().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTindicacion() != null) {
				stmt.setInt( index++, dto.getTindicacion().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getComentarios() );
			if (dto.getIncisionesSicd() != null) {
				stmt.setInt( index++, dto.getIncisionesSicd().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTestindEfectivo() != null) {
				stmt.setInt( index++, dto.getTestindEfectivo().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getTestindDesfib() != null) {
				stmt.setInt( index++, dto.getTestindDesfib().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			if (dto.getPolaridadTest() != null) {
				stmt.setInt( index++, dto.getPolaridadTest().intValue() );
			} else {
				stmt.setNull(index++, java.sql.Types.INTEGER);
			}
		
			stmt.setString( index++, dto.getDosisEscopia() );
			if (pk.getIdhojaimp() != null) {
				stmt.setInt( 23, pk.getIdhojaimp().intValue() );
			} else {
				stmt.setNull(23, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			auditoriaDto.setAccion(AuditoriaDto.modificacion);
			auditoriaDto.setDescri(dto.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
			reset(dto);
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpHojaImplanteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the imp_hoja_implante table.
	 */
	public void delete(ImpHojaImplantePk pk) throws ImpHojaImplanteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			if (pk.getIdhojaimp() != null) {
				stmt.setInt( 1, pk.getIdhojaimp().intValue() );
			} else {
				stmt.setNull(1, java.sql.Types.INTEGER);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			//System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			auditoriaDto.setAccion(AuditoriaDto.borrado);
			auditoriaDto.setDescri(pk.toString());
			auditoriaDao.escribeAuditoria(auditoriaDto);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpHojaImplanteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the imp_hoja_implante table that matches the specified primary-key value.
	 */
	public ImpHojaImplante findByPrimaryKey(ImpHojaImplantePk pk) throws ImpHojaImplanteDaoException
	{
		return findByPrimaryKey( pk.getIdhojaimp() );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'IDHOJAIMP = :idhojaimp'.
	 */
	public ImpHojaImplante findByPrimaryKey(Integer idhojaimp) throws ImpHojaImplanteDaoException
	{
		ImpHojaImplante ret[] = findByDynamicSelect( SQL_SELECT + " WHERE IDHOJAIMP = ?", new Object[] { idhojaimp } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria ''.
	 */
	public ImpHojaImplante[] findAll() throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY IDHOJAIMP", null );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'IDHOJAIMP = :idhojaimp'.
	 */
	public ImpHojaImplante[] findWhereIdhojaimpEquals(int idhojaimp) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IDHOJAIMP = ? ORDER BY IDHOJAIMP", new Object[] {  new Integer(idhojaimp) } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'IMPLANTADOR = :implantador'.
	 */
	public ImpHojaImplante[] findWhereImplantadorEquals(int implantador) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPLANTADOR = ? ORDER BY IMPLANTADOR", new Object[] {  new Integer(implantador) } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'TESTIND = :testind'.
	 */
	public ImpHojaImplante[] findWhereTestindEquals(short testind) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TESTIND = ? ORDER BY TESTIND", new Object[] {  new Short(testind) } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'ENERGIATEST = :energiatest'.
	 */
	public ImpHojaImplante[] findWhereEnergiatestEquals(String energiatest) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ENERGIATEST = ? ORDER BY ENERGIATEST", new Object[] { energiatest } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'IMPTEST = :imptest'.
	 */
	public ImpHojaImplante[] findWhereImptestEquals(String imptest) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IMPTEST = ? ORDER BY IMPTEST", new Object[] { imptest } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'NUMCHOQTEST = :numchoqtest'.
	 */
	public ImpHojaImplante[] findWhereNumchoqtestEquals(String numchoqtest) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMCHOQTEST = ? ORDER BY NUMCHOQTEST", new Object[] { numchoqtest } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'PRIORIDAD = :prioridad'.
	 */
	public ImpHojaImplante[] findWherePrioridadEquals(int prioridad) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRIORIDAD = ? ORDER BY PRIORIDAD", new Object[] {  new Integer(prioridad) } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'TESCOPIA = :tescopia'.
	 */
	public ImpHojaImplante[] findWhereTescopiaEquals(String tescopia) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TESCOPIA = ? ORDER BY TESCOPIA", new Object[] { tescopia } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'HLLEGADA = :hllegada'.
	 */
	public ImpHojaImplante[] findWhereHllegadaEquals(String hllegada) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HLLEGADA = ? ORDER BY HLLEGADA", new Object[] { hllegada } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'HINICIO = :hinicio'.
	 */
	public ImpHojaImplante[] findWhereHinicioEquals(String hinicio) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HINICIO = ? ORDER BY HINICIO", new Object[] { hinicio } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'HFIN = :hfin'.
	 */
	public ImpHojaImplante[] findWhereHfinEquals(String hfin) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HFIN = ? ORDER BY HFIN", new Object[] { hfin } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'HSALIDA = :hsalida'.
	 */
	public ImpHojaImplante[] findWhereHsalidaEquals(String hsalida) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE HSALIDA = ? ORDER BY HSALIDA", new Object[] { hsalida } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'INTERES = :interes'.
	 */
	public ImpHojaImplante[] findWhereInteresEquals(int interes) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INTERES = ? ORDER BY INTERES", new Object[] {  new Integer(interes) } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'LUGARIMP = :lugarimp'.
	 */
	public ImpHojaImplante[] findWhereLugarimpEquals(int lugarimp) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LUGARIMP = ? ORDER BY LUGARIMP", new Object[] {  new Integer(lugarimp) } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'TANESTESIA = :tanestesia'.
	 */
	public ImpHojaImplante[] findWhereTanestesiaEquals(int tanestesia) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TANESTESIA = ? ORDER BY TANESTESIA", new Object[] {  new Integer(tanestesia) } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'TINDICACION = :tindicacion'.
	 */
	public ImpHojaImplante[] findWhereTindicacionEquals(int tindicacion) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TINDICACION = ? ORDER BY TINDICACION", new Object[] {  new Integer(tindicacion) } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'COMENTARIOS = :comentarios'.
	 */
	public ImpHojaImplante[] findWhereComentariosEquals(String comentarios) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMENTARIOS = ? ORDER BY COMENTARIOS", new Object[] { comentarios } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'INCISIONES_SICD = :incisionesSicd'.
	 */
	public ImpHojaImplante[] findWhereIncisionesSicdEquals(int incisionesSicd) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE INCISIONES_SICD = ? ORDER BY INCISIONES_SICD", new Object[] {  new Integer(incisionesSicd) } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'TESTIND_EFECTIVO = :testindEfectivo'.
	 */
	public ImpHojaImplante[] findWhereTestindEfectivoEquals(int testindEfectivo) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TESTIND_EFECTIVO = ? ORDER BY TESTIND_EFECTIVO", new Object[] {  new Integer(testindEfectivo) } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'TESTIND_DESFIB = :testindDesfib'.
	 */
	public ImpHojaImplante[] findWhereTestindDesfibEquals(int testindDesfib) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TESTIND_DESFIB = ? ORDER BY TESTIND_DESFIB", new Object[] {  new Integer(testindDesfib) } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'POLARIDAD_TEST = :polaridadTest'.
	 */
	public ImpHojaImplante[] findWherePolaridadTestEquals(int polaridadTest) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE POLARIDAD_TEST = ? ORDER BY POLARIDAD_TEST", new Object[] {  new Integer(polaridadTest) } );
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the criteria 'DOSIS_ESCOPIA = :dosisEscopia'.
	 */
	public ImpHojaImplante[] findWhereDosisEscopiaEquals(String dosisEscopia) throws ImpHojaImplanteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DOSIS_ESCOPIA = ? ORDER BY DOSIS_ESCOPIA", new Object[] { dosisEscopia } );
	}

	/**
	 * Method 'ImpHojaImplanteDaoImpl'
	 * 
	 */
	public ImpHojaImplanteDaoImpl()
	{
	}
	public ImpHojaImplanteDaoImpl(String usuario)
	{
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}
	public ImpHojaImplanteDaoImpl(final java.sql.Connection userConn,String usuario)
	{
		this.userConn = userConn;
		this.auditoriaDto = new AuditoriaDto(usuario, getTableName());
	}

	/**
	 * Method 'ImpHojaImplanteDaoImpl'
	 * 
	 * @param userConn
	 */
	public ImpHojaImplanteDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "idea.imp_hoja_implante";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ImpHojaImplante fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ImpHojaImplante dto = new ImpHojaImplante();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ImpHojaImplante[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ImpHojaImplante dto = new ImpHojaImplante();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ImpHojaImplante ret[] = new ImpHojaImplante[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ImpHojaImplante dto, ResultSet rs) throws SQLException
	{
		dto.setIdhojaimp( new Integer( rs.getInt(COLUMN_IDHOJAIMP) ) );
		dto.setImplantador( new Integer( rs.getInt(COLUMN_IMPLANTADOR) ) );
		if (rs.wasNull()) {
			dto.setImplantador( null );
		}
		
		dto.setTestind( new Short( rs.getShort(COLUMN_TESTIND) ) );
		if (rs.wasNull()) {
			dto.setTestind( null );
		}
		
		dto.setEnergiatest( rs.getString( COLUMN_ENERGIATEST ) );
		dto.setImptest( rs.getString( COLUMN_IMPTEST ) );
		dto.setNumchoqtest( rs.getString( COLUMN_NUMCHOQTEST ) );
		dto.setPrioridad( new Integer( rs.getInt(COLUMN_PRIORIDAD) ) );
		if (rs.wasNull()) {
			dto.setPrioridad( null );
		}
		
		dto.setTescopia( rs.getString( COLUMN_TESCOPIA ) );
		dto.setHllegada( rs.getString( COLUMN_HLLEGADA ) );
		dto.setHinicio( rs.getString( COLUMN_HINICIO ) );
		dto.setHfin( rs.getString( COLUMN_HFIN ) );
		dto.setHsalida( rs.getString( COLUMN_HSALIDA ) );
		dto.setInteres( new Integer( rs.getInt(COLUMN_INTERES) ) );
		if (rs.wasNull()) {
			dto.setInteres( null );
		}
		
		dto.setLugarimp( new Integer( rs.getInt(COLUMN_LUGARIMP) ) );
		if (rs.wasNull()) {
			dto.setLugarimp( null );
		}
		
		dto.setTanestesia( new Integer( rs.getInt(COLUMN_TANESTESIA) ) );
		if (rs.wasNull()) {
			dto.setTanestesia( null );
		}
		
		dto.setTindicacion( new Integer( rs.getInt(COLUMN_TINDICACION) ) );
		if (rs.wasNull()) {
			dto.setTindicacion( null );
		}
		
		dto.setComentarios( rs.getString( COLUMN_COMENTARIOS ) );
		dto.setIncisionesSicd( new Integer( rs.getInt(COLUMN_INCISIONES_SICD) ) );
		if (rs.wasNull()) {
			dto.setIncisionesSicd( null );
		}
		
		dto.setTestindEfectivo( new Integer( rs.getInt(COLUMN_TESTIND_EFECTIVO) ) );
		if (rs.wasNull()) {
			dto.setTestindEfectivo( null );
		}
		
		dto.setTestindDesfib( new Integer( rs.getInt(COLUMN_TESTIND_DESFIB) ) );
		if (rs.wasNull()) {
			dto.setTestindDesfib( null );
		}
		
		dto.setPolaridadTest( new Integer( rs.getInt(COLUMN_POLARIDAD_TEST) ) );
		if (rs.wasNull()) {
			dto.setPolaridadTest( null );
		}
		dto.setDosisEscopia( rs.getString( COLUMN_DOSIS_ESCOPIA ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ImpHojaImplante dto)
	{
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the specified arbitrary SQL statement
	 */
	public ImpHojaImplante[] findByDynamicSelect(String sql, Object[] sqlParams) throws ImpHojaImplanteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpHojaImplanteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the imp_hoja_implante table that match the specified arbitrary SQL statement
	 */
	public ImpHojaImplante[] findByDynamicWhere(String sql, Object[] sqlParams) throws ImpHojaImplanteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ImpHojaImplanteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
