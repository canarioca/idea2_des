/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Date;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;


public interface ArrTestFleDao
{
	/** 
	 * Inserts a new row in the ARR_TEST_FLE table.
	 */
	public ArrTestFlePk insert(ArrTestFle dto) throws ArrTestFleDaoException;

	/** 
	 * Updates a single row in the ARR_TEST_FLE table.
	 */
	public void update(ArrTestFlePk pk, ArrTestFle dto) throws ArrTestFleDaoException;

	/** 
	 * Deletes a single row in the ARR_TEST_FLE table.
	 */
	public void delete(ArrTestFlePk pk) throws ArrTestFleDaoException;

	/** 
	 * Returns the rows from the ARR_TEST_FLE table that matches the specified primary-key value.
	 */
	public ArrTestFle findByPrimaryKey(ArrTestFlePk pk) throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'CODIGO_TEST = :codigoTest'.
	 */
	public ArrTestFle findByPrimaryKey(Integer codigoTest) throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria ''.
	 */
	public ArrTestFle[] findAll() throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'CODIGO_PACIENTE = :codigoPaciente'.
	 */
	public ArrTestFle[] findWhereCodigoPacienteEquals(long codigoPaciente) throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'CODIGO_TEST = :codigoTest'.
	 */
	public ArrTestFle[] findWhereCodigoTestEquals(long codigoTest) throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'CLINICO = :clinico'.
	 */
	public ArrTestFle[] findWhereClinicoEquals(long clinico) throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'ECG = :ecg'.
	 */
	public ArrTestFle[] findWhereEcgEquals(long ecg) throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'INTERVALOS = :intervalos'.
	 */
	public ArrTestFle[] findWhereIntervalosEquals(long intervalos) throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'QRS = :qrs'.
	 */
	public ArrTestFle[] findWhereQrsEquals(long qrs) throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'COMPLICA = :complica'.
	 */
	public ArrTestFle[] findWhereComplicaEquals(long complica) throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'TRATAM = :tratam'.
	 */
	public ArrTestFle[] findWhereTratamEquals(long tratam) throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'V1 = :v1'.
	 */
	public ArrTestFle[] findWhereV1Equals(long v1) throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'V2 = :v2'.
	 */
	public ArrTestFle[] findWhereV2Equals(long v2) throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'RESULTADO = :resultado'.
	 */
	public ArrTestFle[] findWhereResultadoEquals(long resultado) throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the criteria 'FECHA = :fecha'.
	 */
	public ArrTestFle[] findWhereFechaEquals(Date fecha) throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the arr_test_fle table that match the criteria 'COMPLICAOTR = :complicaotr'.
	 */
	public ArrTestFle[] findWhereComplicaotrEquals(String complicaotr) throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the arr_test_fle table that match the criteria 'NPROC = :nproc'.
	 */
	public ArrTestFle[] findWhereNprocEquals(String nproc) throws ArrTestFleDaoException;

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the specified arbitrary SQL statement
	 */
	public ArrTestFle[] findByDynamicSelect(String sql, Object[] sqlParams) throws ArrTestFleDaoException;

	/** 
	 * Returns all rows from the ARR_TEST_FLE table that match the specified arbitrary SQL statement
	 */
	public ArrTestFle[] findByDynamicWhere(String sql, Object[] sqlParams) throws ArrTestFleDaoException;

	/** 
	 * ESTADISTICAS
	 */
	public ArrayList<ArrayList<Object>> getEstadisticas(Date fechaini,Date fechafin,ArrTestFle test) throws ArrTestFleDaoException;
	public ArrayList<ArrayList<Object>> getEstadisticasFLE(Date fechaini, Date fechafin) throws ArrTestFleDaoException;

}
