/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sorin.idea.dao;

import com.sorin.idea.dto.*;
import com.sorin.idea.exceptions.*;

public interface GenvaloresfabricaDao
{
	/** 
	 * Inserts a new row in the genvaloresfabrica table.
	 */
	public GenvaloresfabricaPk insert(Genvaloresfabrica dto) throws GenvaloresfabricaDaoException;

	/** 
	 * Updates a single row in the genvaloresfabrica table.
	 */
	public void update(GenvaloresfabricaPk pk, Genvaloresfabrica dto) throws GenvaloresfabricaDaoException;

	/** 
	 * Deletes a single row in the genvaloresfabrica table.
	 */
	public void delete(GenvaloresfabricaPk pk) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns the rows from the genvaloresfabrica table that matches the specified primary-key value.
	 */
	public Genvaloresfabrica findByPrimaryKey(GenvaloresfabricaPk pk) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'IDGENERADOR = :idgenerador'.
	 */
	public Genvaloresfabrica findByPrimaryKey(Integer idgenerador) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria ''.
	 */
	public Genvaloresfabrica[] findAll() throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'IDGENERADOR = :idgenerador'.
	 */
	public Genvaloresfabrica[] findWhereIdgeneradorEquals(int idgenerador) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'VOLTAJEAD = :voltajead'.
	 */
	public Genvaloresfabrica[] findWhereVoltajeadEquals(String voltajead) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'DURIMPAD = :durimpad'.
	 */
	public Genvaloresfabrica[] findWhereDurimpadEquals(String durimpad) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'SENSIBAD = :sensibad'.
	 */
	public Genvaloresfabrica[] findWhereSensibadEquals(String sensibad) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'VOLTAJEVD = :voltajevd'.
	 */
	public Genvaloresfabrica[] findWhereVoltajevdEquals(String voltajevd) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'DURIMPVD = :durimpvd'.
	 */
	public Genvaloresfabrica[] findWhereDurimpvdEquals(String durimpvd) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'SENSIBVD = :sensibvd'.
	 */
	public Genvaloresfabrica[] findWhereSensibvdEquals(String sensibvd) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'VOLTAJEVI = :voltajevi'.
	 */
	public Genvaloresfabrica[] findWhereVoltajeviEquals(String voltajevi) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'DURIMPVI = :durimpvi'.
	 */
	public Genvaloresfabrica[] findWhereDurimpviEquals(String durimpvi) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'SENSIBVI = :sensibvi'.
	 */
	public Genvaloresfabrica[] findWhereSensibviEquals(String sensibvi) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'FRECUENCIA = :frecuencia'.
	 */
	public Genvaloresfabrica[] findWhereFrecuenciaEquals(String frecuencia) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'MODOEST = :modoest'.
	 */
	public Genvaloresfabrica[] findWhereModoestEquals(String modoest) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'IAVEST = :iavest'.
	 */
	public Genvaloresfabrica[] findWhereIavestEquals(String iavest) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the criteria 'IAVDET = :iavdet'.
	 */
	public Genvaloresfabrica[] findWhereIavdetEquals(String iavdet) throws GenvaloresfabricaDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the specified arbitrary SQL statement
	 */
	public Genvaloresfabrica[] findByDynamicSelect(String sql, Object[] sqlParams) throws GenvaloresfabricaDaoException;

	/** 
	 * Returns all rows from the genvaloresfabrica table that match the specified arbitrary SQL statement
	 */
	public Genvaloresfabrica[] findByDynamicWhere(String sql, Object[] sqlParams) throws GenvaloresfabricaDaoException;

}
